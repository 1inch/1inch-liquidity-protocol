{
  "address": "0x1D0aE300Eec4093cee4367c00b228D10a5C7aC63",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Error",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SlippageFeeVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcAdditionBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dstRemovalBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dstBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referralShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "governanceShare",
          "type": "uint256"
        }
      ],
      "name": "Sync",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "maxAmounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "minAmounts",
          "type": "uint256[2]"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fairSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "receivedAmounts",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "maxAmounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "minAmounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fairSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "receivedAmounts",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardSlippageFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "feeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "feeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBalanceForAddition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBalanceForRemoval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract IMooniswapFactoryGovernance",
          "name": "_mooniswapFactoryGovernance",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mooniswapFactoryGovernance",
      "outputs": [
        {
          "internalType": "contract IMooniswapFactoryGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMooniswapFactoryGovernance",
          "name": "newMooniswapFactoryGovernance",
          "type": "address"
        }
      ],
      "name": "setMooniswapFactoryGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "slippageFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "slippageFeeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "swapFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "virtualBalancesForAddition",
      "outputs": [
        {
          "internalType": "uint216",
          "name": "balance",
          "type": "uint216"
        },
        {
          "internalType": "uint40",
          "name": "time",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "virtualBalancesForRemoval",
      "outputs": [
        {
          "internalType": "uint216",
          "name": "balance",
          "type": "uint216"
        },
        {
          "internalType": "uint40",
          "name": "time",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualFee",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualSlippageFee",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minReturns",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "withdrawnAmounts",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minReturns",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "withdrawFor",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "withdrawnAmounts",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb20518ec4f857f1e8ce3b2a89f656785514a7a37179872ceb8d61ec807d44617",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x1D0aE300Eec4093cee4367c00b228D10a5C7aC63",
    "transactionIndex": 0,
    "gasUsed": "8081919",
    "logsBloom": "0x
    "blockHash": "0x3e02a9398732ec9de59f2adcdffee3f6633f1b6bc906e562160c9a1f18227728",
    "transactionHash": "0xb20518ec4f857f1e8ce3b2a89f656785514a7a37179872ceb8d61ec807d44617",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 99873,
        "transactionHash": "0xb20518ec4f857f1e8ce3b2a89f656785514a7a37179872ceb8d61ec807d44617",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x3e02a9398732ec9de59f2adcdffee3f6633f1b6bc906e562160c9a1f18227728"
      }
    ],
    "blockNumber": 99873,
    "cumulativeGasUsed": "8081919",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Pool Implementation",
    "IMPL"
  ],
  "solcInputHash": "8b5c6fb4dcb2659c2442740c2b400d87",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12-develop.2020.12.9+commit.9b8c5857\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SlippageFeeVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAdditionBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstRemovalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governanceShare\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"maxAmounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"minAmounts\",\"type\":\"uint256[2]\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fairSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"receivedAmounts\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"maxAmounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"minAmounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fairSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"receivedAmounts\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardSlippageFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"feeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"feeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalanceForAddition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalanceForRemoval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract IMooniswapFactoryGovernance\",\"name\":\"_mooniswapFactoryGovernance\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooniswapFactoryGovernance\",\"outputs\":[{\"internalType\":\"contract IMooniswapFactoryGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMooniswapFactoryGovernance\",\"name\":\"newMooniswapFactoryGovernance\",\"type\":\"address\"}],\"name\":\"setMooniswapFactoryGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"slippageFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"slippageFeeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"swapFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"virtualBalancesForAddition\",\"outputs\":[{\"internalType\":\"uint216\",\"name\":\"balance\",\"type\":\"uint216\"},{\"internalType\":\"uint40\",\"name\":\"time\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"virtualBalancesForRemoval\",\"outputs\":[{\"internalType\":\"uint216\",\"name\":\"balance\",\"type\":\"uint216\"},{\"internalType\":\"uint40\",\"name\":\"time\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualFee\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualSlippageFee\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minReturns\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"withdrawnAmounts\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minReturns\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"withdrawnAmounts\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mooniswap.sol\":\"Mooniswap\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Mooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/Sqrt.sol\\\";\\nimport \\\"./libraries/VirtualBalance.sol\\\";\\nimport \\\"./governance/MooniswapGovernance.sol\\\";\\n\\n\\ncontract Mooniswap is MooniswapGovernance {\\n    using Sqrt for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    struct Balances {\\n        uint256 src;\\n        uint256 dst;\\n    }\\n\\n    struct Fees {\\n        uint256 fee;\\n        uint256 slippageFee;\\n    }\\n\\n    event Error(string reason);\\n\\n    event Deposited(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Withdrawn(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Swapped(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed srcToken,\\n        address dstToken,\\n        uint256 amount,\\n        uint256 result,\\n        uint256 srcAdditionBalance,\\n        uint256 dstRemovalBalance,\\n        address referral\\n    );\\n\\n    event Sync(\\n        uint256 srcBalance,\\n        uint256 dstBalance,\\n        uint256 fee,\\n        uint256 slippageFee,\\n        uint256 referralShare,\\n        uint256 governanceShare\\n    );\\n\\n    uint256 private constant _BASE_SUPPLY = 1000;  // Total supply on first deposit\\n\\n    IERC20 public token0;\\n    IERC20 public token1;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForAddition;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForRemoval;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    modifier whenNotShutdown {\\n        require(mooniswapFactoryGovernance.isActive(), \\\"Mooniswap: factory shutdown\\\");\\n        _;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    constructor(string memory name_, string memory symbol_) public ERC20(name_, symbol_) {\\n        require(bytes(name_).length > 0, \\\"Mooniswap: name is empty\\\");\\n        require(bytes(symbol_).length > 0, \\\"Mooniswap: symbol is empty\\\");\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function init(\\n        IERC20 token0_,\\n        IERC20 token1_,\\n        string memory name_,\\n        string memory symbol_,\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance\\n    ) external {\\n        require(bytes(name_).length > 0, \\\"Mooniswap: name is empty\\\");\\n        require(bytes(symbol_).length > 0, \\\"Mooniswap: symbol is empty\\\");\\n        require(token0_ != token1_, \\\"Mooniswap: duplicate tokens\\\");\\n        token0 = token0_;\\n        token1 = token1_;\\n        _name = name_;\\n        _symbol = symbol_;\\n        _init(_mooniswapFactoryGovernance);\\n    }\\n\\n    function getTokens() external view returns(IERC20[] memory tokens) {\\n        tokens = new IERC20[](2);\\n        tokens[0] = token0;\\n        tokens[1] = token1;\\n    }\\n\\n    function tokens(uint256 i) external view returns(IERC20) {\\n        if (i == 0) {\\n            return token0;\\n        } else if (i == 1) {\\n            return token1;\\n        } else {\\n            revert(\\\"Pool has two tokens\\\");\\n        }\\n    }\\n\\n    function getBalanceForAddition(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        return Math.max(virtualBalancesForAddition[token].current(balance), balance);\\n    }\\n\\n    function getBalanceForRemoval(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        return Math.min(virtualBalancesForRemoval[token].current(balance), balance);\\n    }\\n\\n    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256) {\\n        return _getReturn(src, dst, amount, getBalanceForAddition(src), getBalanceForRemoval(dst), fee(), slippageFee());\\n    }\\n\\n    function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts) external returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        return depositFor(maxAmounts, minAmounts, msg.sender);\\n    }\\n\\n    function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target) public nonReentrant returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalSupply == 0) {\\n            fairSupply = _BASE_SUPPLY.mul(99);\\n            _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.max(fairSupply, maxAmounts[i]);\\n\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                require(maxAmounts[i] >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), maxAmounts[i]);\\n                receivedAmounts[i] = maxAmounts[i];\\n            }\\n        }\\n        else {\\n            uint256[2] memory realBalances;\\n            for (uint i = 0; i < realBalances.length; i++) {\\n                realBalances[i] = _tokens[i].balanceOf(address(this));\\n            }\\n\\n            // Pre-compute fair supply\\n            fairSupply = type(uint256).max;\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 fairSupplyCached = fairSupply;\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\n                require(amount >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), amount);\\n                receivedAmounts[i] = _tokens[i].balanceOf(address(this)).sub(realBalances[i]);\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                virtualBalancesForRemoval[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n                virtualBalancesForAddition[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n            }\\n        }\\n\\n        require(fairSupply > 0, \\\"Mooniswap: result is not enough\\\");\\n        _mint(target, fairSupply);\\n\\n        emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\n    }\\n\\n    function withdraw(uint256 amount, uint256[] memory minReturns) external returns(uint256[2] memory withdrawnAmounts) {\\n        return withdrawFor(amount, minReturns, msg.sender);\\n    }\\n\\n    function withdrawFor(uint256 amount, uint256[] memory minReturns, address target) public nonReentrant returns(uint256[2] memory withdrawnAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n        _burn(msg.sender, amount);\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            IERC20 token = _tokens[i];\\n\\n            uint256 preBalance = token.balanceOf(address(this));\\n            uint256 value = preBalance.mul(amount).div(totalSupply);\\n            token.safeTransfer(target, value);\\n            withdrawnAmounts[i] = value;\\n            require(i >= minReturns.length || value >= minReturns[i], \\\"Mooniswap: result is not enough\\\");\\n\\n            virtualBalancesForAddition[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\\n            virtualBalancesForRemoval[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\\n        }\\n\\n        emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\n    }\\n\\n    function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral) external returns(uint256 result) {\\n        return swapFor(src, dst, amount, minReturn, referral, msg.sender);\\n    }\\n\\n    function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address receiver) public nonReentrant whenNotShutdown returns(uint256 result) {\\n        Balances memory balances = Balances({\\n            src: src.balanceOf(address(this)),\\n            dst: dst.balanceOf(address(this))\\n        });\\n        uint256 confirmed;\\n        Balances memory virtualBalances;\\n        Fees memory fees = Fees({\\n            fee: fee(),\\n            slippageFee: slippageFee()\\n        });\\n        (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\n        emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\n        _mintRewards(confirmed, result, referral, balances, fees);\\n    }\\n\\n    function _doTransfers(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address receiver, Balances memory balances, Fees memory fees)\\n        private returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\n    {\\n        virtualBalances.src = virtualBalancesForAddition[src].current(balances.src);\\n        virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\n        virtualBalances.dst = virtualBalancesForRemoval[dst].current(balances.dst);\\n        virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\n        src.safeTransferFrom(msg.sender, address(this), amount);\\n        confirmed = src.balanceOf(address(this)).sub(balances.src);\\n        result = _getReturn(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\n        require(result > 0 && result >= minReturn, \\\"Mooniswap: return is not enough\\\");\\n        dst.safeTransfer(receiver, result);\\n\\n        // Update virtual balances to the same direction only at imbalanced state\\n        if (virtualBalances.src != balances.src) {\\n            virtualBalancesForAddition[src].set(virtualBalances.src.add(confirmed));\\n        }\\n        if (virtualBalances.dst != balances.dst) {\\n            virtualBalancesForRemoval[dst].set(virtualBalances.dst.sub(result));\\n        }\\n        // Update virtual balances to the opposite direction\\n        virtualBalancesForRemoval[src].update(balances.src);\\n        virtualBalancesForAddition[dst].update(balances.dst);\\n    }\\n\\n    function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees) private {\\n        (uint256 referralShare, uint256 governanceShare, address govWallet, address feeCollector) = mooniswapFactoryGovernance.shareParameters();\\n\\n        uint256 refReward;\\n        uint256 govReward;\\n\\n        uint256 invariantRatio = uint256(1e36);\\n        invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\n        invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\n        if (invariantRatio > 1e36) {\\n            // calculate share only if invariant increased\\n            invariantRatio = invariantRatio.sqrt();\\n            uint256 invIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\n\\n            refReward = (referral != address(0)) ? invIncrease.mul(referralShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n            govReward = (govWallet != address(0)) ? invIncrease.mul(governanceShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n\\n            if (feeCollector == address(0)) {\\n                if (refReward > 0) {\\n                    _mint(referral, refReward);\\n                }\\n                if (govReward > 0) {\\n                    _mint(govWallet, govReward);\\n                }\\n            }\\n            else if (refReward > 0 || govReward > 0) {\\n                uint256 len = (refReward > 0 ? 1 : 0) + (govReward > 0 ? 1 : 0);\\n                address[] memory wallets = new address[](len);\\n                uint256[] memory rewards = new uint256[](len);\\n\\n                wallets[0] = referral;\\n                rewards[0] = refReward;\\n                if (govReward > 0) {\\n                    wallets[len - 1] = govWallet;\\n                    rewards[len - 1] = govReward;\\n                }\\n\\n                try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\n                    _mint(feeCollector, refReward.add(govReward));\\n                }\\n                catch {\\n                    emit Error(\\\"updateRewards() failed\\\");\\n                }\\n            }\\n        }\\n\\n        emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, refReward, govReward);\\n    }\\n\\n    /*\\n        spot_ret = dx * y / x\\n        uni_ret = dx * y / (x + dx)\\n        slippage = (spot_ret - uni_ret) / spot_ret\\n        slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\n        slippage = dx / (x + dx)\\n        ret = uni_ret * (1 - slip_fee * slippage)\\n        ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\n        ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\n\\n        x = amount * denominator\\n        dx = amount * (denominator - fee)\\n    */\\n    function _getReturn(IERC20 src, IERC20 dst, uint256 amount, uint256 srcBalance, uint256 dstBalance, uint256 fee, uint256 slippageFee) internal view returns(uint256) {\\n        if (src > dst) {\\n            (src, dst) = (dst, src);\\n        }\\n        if (amount > 0 && src == token0 && dst == token1) {\\n            uint256 taxedAmount = amount.sub(amount.mul(fee).div(MooniswapConstants._FEE_DENOMINATOR));\\n            uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\n            uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\n            uint256 feeNumerator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\n            uint256 feeDenominator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\n            return ret.mul(feeNumerator).div(feeDenominator);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74a69b35535a77eb2349704fd2efed8173aebb1962763f2c06440f068a2eca28\",\"license\":\"MIT\"},\"contracts/governance/MooniswapGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactoryGovernance.sol\\\";\\nimport \\\"../libraries/LiquidVoting.sol\\\";\\nimport \\\"../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\n\\n\\nabstract contract MooniswapGovernance is ERC20, Ownable, ReentrancyGuard {\\n    using Vote for Vote.Data;\\n    using LiquidVoting for LiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeCast for uint256;\\n\\n    event FeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n    event SlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n\\n    IMooniswapFactoryGovernance public mooniswapFactoryGovernance;\\n    LiquidVoting.Data private _fee;\\n    LiquidVoting.Data private _slippageFee;\\n    address private _owner;\\n    bool private _initialized;\\n\\n    function _init(IMooniswapFactoryGovernance _mooniswapFactoryGovernance) internal {\\n        require(!_initialized, \\\"Already initialized\\\");\\n        mooniswapFactoryGovernance = _mooniswapFactoryGovernance;\\n        _fee.data.result = _mooniswapFactoryGovernance.defaultFee().toUint104();\\n        _slippageFee.data.result = _mooniswapFactoryGovernance.defaultSlippageFee().toUint104();\\n        _owner = msg.sender;\\n        _initialized = true;\\n    }\\n\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    function setMooniswapFactoryGovernance(IMooniswapFactoryGovernance newMooniswapFactoryGovernance) external onlyOwner {\\n        mooniswapFactoryGovernance = newMooniswapFactoryGovernance;\\n        this.discardFeeVote();\\n        this.discardSlippageFeeVote();\\n    }\\n\\n    function fee() public view returns(uint256) {\\n        return _fee.data.current();\\n    }\\n\\n    function slippageFee() public view returns(uint256) {\\n        return _slippageFee.data.current();\\n    }\\n\\n    function virtualFee() external view returns(uint104, uint104, uint48) {\\n        return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\n    }\\n\\n    function virtualSlippageFee() external view returns(uint104, uint104, uint48) {\\n        return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\n    }\\n\\n    function feeVotes(address user) external view returns(uint256) {\\n        return _fee.votes[user].get(mooniswapFactoryGovernance.defaultFee);\\n    }\\n\\n    function slippageFeeVotes(address user) external view returns(uint256) {\\n        return _slippageFee.votes[user].get(mooniswapFactoryGovernance.defaultSlippageFee);\\n    }\\n\\n    function feeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function slippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function discardFeeVote() external {\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function discardSlippageFeeVote() external {\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function _emitFeeVoteUpdate(address account, uint256 newFee, bool isDefault, uint256 newBalance) private {\\n        emit FeeVoteUpdate(account, newFee, isDefault, newBalance);\\n    }\\n\\n    function _emitSlippageFeeVoteUpdate(address account, uint256 newSlippageFee, bool isDefault, uint256 newBalance) private {\\n        emit SlippageFeeVoteUpdate(account, newSlippageFee, isDefault, newBalance);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from == to) {\\n            // ignore transfers to self\\n            return;\\n        }\\n\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance = mooniswapFactoryGovernance;\\n        bool updateFrom = !(from == address(0) || _mooniswapFactoryGovernance.isFeeCollector(from));\\n        bool updateTo = !(to == address(0) || _mooniswapFactoryGovernance.isFeeCollector(to));\\n\\n        if (!updateFrom && !updateTo) {\\n            // mint to feeReceiver or burn from feeReceiver\\n            return;\\n        }\\n\\n        uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\n        uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\n        uint256 newTotalSupply = totalSupply()\\n            .add(from == address(0) ? amount : 0)\\n            .sub(to == address(0) ? amount : 0);\\n\\n        ParamsHelper memory params = ParamsHelper({\\n            from: from,\\n            to: to,\\n            updateFrom: updateFrom,\\n            updateTo: updateTo,\\n            amount: amount,\\n            balanceFrom: balanceFrom,\\n            balanceTo: balanceTo,\\n            newTotalSupply: newTotalSupply\\n        });\\n\\n        (uint256 defaultFee, uint256 defaultSlippageFee) = _mooniswapFactoryGovernance.defaults();\\n\\n        _updateOnTransfer(params, defaultFee, _emitFeeVoteUpdate, _fee);\\n        _updateOnTransfer(params, defaultSlippageFee, _emitSlippageFeeVoteUpdate, _slippageFee);\\n    }\\n\\n    struct ParamsHelper {\\n        address from;\\n        address to;\\n        bool updateFrom;\\n        bool updateTo;\\n        uint256 amount;\\n        uint256 balanceFrom;\\n        uint256 balanceTo;\\n        uint256 newTotalSupply;\\n    }\\n\\n    function _updateOnTransfer(\\n        ParamsHelper memory params,\\n        uint256 defaultValue,\\n        function(address, uint256, bool, uint256) internal emitEvent,\\n        LiquidVoting.Data storage votingData\\n    ) private {\\n        Vote.Data memory voteFrom = votingData.votes[params.from];\\n        Vote.Data memory voteTo = votingData.votes[params.to];\\n\\n        if (voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\n            emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\n            emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\n            return;\\n        }\\n\\n        if (params.updateFrom) {\\n            votingData.updateBalance(params.from, voteFrom, params.balanceFrom, params.balanceFrom.sub(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n\\n        if (params.updateTo) {\\n            votingData.updateBalance(params.to, voteTo, params.balanceTo, params.balanceTo.add(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e98c2ffa477cda46840e2a71dbfc8e1b718c5c01490a3684730007b3d7cad49\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IFeeCollector {\\n    function updateReward(address receiver, uint256 amount) external;\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x32a215750177362f8077d6e4cf48ae508e0b6565f20f8eaa4b130260bf238555\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactoryGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IMooniswapFactoryGovernance {\\n    function shareParameters() external view returns(uint256 referralShare, uint256 governanceShare, address governanceWallet, address referralFeeReceiver);\\n    function defaults() external view returns(uint256 defaultFee, uint256 defaultSlippageFee);\\n\\n    function defaultFee() external view returns(uint256);\\n    function defaultSlippageFee() external view returns(uint256);\\n\\n    function virtualDefaultFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultSlippageFee() external view returns(uint104, uint104, uint48);\\n\\n    function referralShare() external view returns(uint256);\\n    function governanceShare() external view returns(uint256);\\n    function governanceWallet() external view returns(address);\\n    function feeCollector() external view returns(address);\\n\\n    function isFeeCollector(address) external view returns(bool);\\n    function isActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6ca0e9c05419b5fe05ea3e46246079c2392f6269ca54d33ba05518547c0069a\",\"license\":\"MIT\"},\"contracts/libraries/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary LiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _defaultVotes;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 totalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldDefaultVotes = self._defaultVotes;\\n        uint256 newDefaultVotes = oldDefaultVotes;\\n\\n        if (oldVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.sub(oldBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n        }\\n\\n        if (newVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.add(newBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newDefaultVotes != oldDefaultVotes) {\\n            self._defaultVotes = newDefaultVotes;\\n        }\\n\\n        {\\n            uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).div(newTotalSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x0300c61b4bba9a58097ec0a843d04b42260f705dbc68bf3bbcc9e9011ffdfd7a\",\"license\":\"MIT\"},\"contracts/libraries/MooniswapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary MooniswapConstants {\\n    uint256 internal constant _FEE_DENOMINATOR = 1e18;\\n\\n    uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\n    uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\n\\n    uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\n    uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\n\\n    uint256 internal constant _DEFAULT_FEE = 0;\\n    uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\n    uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\n}\\n\",\"keccak256\":\"0x9f6421e5cf8734fbf5670148f3d6030b69aaeba473933f9a07fd3766fdaf1733\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary SafeCast {\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n}\\n\",\"keccak256\":\"0x6f5e3e3d0bc762c2defe32c7bc62309cd7e60776bb5dc0d059a1bcf0874b4c51\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: non-zero to non-zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: operation failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4cc1b6b3b02d033719e1261afde66c209064899827c63a92faa50d9238c301b4\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary Sqrt {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256) {\\n        if (y > 3) {\\n            uint256 z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n            return z;\\n        } else if (y != 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5674ed7d1bb3655d9d6698ff6175cb23261d8cf837915d0af70404aa019b5267\",\"license\":\"MIT\"},\"contracts/libraries/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./MooniswapConstants.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n\\nlibrary VirtualBalance {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    struct Data {\\n        uint216 balance;\\n        uint40 time;\\n    }\\n\\n    function set(VirtualBalance.Data storage self, uint256 balance) internal {\\n        (self.balance, self.time) = (\\n            balance.toUint216(),\\n            block.timestamp.toUint40()\\n        );\\n    }\\n\\n    function update(VirtualBalance.Data storage self, uint256 realBalance) internal {\\n        set(self, current(self, realBalance));\\n    }\\n\\n    function scale(VirtualBalance.Data storage self, uint256 realBalance, uint256 num, uint256 denom) internal {\\n        set(self, current(self, realBalance).mul(num).add(denom.sub(1)).div(denom));\\n    }\\n\\n    function current(VirtualBalance.Data memory self, uint256 realBalance) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(MooniswapConstants._DEFAULT_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = MooniswapConstants._DEFAULT_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.balance).mul(timeRemain).add(\\n            realBalance.mul(timePassed)\\n        ).div(MooniswapConstants._DEFAULT_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0x4b76426258b1819ccc958c06ab7ec3d6375b594ee9a8f86e4b01949b71e3aa26\",\"license\":\"MIT\"},\"contracts/libraries/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary VirtualVote {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\n\\n    struct Data {\\n        uint104 oldResult;\\n        uint104 result;\\n        uint48 time;\\n    }\\n\\n    function current(VirtualVote.Data memory self) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.oldResult).mul(timeRemain).add(\\n            uint256(self.result).mul(timePassed)\\n        ).div(_VOTE_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0xd62c910eb9b206eb6c2230be6c964824693fbe52436e53c3e69f02a84aa7c63d\",\"license\":\"MIT\"},\"contracts/libraries/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nlibrary Vote {\\n    struct Data {\\n        uint256 value;\\n    }\\n\\n    function eq(Vote.Data memory self, Vote.Data memory vote) internal pure returns(bool) {\\n        return self.value == vote.value;\\n    }\\n\\n    function init() internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: 0\\n        });\\n    }\\n\\n    function init(uint256 vote) internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: vote + 1\\n        });\\n    }\\n\\n    function isDefault(Data memory self) internal pure returns(bool) {\\n        return self.value == 0;\\n    }\\n\\n    function get(Data memory self, uint256 defaultVote) internal pure returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVote;\\n    }\\n\\n    function get(Data memory self, function() external view returns(uint256) defaultVoteFn) internal view returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVoteFn();\\n    }\\n}\\n\",\"keccak256\":\"0xa31a88aebf9a52ea8c02e611cd798631e7296b78e9ecdf37d2b0c7eb2badb252\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001c576000806200001962000363565b50505b506040516200596a3803806200596a833981810160405260408110156200004d576000806200004a62000363565b50505b810190808051604051939291908464010000000082111562000079576000806200007662000363565b50505b9083019060208201858111156200009a576000806200009762000363565b50505b8251640100000000811182820188101715620000c057600080620000bd62000363565b50505b825250602001908051906020019080838360005b83811015620000ee578082015183820152602001620000d4565b50505050905090810190601f1680156200011c5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200014b576000806200014862000363565b50505b9083019060208201858111156200016c576000806200016962000363565b50505b825164010000000081118282018810171562000192576000806200018f62000363565b50505b825250602001908051906020019080838360005b83811015620001c0578082015183820152602001620001a6565b50505050905090810190601f168015620001ee5780820380516001836020036101000a031916815260200191505b5060405250505081818160039080516200020d929160200190620003d0565b50600481805162000223929160200190620003d0565b5060126005600181620002356200047f565b8160ff021916908360ff160217906200024d620004e1565b50505050506000620002646200035160201b60201c565b905080600561010081620002776200047f565b816001600160a01b0302191690836001600160a01b03160217906200029b620004e1565b5050506001600160a01b03811660007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506001806006620002e6620004e1565b505050600082511162000303576000806200030062000363565b50505b60008151116200031d576000806200031a62000363565b50505b601582805162000332929160200190620003d0565b50601681805162000348929160200190620003d0565b5050506200059a565b60005a6200035e62000530565b905090565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156200039d57808601518282016040015260200162000380565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b8280620003dc6200047f565b600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200042757805160ff191683800117856200041f620004e1565b50506200046d565b8280016001018562000438620004e1565b505082156200046d579182015b828111156200046d578251826200045b620004e1565b50509160200191906001019062000445565b506200047b92915062000577565b5090565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015620004dc57600082820152602001620004c3565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020620004c3565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020620004c3565b808211156200047b57600080826200058e620004e1565b50505060010162000577565b6153c080620005aa6000396000f3fe608060405234801561001957600080610016614ded565b50505b50600436106101f75760003560e01c806306fdde031461020557806307a8007014610284578063095ea7b3146102ac5780630dfe1681146102f557806311212d661461031957806318160ddd1461033f5780631e1401f81461035957806323b872dd1461039857806323e8cae1146103d75780633049105d1461041d578063313ce567146104e75780633732b39414610505578063395093511461050d5780633c6216a6146105425780634f64b2be146106515780635915d806146106775780635ed9156d146107435780636669302a1461079b5780636edc2c09146107a357806370a08231146107d2578063715018a6146108015780638d32df32146108095780638da5cb5b1461099357806393028d831461099b57806395cad3c7146109a357806395d89b41146109d25780639aad141b146109da5780639ea5ce0a14610a09578063a457c2d714610a9d578063a9059cbb14610ad2578063aa6ca80814610b07578063c40d4d6614610b4a578063d21220a714610b79578063d5bcb9b514610b81578063d7d3aab514610bce578063d9a0c21714610bfd578063dd62ed3e14610c05578063ddca3f4314610c3c578063e331d03914610c44578063e7ff42c914610c97578063f1ea604214610cc6578063f2fde38b14610cce575b600080610202614ded565b50505b61020d610cfd565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610249578082015183820152602001610231565b50505050905090810190601f1680156102765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102aa600480360360208110156102a3576000806102a0614ded565b50505b5035610dba565b005b6102e1600480360360408110156102cb576000806102c8614ded565b50505b506001600160a01b038135169060200135610f15565b604051901515815260200160405180910390f35b6102fd610f33565b6040516001600160a01b03909116815260200160405180910390f35b6102aa6004803603602081101561033857600080610335614ded565b50505b5035610f52565b6103476110a4565b60405190815260200160405180910390f35b6103476004803603606081101561037857600080610375614ded565b50505b506001600160a01b038135811691602081013590911690604001356110b5565b6102e1600480360360608110156103b7576000806103b4614ded565b50505b506001600160a01b038135811691602081013590911690604001356110ee565b6103df611182565b60405180846001600160681b03168152602001836001600160681b031681526020018265ffffffffffff168152602001935050505060405180910390f35b6104a86004803603608081101561043c57600080610439614ded565b50505b81019080806040019060028060200260405190810160405280929190826002602002808284376000920191909152509194939260408082019350909150600290805190810160405280929190826002602002808284376000920191909152509194506111e79350505050565b6040518281526020810182604080838360005b838110156104d35780820151838201526020016104bb565b505050509050019250505060405180910390f35b6104ef61120f565b60405160ff909116815260200160405180910390f35b61034761122b565b6102e16004803603604081101561052c57600080610529614ded565b50505b506001600160a01b0381351690602001356112a6565b610619600480360360608110156105615760008061055e614ded565b50505b81359190810190604081016020820135600160201b81111561058b57600080610588614ded565b50505b8201836020820111156105a6576000806105a3614ded565b50505b803590602001918460208302840111600160201b831117156105d0576000806105cd614ded565b50505b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b0316915061130b9050565b6040518082604080838360005b8381101561063e578082015183820152602001610626565b5050505090500191505060405180910390f35b6102fd600480360360208110156106705760008061066d614ded565b50505b503561164b565b6106196004803603604081101561069657600080610693614ded565b50505b81359190810190604081016020820135600160201b8111156106c0576000806106bd614ded565b50505b8201836020820111156106db576000806106d8614ded565b50505b803590602001918460208302840111600160201b8311171561070557600080610702614ded565b50505b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061169d945050505050565b610772600480360360208110156107625760008061075f614ded565b50505b50356001600160a01b03166116b8565b6040516001600160d81b03909216825264ffffffffff1660208201526040908101905180910390f35b6102aa611704565b610772600480360360208110156107c2576000806107bf614ded565b50505b50356001600160a01b031661175f565b610347600480360360208110156107f1576000806107ee614ded565b50505b50356001600160a01b031661177a565b6102aa61179a565b6102aa600480360360a081101561082857600080610825614ded565b50505b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561086457600080610861614ded565b50505b82018360208201111561087f5760008061087c614ded565b50505b803590602001918460018302840111600160201b831117156108a9576000806108a6614ded565b50505b91908080601f01602080910402602001604051908101604052818152929190602084018383808284376000920191909152509295949360208101935035915050600160201b81111561090357600080610900614ded565b50505b82018360208201111561091e5760008061091b614ded565b50505b803590602001918460018302840111600160201b8311171561094857600080610945614ded565b50505b91908080601f0160208091040260200160405190810160405281815292919060208401838380828437600092019190915250929550505090356001600160a01b031691506118479050565b6102fd611940565b6102aa611962565b610347600480360360208110156109c2576000806109bf614ded565b50505b50356001600160a01b03166119bb565b61020d611a15565b610347600480360360208110156109f9576000806109f6614ded565b50505b50356001600160a01b0316611abb565b6104a8600480360360a0811015610a2857600080610a25614ded565b50505b81019080806040019060028060200260405190810160405280929190826002602002808284376000920191909152509194939260408082019350909150600290805190810160405280929190826002602002808284376000920191909152509194505050356001600160a01b03169050611b0b565b6102e160048036036040811015610abc57600080610ab9614ded565b50505b506001600160a01b0381351690602001356122ca565b6102e160048036036040811015610af157600080610aee614ded565b50505b506001600160a01b038135169060200135612340565b610b0f612354565b6040516020808252819081018381815181526020019150805160209182019102808383600083156104d35780820151838201526020016104bb565b6102aa60048036036020811015610b6957600080610b66614ded565b50505b50356001600160a01b0316612411565b6102fd61261d565b610347600480360360a0811015610ba057600080610b9d614ded565b50505b506001600160a01b038135811691602081013582169160408201359160608101359160809091013516612629565b61034760048036036020811015610bed57600080610bea614ded565b50505b50356001600160a01b031661264b565b6102fd6127d3565b61034760048036036040811015610c2457600080610c21614ded565b50505b506001600160a01b03813581169160200135166127df565b610347612818565b610347600480360360c0811015610c6357600080610c60614ded565b50505b506001600160a01b0381358116916020810135821691604082013591606081013591608082013581169160a0013516612836565b61034760048036036020811015610cb657600080610cb3614ded565b50505b50356001600160a01b0316612c67565b6103df612db4565b6102aa60048036036020811015610ced57600080610cea614ded565b50505b50356001600160a01b0316612dff565b6060601580610d0a614e58565b600181600116156101000203166002900480601f016020809104026020016040519081016040528181529190602083018280610d44614e58565b60018160011615610100020316600290048015610db05780601f10610d7e576101008083610d70614e58565b040283529160200191610db0565b820191906000526020600020905b81610d95614e58565b81529060010190602001808311610d8c57829003601f168201915b5050505050905090565b670de0b6b3a7640000811115610dd857600080610dd5614ded565b50505b610f125a610de4614eb3565b600f60005a610df1614eb3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181610e26614e58565b905250610e3284612ed0565b610e435a610e3e614eb3565b61177a565b610e4b6110a4565b60006007610e57614e58565b906101000a90046001600160a01b03166001600160a01b03166323662bb96040518163ffffffff1660e01b81526004016020604051808303818680610e9a614ef9565b158015610eaf57600080610eac614ded565b50505b505a610eb9614f45565b5050505050158015610ed8573d6000803e3d6000610ed5614ded565b50505b505050506040513d6020811015610ef757600080610ef4614ded565b50505b810190808051600c989796959493509150612eee9050612f45565b50565b6000610f29610f22612f60565b8484612f6b565b5060015b92915050565b60006011610f3f614e58565b906101000a90046001600160a01b031681565b662386f26fc10000811115610f6f57600080610f6c614ded565b50505b610f125a610f7b614eb3565b600b60005a610f88614eb3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181610fbd614e58565b905250610fc984612ed0565b610fd55a610e3e614eb3565b610fdd6110a4565b60006007610fe9614e58565b906101000a90046001600160a01b03166001600160a01b0316635a6c72d06040518163ffffffff1660e01b8152600401602060405180830381868061102c614ef9565b1580156110415760008061103e614ded565b50505b505a61104b614f45565b505050505015801561106a573d6000803e3d6000611067614ded565b50505b505050506040513d602081101561108957600080611086614ded565b50505b810190808051600898979695949350915061302f9050612f45565b600060026110b0614e58565b905090565b60006110e48484846110c68861264b565b6110cf88612c67565b6110d7612818565b6110df61122b565b613086565b90505b9392505050565b60006110fb8484846131c3565b61117884611107612f60565b6111738560405160608101604052602880825261533360208301396001600160a01b038a1660009081526001602052604090206000611144612f60565b6001600160a01b03166001600160a01b0316815260200190815260200160002061116c614e58565b91906132eb565b612f6b565b5060019392505050565b6000808080600c611191614e58565b6001600160681b036101009290920a900416600d600c6111af614e58565b6001600160681b036101009290920a900416601a600c6111cd614e58565b906101000a900465ffffffffffff16925092509250909192565b60006111f1615030565b61120484845a6111ff614eb3565b611b0b565b915091509250929050565b600080600561121c614e58565b906101000a900460ff16905090565b60006110b0600c604051606081016040529081600082611249614e58565b6001600160681b036101009290920a9004168152602001600d8261126b614e58565b6001600160681b036101009290920a9004168152602001601a8261128d614e58565b65ffffffffffff6101009290920a90041690525061330a565b6000610f296112b3612f60565b8461117385600160006112c4612f60565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038916600090815260209190915260409020611305614e58565b9061337f565b611313615030565b6002600661131f614e58565b141561133357600080611330614ded565b50505b600280600661134061504b565b50505061134b615030565b60405180604001604052806011600090611363614e58565b6001600160a01b036101009290920a900416815260200160006012611386614e58565b6001600160a01b036101009290920a9004169052905060006113a66110a4565b90506113ba5a6113b4614eb3565b876133a0565b60005b60028110156115c85760008382600281106113d457fe5b602002015190506000816001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156114425760008282015260200161142b565b5050506040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381868061147f614ef9565b15801561149457600080611491614ded565b50505b505a61149e614f45565b50505050501580156114bd573d6000803e3d60006114ba614ded565b50505b505050506040513d60208110156114dc576000806114d9614ded565b50505b81019080805193506000925061150091508690506114fa848d613476565b906134a3565b90506115166001600160a01b03841689836134cb565b8087856002811061152357fe5b602002015288518410158061154b575088848151811061153f57fe5b60200260200101518110155b61155d5760008061155a614ded565b50505b61158d8261156b878d613527565b6001600160a01b03861660009081526013602052889060409020929190613545565b6115bd8261159b878d613527565b6001600160a01b03861660009081526014602052889060409020929190613545565b5050506001016113bd565b50836001600160a01b03165a6115dc614eb3565b6001600160a01b03167f3cae9923fd3c2f468aa25a8ef687923e37f957459557c0380fd06526c0b8cdbc888651602088015160405180848152602001838152602001828152602001935050505060405180910390a3505060016006819061164161504b565b5050509392505050565b600081611675576000601161165e614e58565b906101000a90046001600160a01b03169050611698565b816001141561168a576000601261165e614e58565b600080611695614ded565b50505b919050565b6116a5615030565b6110e783835a6116b3614eb3565b61130b565b601460205280600052604060002090506000816116d3614e58565b6001600160d81b036101009290920a90041690601b816116f1614e58565b906101000a900464ffffffffff16905082565b61175d5a611710614eb3565b600f60005a61171d614eb3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181611752614e58565b905250610e326135c0565b565b601360205280600052604060002090506000816116d3614e58565b6001600160a01b0381166000908152602081905260408120610f2d614e58565b6117a2612f60565b6001600160a01b03166117b3611940565b6001600160a01b0316146117cf576000806117cc614ded565b50505b6000600160056117dd614e58565b906101000a90046001600160a01b03166001600160a01b031660008051602061535b83398151915260405160405180910390a36000600561010081611820614e58565b816001600160a01b0302191690836001600160a01b031602179061184261504b565b505050565b600083511161185e5760008061185b614ded565b50505b600082511161187557600080611872614ded565b50505b836001600160a01b0316856001600160a01b0316141561189d5760008061189a614ded565b50505b8460116001816118ab614e58565b816001600160a01b0302191690836001600160a01b03160217906118cd61504b565b50505083601260006101000a816118e2614e58565b816001600160a01b0302191690836001600160a01b031602179061190461504b565b50505082601590805161191b929160200190615099565b50601682805161192f929160200190615099565b50611939816135db565b5050505050565b600080601061194d614e58565b906101000a90046001600160a01b0316905090565b61175d5a61196e614eb3565b600b60005a61197b614eb3565b6001600160a01b03166001600160a01b03168152602001908152602001600020604051602081016040529081816119b0614e58565b905250610fc96135c0565b6000610f2d8160076119cb614e58565b6001600160a01b038581166000908152600f6020526101009390930a90910416906323662bb9906040902060405160208101604052908181611a0b614e58565b90525091906137df565b6060601680611a22614e58565b600181600116156101000203166002900480601f016020809104026020016040519081016040528181529190602083018280611a5c614e58565b60018160011615610100020316600290048015610db05780601f10611a88576101008083610d70614e58565b820191906000526020600020905b81611a9f614e58565b81529060010190602001808311611a9657509395945050505050565b6000610f2d816007611acb614e58565b6001600160a01b038581166000908152600b6020526101009390930a9091041690635a6c72d0906040902060405160208101604052908181611a0b614e58565b6000611b15615030565b60026006611b21614e58565b1415611b3557600080611b32614ded565b50505b6002806006611b4261504b565b505050611b4d615030565b60405180604001604052806011600090611b65614e58565b6001600160a01b036101009290920a900416815260200160006012611b88614e58565b6001600160a01b036101009290920a900416905290506000611ba86110a4565b905080611d6e57611bbc6103e86063613476565b9350611c225a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015611c1757600082820152602001611c00565b5050506103e861388b565b60005b6002811015611d6857611c4885898360028110611c3e57fe5b602002015161394b565b94506000888260028110611c5857fe5b602002015111611c7057600080611c6d614ded565b50505b868160028110611c7c57fe5b6020020151888260028110611c8d57fe5b60200201511015611ca657600080611ca3614ded565b50505b611d3e5a611cb2614eb3565b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015611d0857600082820152602001611cf1565b5050508a8460028110611d1757fe5b6020020151868560028110611d2857fe5b60200201516001600160a01b0316929190613962565b878160028110611d4a57fe5b6020020151848260028110611d5b57fe5b6020020152600101611c25565b50612227565b611d76615030565b60005b6002811015611eb657838160028110611d8e57fe5b60200201516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015611df757600082820152602001611de0565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611e34614ef9565b158015611e4957600080611e46614ded565b50505b505a611e53614f45565b5050505050158015611e72573d6000803e3d6000611e6f614ded565b50505b505050506040513d6020811015611e9157600080611e8e614ded565b50505b810190808051925084915083905060028110611ea957fe5b6020020152600101611d79565b50600019945060005b6002811015611f0a57611f0086611efb848460028110611edb57fe5b60200201516114fa8d8660028110611eef57fe5b60200201518890613476565b6139cb565b9550600101611ebf565b508460005b60028110156121835760008a8260028110611f2657fe5b602002015111611f3e57600080611f3b614ded565b50505b6000611f66856114fa6001880361130587898860028110611f5b57fe5b602002015190613476565b9050898260028110611f7457fe5b6020020151811015611f8e57600080611f8b614ded565b50505b6120005a611f9a614eb3565b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015611ff057600082820152602001611fd9565b50505083898660028110611d2857fe5b61213484836002811061200f57fe5b602002015187846002811061202057fe5b60200201516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561208957600082820152602001612072565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806120c6614ef9565b1580156120db576000806120d8614ded565b50505b505a6120e5614f45565b5050505050158015612104573d6000803e3d6000612101614ded565b50505b505050506040513d602081101561212357600080612120614ded565b50505b810190808051939250506135279050565b87836002811061214057fe5b602002015261217888611efb86856002811061215857fe5b60200201516114fa8b876002811061216c57fe5b60200201518a90613476565b975050600101611f0f565b5060005b6002811015612223576121ec83826002811061219f57fe5b60200201516121ae868a61337f565b86601460008a87600281106121bf57fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020929190613545565b61221b8382600281106121fb57fe5b602002015161220a868a61337f565b86601360008a87600281106121bf57fe5b600101612187565b5050505b6000841161223d5760008061223a614ded565b50505b612247858561388b565b846001600160a01b03165a61225a614eb3565b6001600160a01b03167f8bab6aed5a508937051a144e61d6e61336834a66aaee250a00613ae6f744c422868651602088015160405180848152602001838152602001828152602001935050505060405180910390a350506001600681906122bf61504b565b505050935093915050565b6000610f296122d7612f60565b846111738560405160608101604052602580825261539b6020830139600160006122ff612f60565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038a1660009081526020919091526040902061116c614e58565b6000610f2961234d612f60565b84846131c3565b60606002604051908082528060200260200182016040528015612381578160200160208202803683370190505b50905060006011612390614e58565b906101000a90046001600160a01b0316816000815181106123ad57fe5b6001600160a01b0390921660209283029190910190910152600060126123d1614e58565b906101000a90046001600160a01b0316816001815181106123ee57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505090565b612419612f60565b6001600160a01b031661242a611940565b6001600160a01b03161461244657600080612443614ded565b50505b806007600181612454614e58565b816001600160a01b0302191690836001600160a01b031602179061247661504b565b5050505a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156124cf576000828201526020016124b8565b5050506001600160a01b03166393028d836040518163ffffffff1660e01b815260040160006040518083038160008780612507614ef9565b15801561251c57600080612519614ded565b50505b505a612526615135565b505050505050158015612546573d6000803e3d6000612543614ded565b50505b505050505a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156125a057600082820152602001612589565b5050506001600160a01b0316636669302a6040518163ffffffff1660e01b8152600401600060405180830381600087806125d8614ef9565b1580156125ed576000806125ea614ded565b50505b505a6125f7615135565b505050505050158015611939573d6000803e3d6000612614614ded565b50505050505050565b60006012610f3f614e58565b600061264186868686865a61263c614eb3565b612836565b9695505050505050565b600080826001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156126b35760008282015260200161269c565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806126f0614ef9565b15801561270557600080612702614ded565b50505b505a61270f614f45565b505050505015801561272e573d6000803e3d600061272b614ded565b50505b505050506040513d602081101561274d5760008061274a614ded565b50505b8101908080516001600160a01b038716600090815260136020529094506110e793506127cd925084915060409020604051604080820190529081600082612792614e58565b6001600160d81b036101009290920a9004168152602001601b826127b4614e58565b64ffffffffff6101009290920a900416905250906139da565b8261394b565b60006007610f3f614e58565b6001600160a01b03821660009081526001602052604081206001600160a01b0383166000908152602091909152604090206110e7614e58565b60006110b06008604051606081016040529081600082611249614e58565b600060026006612844614e58565b141561285857600080612855614ded565b50505b600280600661286561504b565b5050506007600090612875614e58565b906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186806128b8614ef9565b1580156128cd576000806128ca614ded565b50505b505a6128d7614f45565b50505050501580156128f6573d6000803e3d60006128f3614ded565b50505b505050506040513d602081101561291557600080612912614ded565b50505b81019080805192506129329150505760008061292f614ded565b50505b61293a6151fb565b6040518060400160405280896001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156129aa57600082820152602001612993565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806129e7614ef9565b1580156129fc576000806129f9614ded565b50505b505a612a06614f45565b5050505050158015612a25573d6000803e3d6000612a22614ded565b50505b505050506040513d6020811015612a4457600080612a41614ded565b50505b81019080805184525050506020016001600160a01b0389166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015612ab757600082820152602001612aa0565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680612af4614ef9565b158015612b0957600080612b06614ded565b50505b505a612b13614f45565b5050505050158015612b32573d6000803e3d6000612b2f614ded565b50505b505050506040513d6020811015612b5157600080612b4e614ded565b50505b8101908080519093525091925060009150612b6c90506151fb565b612b746151fb565b6040518060400160405280612b87612818565b8152602001612b9461122b565b90529050612ba78b8b8b8b8a8987613a3b565b90965090935091506001600160a01b03808c169087165a612bc6614eb3565b6001600160a01b03167fbd99c6719f088aa0abd9e7b7a4a635d1f931601e9f304b538dc42be25d8c65c68d878a885189602001518f6040516001600160a01b03968716815260208101959095526040808601949094526060850192909252608084015290921660a082015260c001905180910390a4612c488386898785613ccc565b50505050600160068190612c5a61504b565b5050509695505050505050565b600080826001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015612ccf57600082820152602001612cb8565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680612d0c614ef9565b158015612d2157600080612d1e614ded565b50505b505a612d2b614f45565b5050505050158015612d4a573d6000803e3d6000612d47614ded565b50505b505050506040513d6020811015612d6957600080612d66614ded565b50505b8101908080516001600160a01b038716600090815260146020529094506110e79350612dae925084915060409020604051604080820190529081600082612792614e58565b826139cb565b60008080806008612dc3614e58565b6001600160681b036101009290920a900416600d6008612de1614e58565b6001600160681b036101009290920a900416601a60086111cd614e58565b612e07612f60565b6001600160a01b0316612e18611940565b6001600160a01b031614612e3457600080612e31614ded565b50505b6001600160a01b038116612e5057600080612e4d614ded565b50505b6001600160a01b03811660016005612e66614e58565b906101000a90046001600160a01b03166001600160a01b031660008051602061535b83398151915260405160405180910390a380600561010081612ea8614e58565b816001600160a01b0302191690836001600160a01b0316021790612eca61504b565b50505050565b612ed8615212565b6040516020810160405260019290920182525090565b836001600160a01b03167fce0cf859d853e1944032294143a1bf3ad799998ae77acbeb6c4d9b20d691024084848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b612f5688888888888989898961422e565b5050505050505050565b60005a6110b0614eb3565b6001600160a01b038316612f8757600080612f84614ded565b50505b6001600160a01b038216612fa357600080612fa0614ded565b50505b6001600160a01b038316600090815260016020528190604090206001600160a01b0384166000908152602091909152604090208190612fe061504b565b505050816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405190815260200160405180910390a3505050565b836001600160a01b03167fe117cae46817b894b41a4412b73ae0ba746a5707b94e02d83b4c6502010b11ac84848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b6000866001600160a01b0316886001600160a01b031611156130a6579596955b6000861180156130e25750600060116130bd614e58565b906101000a90046001600160a01b03166001600160a01b0316886001600160a01b0316145b801561311a5750600060126130f5614e58565b906101000a90046001600160a01b03166001600160a01b0316876001600160a01b0316145b156131b857600061314161313a670de0b6b3a76400006114fa8a88613476565b8890613527565b9050600061314f878361337f565b90506000613161826114fa858a613476565b9050600061318a6131728786613476565b613184670de0b6b3a764000086613476565b90613527565b905060006131a0670de0b6b3a764000085613476565b90506131b0816114fa8585613476565b955050505050505b979650505050505050565b6001600160a01b0383166131df576000806131dc614ded565b50505b6001600160a01b0382166131fb576000806131f8614ded565b50505b6132068383836144fa565b6132418160405160608101604052602680825261530d60208301396001600160a01b038616600090815260208190526040902061116c614e58565b6001600160a01b0384166000908152602081905260409020819061326361504b565b5050506001600160a01b0382166000908152602081905261328c90829060409020611305614e58565b6001600160a01b038316600090815260208190526040902081906132ae61504b565b505050816001600160a01b0316836001600160a01b031660008051602061537b8339815191528360405190815260200160405180910390a3505050565b60008383111561330357600080613300614ded565b50505b5050900390565b60008061332d62015180611efb856040015165ffffffffffff165a613184615223565b9050600061333e6201518083613527565b9050613377620151806114fa6133628588602001516001600160681b031690613476565b6113058589516001600160681b031690613476565b949350505050565b6000828201838110156110e757600080613397614ded565b50509392505050565b6001600160a01b0382166133bc576000806133b9614ded565b50505b6133c8826000836144fa565b613403816040516060810160405260228082526152eb60208301396001600160a01b038516600090815260208190526040902061116c614e58565b6001600160a01b0383166000908152602081905260409020819061342561504b565b505050613436816002613184614e58565b80600261344161504b565b5060009150506001600160a01b03831660008051602061537b8339815191528360405190815260200160405180910390a35050565b60008261348557506000610f2d565b8282028284828161349257fe5b04146110e757600080613397614ded565b60008082116134ba576000806134b7614ded565b50505b8183816134c357fe5b049392505050565b6118428363a9059cbb60e01b84846040516001600160a01b0390921660248301526044820152606401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b031690911790526148a4565b60008282111561353f5760008061353c614ded565b50505b50900390565b612eca846135bb836114fa61355b826001613527565b611305886135b58c60405160408082019052908160008261357a614e58565b6001600160d81b036101009290920a9004168152602001601b8261359c614e58565b64ffffffffff6101009290920a9004169052508c6139da565b90613476565b614932565b6135c8615212565b6040516020810160405260008152905090565b601460106135e7614e58565b906101000a900460ff161561360457600080613601614ded565b50505b806007600181613612614e58565b816001600160a01b0302191690836001600160a01b031602179061363461504b565b5050506136db816001600160a01b0316635a6c72d06040518163ffffffff1660e01b8152600401602060405180830381868061366e614ef9565b15801561368357600080613680614ded565b50505b505a61368d614f45565b50505050501580156136ac573d6000803e3d60006136a9614ded565b50505b505050506040513d60208110156136cb576000806136c8614ded565b50505b81019080805192506149b2915050565b6008600160681b816136eb614e58565b816001600160681b0302191690836001600160681b031602179061370d61504b565b505050613747816001600160a01b03166323662bb96040518163ffffffff1660e01b8152600401602060405180830381868061366e614ef9565b600c600160681b81613757614e58565b816001600160681b0302191690836001600160681b031602179061377961504b565b5050505a613785614eb3565b6010600181613792614e58565b816001600160a01b0302191690836001600160a01b03160217906137b461504b565b5050506001601060146101000a816137ca614e58565b8160ff02191690831515021790612eca61504b565b600080845111156137f657600184510390506110e7565b82826040518163ffffffff1660e01b8152600401602060405180830381868061381d614ef9565b1580156138325760008061382f614ded565b50505b505a61383c614f45565b505050505015801561385b573d6000803e3d6000613858614ded565b50505b505050506040513d602081101561387a57600080613877614ded565b50505b810190808051979650505050505050565b6001600160a01b0382166138a7576000806138a4614ded565b50505b6138b3600083836144fa565b6138c1816002611305614e58565b8060026138cc61504b565b5050506001600160a01b038216600090815260208190526138f590829060409020611305614e58565b6001600160a01b0383166000908152602081905260409020819061391761504b565b5050506001600160a01b038216600060008051602061537b8339815191528360405190815260200160405180910390a35050565b60008183101561395b57816110e7565b5090919050565b612eca846323b872dd60e01b8585856040516001600160a01b0393841660248201529190921660448201526064810191909152608401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b031690911790526148a4565b600081831061395b57816110e7565b6000806139fa603c611efb866020015164ffffffffff165a613184615223565b90506000613a09603c83613527565b9050613a32603c6114fa613a1d8786613476565b611305858a516001600160d81b031690613476565b95945050505050565b600080613a466151fb565b613a7a85516001600160a01b038c166000908152601360205260409020604051604080820190529081600082612792614e58565b8152613a888151865161394b565b8152613ac160208601516001600160a01b038b166000908152601460205260409020604051604080820190529081600082612792614e58565b60208201908152613ad7905186602001516139cb565b6020820152613b535a613ae8614eb3565b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015613b3e57600082820152602001613b27565b5050506001600160a01b038d1691908b613962565b613bae85518b6001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825292506020612072565b9250613bc98a8a858451856020015189518a60200151613086565b9150600082118015613bdb5750868210155b613bed57600080613bea614ded565b50505b613c016001600160a01b038a1687846134cb565b8451815114613c3757613c37613c198483519061337f565b6001600160a01b038c16600090815260136020526040902090614932565b8460200151816020015114613c7657613c76613c5883836020015190613527565b6001600160a01b038b16600090815260146020526040902090614932565b613c9985516001600160a01b038c166000908152601460205260409020906149d1565b613cbf85602001516001600160a01b038b166000908152601360205260409020906149d1565b9750975097945050505050565b6000808080806007613cdc614e58565b906101000a90046001600160a01b03166001600160a01b031663172886e76040518163ffffffff1660e01b81526004016080604051808303818680613d1f614ef9565b158015613d3457600080613d31614ded565b50505b505a613d3e614f45565b5050505050158015613d5d573d6000803e3d6000613d5a614ded565b50505b505050506040513d6080811015613d7c57600080613d79614ded565b50505b810190808051929190602001805192919060200180519291906020018051959950939750919550929350600092508291506a0c097ce7bc90715b34b9f160241b9050613dd989516114fa613dd28f8d519061337f565b8490613476565b9050613df589602001516114fa613dd28e8d6020015190613527565b90506a0c097ce7bc90715b34b9f160241b8111156141b757613e1681614a2f565b90506000613e3b826114fa613e3382670de0b6b3a7640000613527565b6135b56110a4565b90506001600160a01b038b16613e52576000613e68565b613e68670de0b6b3a76400006114fa838b613476565b93506001600160a01b038616613e7f576000613e95565b613e95670de0b6b3a76400006114fa838a613476565b92506001600160a01b038516613eca578315613eb557613eb58b8561388b565b8215613ec557613ec5868461388b565b6141b5565b6000841180613ed95750600083115b156141b5576000808411613eee576000613ef1565b60015b60008611613f00576000613f03565b60015b0160ff1690506060816001600160401b0381118015613f2a57600080613f27614ded565b50505b50604051908082528060200260200182016040528015613f54578160200160208202803683370190505b5090506060826001600160401b0381118015613f7857600080613f75614ded565b50505b50604051908082528060200260200182016040528015613fa2578160200160208202803683370190505b5090508d82600081518110613fb357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508681600081518110613fe157fe5b6020908102919091010152851561403f578882600185038151811061400257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508581600185038151811061403257fe5b6020026020010181815250505b876001600160a01b0316630931753c83836040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156140a357808201518382015260200161408b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156140e25780820151838201526020016140ca565b5050505090500194505050505060006040518083038160008780614104614ef9565b15801561411957600080614116614ded565b50505b505a614123615135565b505050505050925050508015614137575060015b61419e577f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa6040516020808252601690820152751d5c19185d1954995dd85c991cca0a4819985a5b195960521b6040808301919091526060909101905180910390a16141b1565b6141b1886141ac898961337f565b61388b565b5050505b505b7f2a368c7f33bb86e2d999940a3989d849031aff29b750f67947e6b8e8c3d2ffd689518a602001518a518b60200151878760405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a1505050505050505050505050565b60008960010161423c614e58565b905080600060028c0161424d614e58565b9050806142598b614a89565b1561426f57614268818a613527565b9050614290565b61428d61428661427f8d89614a94565b8b90613476565b8490613527565b92505b6142998a614a89565b156142af576142a8818961337f565b90506142d0565b6142cd6142c66142bf8c89614a94565b8a90613476565b849061337f565b92505b8383146142e957828060018f016142e561504b565b5050505b81811461430257808060028f016142fe61504b565b5050505b6000871561432757614322886114fa61431b858b613476565b879061337f565b614329565b865b9050614333615269565b8e60405160608101604052908160008261434b614e58565b6001600160681b036101009290920a9004168152602001600d8261436d614e58565b6001600160681b036101009290920a9004168152602001601a8261438f614e58565b65ffffffffffff6101009290920a900416905250905060208101516001600160681b0316821461448d578e6143cb6143c68361330a565b6149b2565b6143d4846149b2565b6143e55a6143e0615223565b614ab1565b83600081600d8482600160d01b816143fb614e58565b8165ffffffffffff021916908365ffffffffffff1602179061441b61504b565b5050508591906101000a8161442e614e58565b816001600160681b0302191690836001600160681b031602179061445061504b565b5050508491906101000a81614463614e58565b816001600160681b0302191690836001600160681b031602179061448561504b565b505050505050505b5061449a90508a8c614ac9565b6144ca576001600160a01b038c16600090815260038e016020528a90604090208151816144c561504b565b505050505b6144eb8c6144d88c89614a94565b6144e18d614a89565b8b8963ffffffff16565b50505050505050505050505050565b816001600160a01b0316836001600160a01b0316141561451957611842565b6000806007614526614e58565b906101000a90046001600160a01b031690506000806001600160a01b0316856001600160a01b031614806146075750816001600160a01b0316633b90b9bf866040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381868061459f614ef9565b1580156145b4576000806145b1614ded565b50505b505a6145be614f45565b50505050501580156145dd573d6000803e3d60006145da614ded565b50505b505050506040513d60208110156145fc576000806145f9614ded565b50505b810190808051925050505b15905060006001600160a01b03851615806146cf5750826001600160a01b0316633b90b9bf866040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680614667614ef9565b15801561467c57600080614679614ded565b50505b505a614686614f45565b50505050501580156146a5573d6000803e3d60006146a2614ded565b50505b505050506040513d60208110156146c4576000806146c1614ded565b50505b810190808051925050505b159050811580156146de575080155b156146eb57505050611842565b60006001600160a01b03871661470257600061470b565b61470b8761177a565b905060006001600160a01b03871661472457600061472d565b61472d8761177a565b9050600061476f6001600160a01b0389161561474a57600061474c565b875b6131846001600160a01b038c1615614765576000614767565b895b6113056110a4565b9050614779615288565b6040518061010001604052808b6001600160a01b031681526020018a6001600160a01b0316815260200187151581526020018615158152602001898152602001858152602001848152602001838152509050600080886001600160a01b031663edb7a6fa6040518163ffffffff1660e01b815260040160408051808303818680614801614ef9565b15801561481657600080614813614ded565b50505b505a614820614f45565b505050505015801561483f573d6000803e3d600061483c614ded565b50505b505050506040513d604081101561485e5760008061485b614ded565b50505b8101908080519291906020018051939550929350614887925085915084905061302f6008614ad7565b6148968382612eee600c614ad7565b505050505050505050505050565b60606148ef826040516040808201905260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201526001600160a01b0386169190614c6e565b905060008151111561184257602081018151602081101561491857600080614915614ded565b50505b810190808051925061184291505057600080611939614ded565b61493b81614d4d565b61494c5a614947615223565b614d65565b8360008282600160d81b8161495f614e58565b8164ffffffffff021916908364ffffffffff1602179061497d61504b565b5050508391906101000a81614990614e58565b816001600160d81b0302191690836001600160d81b031602179061261461504b565b6000600160681b82106149cd576000806149ca614ded565b50505b5090565b614a2b826135bb846040516040808201905290816000826149f0614e58565b6001600160d81b036101009290920a9004168152602001601b82614a12614e58565b64ffffffffff6101009290920a900416905250846139da565b5050565b60006003821115614a735781600160028204015b81811015614a6b57809150600281828681614a5a57fe5b040181614a6357fe5b049050614a43565b509050611698565b8115614a8157506001611698565b506000611698565b600081511592915050565b60008083511115614aab5760018351039050610f2d565b50919050565b6000600160301b82106149cd576000806149ca614ded565b600081518351149392505050565b614adf615212565b60038201600086516001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181614b1c614e58565b9052509050614b29615212565b82600301600087602001516001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181614b69614e58565b9052509050614b7782614a89565b8015614b875750614b8781614a89565b8015614b94575085604001515b8015614ba1575085606001515b15614c0157614bd38651614bb58488614a94565b6001614bca8a608001518b60a0015190613527565b8863ffffffff16565b614bfa8660200151614be58388614a94565b6001614bca8a608001518b60c001519061337f565b5050612eca565b856040015115614c3b57614c3b8651838860a00151614c298a608001518b60a0015190613527565b8a60e001518894939291908b8b614d7d565b856060015115614c6657614c668660200151828860c00151614c298a608001518b60c001519061337f565b505050505050565b6060614c7984614da1565b614c8b57600080614c88614ded565b50505b60006060856001600160a01b0316856040518082805190602001908083835b60208310614cc95780518252601f199092019160209182019101614caa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865a614d03615135565b5050505050509150503d8060008114614d38576040513d603f01601f191681016040523d815291503d6000602084013e614d3d565b606091505b5091509150612641828286614db6565b6000600160d81b82106149cd576000806149ca614ded565b6000600160281b82106149cd576000806149ca614ded565b612f568888888715614d8f5789614d97565b614d976135c0565b898989898961422e565b60008082614dad614ef9565b15159392505050565b60608315614dc55750816110e7565b600083511115614de65782518084602001614dde614ded565b5050506110e7565b6000806133975b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015614e25578086015182820160400152602001614e0a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561184257600082820152602001614e9c565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020614e9c565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020614e9c565b638540661f598160e01b8152614f76565b8080831115610f2d575090919050565b8080831015610f2d575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015614fae578088015182820152602001614f96565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596150038d3d614f66565b8c0161500f8187614f56565b5b828110156150245760008152602001615010565b50929c50505050505050565b60405160408082018152600290829080368337509192915050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020614e9c565b82806150a3614e58565b600181600116156101000203166002900490600052602060002090601f016020900481019282601f106150ea57805160ff191683800117856150e361504b565b5050615129565b828001600101856150f961504b565b50508215615129579182015b828111156151295782518261511861504b565b505091602001919060010190615105565b506149cd9291506152cb565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b89811015615179578089015182820152602001615161565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596151ce8e3d614f66565b8d016151da8187614f56565b5b828110156151ef57600081526020016151db565b50929d50505050505050565b604051604080820190526000808252602082015290565b604051602081016040526000815290565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020614e9c565b6040516060810160409081526000808352602083018190529082015290565b60405161010081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e082015290565b808211156149cd57600080826152df61504b565b5050506001016152cb56fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63658be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
  "deployedBytecode": "0x608060405234801561001957600080610016614ded565b50505b50600436106101f75760003560e01c806306fdde031461020557806307a8007014610284578063095ea7b3146102ac5780630dfe1681146102f557806311212d661461031957806318160ddd1461033f5780631e1401f81461035957806323b872dd1461039857806323e8cae1146103d75780633049105d1461041d578063313ce567146104e75780633732b39414610505578063395093511461050d5780633c6216a6146105425780634f64b2be146106515780635915d806146106775780635ed9156d146107435780636669302a1461079b5780636edc2c09146107a357806370a08231146107d2578063715018a6146108015780638d32df32146108095780638da5cb5b1461099357806393028d831461099b57806395cad3c7146109a357806395d89b41146109d25780639aad141b146109da5780639ea5ce0a14610a09578063a457c2d714610a9d578063a9059cbb14610ad2578063aa6ca80814610b07578063c40d4d6614610b4a578063d21220a714610b79578063d5bcb9b514610b81578063d7d3aab514610bce578063d9a0c21714610bfd578063dd62ed3e14610c05578063ddca3f4314610c3c578063e331d03914610c44578063e7ff42c914610c97578063f1ea604214610cc6578063f2fde38b14610cce575b600080610202614ded565b50505b61020d610cfd565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610249578082015183820152602001610231565b50505050905090810190601f1680156102765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102aa600480360360208110156102a3576000806102a0614ded565b50505b5035610dba565b005b6102e1600480360360408110156102cb576000806102c8614ded565b50505b506001600160a01b038135169060200135610f15565b604051901515815260200160405180910390f35b6102fd610f33565b6040516001600160a01b03909116815260200160405180910390f35b6102aa6004803603602081101561033857600080610335614ded565b50505b5035610f52565b6103476110a4565b60405190815260200160405180910390f35b6103476004803603606081101561037857600080610375614ded565b50505b506001600160a01b038135811691602081013590911690604001356110b5565b6102e1600480360360608110156103b7576000806103b4614ded565b50505b506001600160a01b038135811691602081013590911690604001356110ee565b6103df611182565b60405180846001600160681b03168152602001836001600160681b031681526020018265ffffffffffff168152602001935050505060405180910390f35b6104a86004803603608081101561043c57600080610439614ded565b50505b81019080806040019060028060200260405190810160405280929190826002602002808284376000920191909152509194939260408082019350909150600290805190810160405280929190826002602002808284376000920191909152509194506111e79350505050565b6040518281526020810182604080838360005b838110156104d35780820151838201526020016104bb565b505050509050019250505060405180910390f35b6104ef61120f565b60405160ff909116815260200160405180910390f35b61034761122b565b6102e16004803603604081101561052c57600080610529614ded565b50505b506001600160a01b0381351690602001356112a6565b610619600480360360608110156105615760008061055e614ded565b50505b81359190810190604081016020820135600160201b81111561058b57600080610588614ded565b50505b8201836020820111156105a6576000806105a3614ded565b50505b803590602001918460208302840111600160201b831117156105d0576000806105cd614ded565b50505b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b0316915061130b9050565b6040518082604080838360005b8381101561063e578082015183820152602001610626565b5050505090500191505060405180910390f35b6102fd600480360360208110156106705760008061066d614ded565b50505b503561164b565b6106196004803603604081101561069657600080610693614ded565b50505b81359190810190604081016020820135600160201b8111156106c0576000806106bd614ded565b50505b8201836020820111156106db576000806106d8614ded565b50505b803590602001918460208302840111600160201b8311171561070557600080610702614ded565b50505b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061169d945050505050565b610772600480360360208110156107625760008061075f614ded565b50505b50356001600160a01b03166116b8565b6040516001600160d81b03909216825264ffffffffff1660208201526040908101905180910390f35b6102aa611704565b610772600480360360208110156107c2576000806107bf614ded565b50505b50356001600160a01b031661175f565b610347600480360360208110156107f1576000806107ee614ded565b50505b50356001600160a01b031661177a565b6102aa61179a565b6102aa600480360360a081101561082857600080610825614ded565b50505b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561086457600080610861614ded565b50505b82018360208201111561087f5760008061087c614ded565b50505b803590602001918460018302840111600160201b831117156108a9576000806108a6614ded565b50505b91908080601f01602080910402602001604051908101604052818152929190602084018383808284376000920191909152509295949360208101935035915050600160201b81111561090357600080610900614ded565b50505b82018360208201111561091e5760008061091b614ded565b50505b803590602001918460018302840111600160201b8311171561094857600080610945614ded565b50505b91908080601f0160208091040260200160405190810160405281815292919060208401838380828437600092019190915250929550505090356001600160a01b031691506118479050565b6102fd611940565b6102aa611962565b610347600480360360208110156109c2576000806109bf614ded565b50505b50356001600160a01b03166119bb565b61020d611a15565b610347600480360360208110156109f9576000806109f6614ded565b50505b50356001600160a01b0316611abb565b6104a8600480360360a0811015610a2857600080610a25614ded565b50505b81019080806040019060028060200260405190810160405280929190826002602002808284376000920191909152509194939260408082019350909150600290805190810160405280929190826002602002808284376000920191909152509194505050356001600160a01b03169050611b0b565b6102e160048036036040811015610abc57600080610ab9614ded565b50505b506001600160a01b0381351690602001356122ca565b6102e160048036036040811015610af157600080610aee614ded565b50505b506001600160a01b038135169060200135612340565b610b0f612354565b6040516020808252819081018381815181526020019150805160209182019102808383600083156104d35780820151838201526020016104bb565b6102aa60048036036020811015610b6957600080610b66614ded565b50505b50356001600160a01b0316612411565b6102fd61261d565b610347600480360360a0811015610ba057600080610b9d614ded565b50505b506001600160a01b038135811691602081013582169160408201359160608101359160809091013516612629565b61034760048036036020811015610bed57600080610bea614ded565b50505b50356001600160a01b031661264b565b6102fd6127d3565b61034760048036036040811015610c2457600080610c21614ded565b50505b506001600160a01b03813581169160200135166127df565b610347612818565b610347600480360360c0811015610c6357600080610c60614ded565b50505b506001600160a01b0381358116916020810135821691604082013591606081013591608082013581169160a0013516612836565b61034760048036036020811015610cb657600080610cb3614ded565b50505b50356001600160a01b0316612c67565b6103df612db4565b6102aa60048036036020811015610ced57600080610cea614ded565b50505b50356001600160a01b0316612dff565b6060601580610d0a614e58565b600181600116156101000203166002900480601f016020809104026020016040519081016040528181529190602083018280610d44614e58565b60018160011615610100020316600290048015610db05780601f10610d7e576101008083610d70614e58565b040283529160200191610db0565b820191906000526020600020905b81610d95614e58565b81529060010190602001808311610d8c57829003601f168201915b5050505050905090565b670de0b6b3a7640000811115610dd857600080610dd5614ded565b50505b610f125a610de4614eb3565b600f60005a610df1614eb3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181610e26614e58565b905250610e3284612ed0565b610e435a610e3e614eb3565b61177a565b610e4b6110a4565b60006007610e57614e58565b906101000a90046001600160a01b03166001600160a01b03166323662bb96040518163ffffffff1660e01b81526004016020604051808303818680610e9a614ef9565b158015610eaf57600080610eac614ded565b50505b505a610eb9614f45565b5050505050158015610ed8573d6000803e3d6000610ed5614ded565b50505b505050506040513d6020811015610ef757600080610ef4614ded565b50505b810190808051600c989796959493509150612eee9050612f45565b50565b6000610f29610f22612f60565b8484612f6b565b5060015b92915050565b60006011610f3f614e58565b906101000a90046001600160a01b031681565b662386f26fc10000811115610f6f57600080610f6c614ded565b50505b610f125a610f7b614eb3565b600b60005a610f88614eb3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181610fbd614e58565b905250610fc984612ed0565b610fd55a610e3e614eb3565b610fdd6110a4565b60006007610fe9614e58565b906101000a90046001600160a01b03166001600160a01b0316635a6c72d06040518163ffffffff1660e01b8152600401602060405180830381868061102c614ef9565b1580156110415760008061103e614ded565b50505b505a61104b614f45565b505050505015801561106a573d6000803e3d6000611067614ded565b50505b505050506040513d602081101561108957600080611086614ded565b50505b810190808051600898979695949350915061302f9050612f45565b600060026110b0614e58565b905090565b60006110e48484846110c68861264b565b6110cf88612c67565b6110d7612818565b6110df61122b565b613086565b90505b9392505050565b60006110fb8484846131c3565b61117884611107612f60565b6111738560405160608101604052602880825261533360208301396001600160a01b038a1660009081526001602052604090206000611144612f60565b6001600160a01b03166001600160a01b0316815260200190815260200160002061116c614e58565b91906132eb565b612f6b565b5060019392505050565b6000808080600c611191614e58565b6001600160681b036101009290920a900416600d600c6111af614e58565b6001600160681b036101009290920a900416601a600c6111cd614e58565b906101000a900465ffffffffffff16925092509250909192565b60006111f1615030565b61120484845a6111ff614eb3565b611b0b565b915091509250929050565b600080600561121c614e58565b906101000a900460ff16905090565b60006110b0600c604051606081016040529081600082611249614e58565b6001600160681b036101009290920a9004168152602001600d8261126b614e58565b6001600160681b036101009290920a9004168152602001601a8261128d614e58565b65ffffffffffff6101009290920a90041690525061330a565b6000610f296112b3612f60565b8461117385600160006112c4612f60565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038916600090815260209190915260409020611305614e58565b9061337f565b611313615030565b6002600661131f614e58565b141561133357600080611330614ded565b50505b600280600661134061504b565b50505061134b615030565b60405180604001604052806011600090611363614e58565b6001600160a01b036101009290920a900416815260200160006012611386614e58565b6001600160a01b036101009290920a9004169052905060006113a66110a4565b90506113ba5a6113b4614eb3565b876133a0565b60005b60028110156115c85760008382600281106113d457fe5b602002015190506000816001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b60408110156114425760008282015260200161142b565b5050506040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381868061147f614ef9565b15801561149457600080611491614ded565b50505b505a61149e614f45565b50505050501580156114bd573d6000803e3d60006114ba614ded565b50505b505050506040513d60208110156114dc576000806114d9614ded565b50505b81019080805193506000925061150091508690506114fa848d613476565b906134a3565b90506115166001600160a01b03841689836134cb565b8087856002811061152357fe5b602002015288518410158061154b575088848151811061153f57fe5b60200260200101518110155b61155d5760008061155a614ded565b50505b61158d8261156b878d613527565b6001600160a01b03861660009081526013602052889060409020929190613545565b6115bd8261159b878d613527565b6001600160a01b03861660009081526014602052889060409020929190613545565b5050506001016113bd565b50836001600160a01b03165a6115dc614eb3565b6001600160a01b03167f3cae9923fd3c2f468aa25a8ef687923e37f957459557c0380fd06526c0b8cdbc888651602088015160405180848152602001838152602001828152602001935050505060405180910390a3505060016006819061164161504b565b5050509392505050565b600081611675576000601161165e614e58565b906101000a90046001600160a01b03169050611698565b816001141561168a576000601261165e614e58565b600080611695614ded565b50505b919050565b6116a5615030565b6110e783835a6116b3614eb3565b61130b565b601460205280600052604060002090506000816116d3614e58565b6001600160d81b036101009290920a90041690601b816116f1614e58565b906101000a900464ffffffffff16905082565b61175d5a611710614eb3565b600f60005a61171d614eb3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181611752614e58565b905250610e326135c0565b565b601360205280600052604060002090506000816116d3614e58565b6001600160a01b0381166000908152602081905260408120610f2d614e58565b6117a2612f60565b6001600160a01b03166117b3611940565b6001600160a01b0316146117cf576000806117cc614ded565b50505b6000600160056117dd614e58565b906101000a90046001600160a01b03166001600160a01b031660008051602061535b83398151915260405160405180910390a36000600561010081611820614e58565b816001600160a01b0302191690836001600160a01b031602179061184261504b565b505050565b600083511161185e5760008061185b614ded565b50505b600082511161187557600080611872614ded565b50505b836001600160a01b0316856001600160a01b0316141561189d5760008061189a614ded565b50505b8460116001816118ab614e58565b816001600160a01b0302191690836001600160a01b03160217906118cd61504b565b50505083601260006101000a816118e2614e58565b816001600160a01b0302191690836001600160a01b031602179061190461504b565b50505082601590805161191b929160200190615099565b50601682805161192f929160200190615099565b50611939816135db565b5050505050565b600080601061194d614e58565b906101000a90046001600160a01b0316905090565b61175d5a61196e614eb3565b600b60005a61197b614eb3565b6001600160a01b03166001600160a01b03168152602001908152602001600020604051602081016040529081816119b0614e58565b905250610fc96135c0565b6000610f2d8160076119cb614e58565b6001600160a01b038581166000908152600f6020526101009390930a90910416906323662bb9906040902060405160208101604052908181611a0b614e58565b90525091906137df565b6060601680611a22614e58565b600181600116156101000203166002900480601f016020809104026020016040519081016040528181529190602083018280611a5c614e58565b60018160011615610100020316600290048015610db05780601f10611a88576101008083610d70614e58565b820191906000526020600020905b81611a9f614e58565b81529060010190602001808311611a9657509395945050505050565b6000610f2d816007611acb614e58565b6001600160a01b038581166000908152600b6020526101009390930a9091041690635a6c72d0906040902060405160208101604052908181611a0b614e58565b6000611b15615030565b60026006611b21614e58565b1415611b3557600080611b32614ded565b50505b6002806006611b4261504b565b505050611b4d615030565b60405180604001604052806011600090611b65614e58565b6001600160a01b036101009290920a900416815260200160006012611b88614e58565b6001600160a01b036101009290920a900416905290506000611ba86110a4565b905080611d6e57611bbc6103e86063613476565b9350611c225a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015611c1757600082820152602001611c00565b5050506103e861388b565b60005b6002811015611d6857611c4885898360028110611c3e57fe5b602002015161394b565b94506000888260028110611c5857fe5b602002015111611c7057600080611c6d614ded565b50505b868160028110611c7c57fe5b6020020151888260028110611c8d57fe5b60200201511015611ca657600080611ca3614ded565b50505b611d3e5a611cb2614eb3565b5a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015611d0857600082820152602001611cf1565b5050508a8460028110611d1757fe5b6020020151868560028110611d2857fe5b60200201516001600160a01b0316929190613962565b878160028110611d4a57fe5b6020020151848260028110611d5b57fe5b6020020152600101611c25565b50612227565b611d76615030565b60005b6002811015611eb657838160028110611d8e57fe5b60200201516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015611df757600082820152602001611de0565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611e34614ef9565b158015611e4957600080611e46614ded565b50505b505a611e53614f45565b5050505050158015611e72573d6000803e3d6000611e6f614ded565b50505b505050506040513d6020811015611e9157600080611e8e614ded565b50505b810190808051925084915083905060028110611ea957fe5b6020020152600101611d79565b50600019945060005b6002811015611f0a57611f0086611efb848460028110611edb57fe5b60200201516114fa8d8660028110611eef57fe5b60200201518890613476565b6139cb565b9550600101611ebf565b508460005b60028110156121835760008a8260028110611f2657fe5b602002015111611f3e57600080611f3b614ded565b50505b6000611f66856114fa6001880361130587898860028110611f5b57fe5b602002015190613476565b9050898260028110611f7457fe5b6020020151811015611f8e57600080611f8b614ded565b50505b6120005a611f9a614eb3565b5a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015611ff057600082820152602001611fd9565b50505083898660028110611d2857fe5b61213484836002811061200f57fe5b602002015187846002811061202057fe5b60200201516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b604081101561208957600082820152602001612072565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806120c6614ef9565b1580156120db576000806120d8614ded565b50505b505a6120e5614f45565b5050505050158015612104573d6000803e3d6000612101614ded565b50505b505050506040513d602081101561212357600080612120614ded565b50505b810190808051939250506135279050565b87836002811061214057fe5b602002015261217888611efb86856002811061215857fe5b60200201516114fa8b876002811061216c57fe5b60200201518a90613476565b975050600101611f0f565b5060005b6002811015612223576121ec83826002811061219f57fe5b60200201516121ae868a61337f565b86601460008a87600281106121bf57fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020929190613545565b61221b8382600281106121fb57fe5b602002015161220a868a61337f565b86601360008a87600281106121bf57fe5b600101612187565b5050505b6000841161223d5760008061223a614ded565b50505b612247858561388b565b846001600160a01b03165a61225a614eb3565b6001600160a01b03167f8bab6aed5a508937051a144e61d6e61336834a66aaee250a00613ae6f744c422868651602088015160405180848152602001838152602001828152602001935050505060405180910390a350506001600681906122bf61504b565b505050935093915050565b6000610f296122d7612f60565b846111738560405160608101604052602580825261539b6020830139600160006122ff612f60565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038a1660009081526020919091526040902061116c614e58565b6000610f2961234d612f60565b84846131c3565b60606002604051908082528060200260200182016040528015612381578160200160208202803683370190505b50905060006011612390614e58565b906101000a90046001600160a01b0316816000815181106123ad57fe5b6001600160a01b0390921660209283029190910190910152600060126123d1614e58565b906101000a90046001600160a01b0316816001815181106123ee57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505090565b612419612f60565b6001600160a01b031661242a611940565b6001600160a01b03161461244657600080612443614ded565b50505b806007600181612454614e58565b816001600160a01b0302191690836001600160a01b031602179061247661504b565b5050505a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b60408110156124cf576000828201526020016124b8565b5050506001600160a01b03166393028d836040518163ffffffff1660e01b815260040160006040518083038160008780612507614ef9565b15801561251c57600080612519614ded565b50505b505a612526615135565b505050505050158015612546573d6000803e3d6000612543614ded565b50505b505050505a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b60408110156125a057600082820152602001612589565b5050506001600160a01b0316636669302a6040518163ffffffff1660e01b8152600401600060405180830381600087806125d8614ef9565b1580156125ed576000806125ea614ded565b50505b505a6125f7615135565b505050505050158015611939573d6000803e3d6000612614614ded565b50505050505050565b60006012610f3f614e58565b600061264186868686865a61263c614eb3565b612836565b9695505050505050565b600080826001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b60408110156126b35760008282015260200161269c565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806126f0614ef9565b15801561270557600080612702614ded565b50505b505a61270f614f45565b505050505015801561272e573d6000803e3d600061272b614ded565b50505b505050506040513d602081101561274d5760008061274a614ded565b50505b8101908080516001600160a01b038716600090815260136020529094506110e793506127cd925084915060409020604051604080820190529081600082612792614e58565b6001600160d81b036101009290920a9004168152602001601b826127b4614e58565b64ffffffffff6101009290920a900416905250906139da565b8261394b565b60006007610f3f614e58565b6001600160a01b03821660009081526001602052604081206001600160a01b0383166000908152602091909152604090206110e7614e58565b60006110b06008604051606081016040529081600082611249614e58565b600060026006612844614e58565b141561285857600080612855614ded565b50505b600280600661286561504b565b5050506007600090612875614e58565b906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186806128b8614ef9565b1580156128cd576000806128ca614ded565b50505b505a6128d7614f45565b50505050501580156128f6573d6000803e3d60006128f3614ded565b50505b505050506040513d602081101561291557600080612912614ded565b50505b81019080805192506129329150505760008061292f614ded565b50505b61293a6151fb565b6040518060400160405280896001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b60408110156129aa57600082820152602001612993565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806129e7614ef9565b1580156129fc576000806129f9614ded565b50505b505a612a06614f45565b5050505050158015612a25573d6000803e3d6000612a22614ded565b50505b505050506040513d6020811015612a4457600080612a41614ded565b50505b81019080805184525050506020016001600160a01b0389166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015612ab757600082820152602001612aa0565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680612af4614ef9565b158015612b0957600080612b06614ded565b50505b505a612b13614f45565b5050505050158015612b32573d6000803e3d6000612b2f614ded565b50505b505050506040513d6020811015612b5157600080612b4e614ded565b50505b8101908080519093525091925060009150612b6c90506151fb565b612b746151fb565b6040518060400160405280612b87612818565b8152602001612b9461122b565b90529050612ba78b8b8b8b8a8987613a3b565b90965090935091506001600160a01b03808c169087165a612bc6614eb3565b6001600160a01b03167fbd99c6719f088aa0abd9e7b7a4a635d1f931601e9f304b538dc42be25d8c65c68d878a885189602001518f6040516001600160a01b03968716815260208101959095526040808601949094526060850192909252608084015290921660a082015260c001905180910390a4612c488386898785613ccc565b50505050600160068190612c5a61504b565b5050509695505050505050565b600080826001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015612ccf57600082820152602001612cb8565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680612d0c614ef9565b158015612d2157600080612d1e614ded565b50505b505a612d2b614f45565b5050505050158015612d4a573d6000803e3d6000612d47614ded565b50505b505050506040513d6020811015612d6957600080612d66614ded565b50505b8101908080516001600160a01b038716600090815260146020529094506110e79350612dae925084915060409020604051604080820190529081600082612792614e58565b826139cb565b60008080806008612dc3614e58565b6001600160681b036101009290920a900416600d6008612de1614e58565b6001600160681b036101009290920a900416601a60086111cd614e58565b612e07612f60565b6001600160a01b0316612e18611940565b6001600160a01b031614612e3457600080612e31614ded565b50505b6001600160a01b038116612e5057600080612e4d614ded565b50505b6001600160a01b03811660016005612e66614e58565b906101000a90046001600160a01b03166001600160a01b031660008051602061535b83398151915260405160405180910390a380600561010081612ea8614e58565b816001600160a01b0302191690836001600160a01b0316021790612eca61504b565b50505050565b612ed8615212565b6040516020810160405260019290920182525090565b836001600160a01b03167fce0cf859d853e1944032294143a1bf3ad799998ae77acbeb6c4d9b20d691024084848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b612f5688888888888989898961422e565b5050505050505050565b60005a6110b0614eb3565b6001600160a01b038316612f8757600080612f84614ded565b50505b6001600160a01b038216612fa357600080612fa0614ded565b50505b6001600160a01b038316600090815260016020528190604090206001600160a01b0384166000908152602091909152604090208190612fe061504b565b505050816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405190815260200160405180910390a3505050565b836001600160a01b03167fe117cae46817b894b41a4412b73ae0ba746a5707b94e02d83b4c6502010b11ac84848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b6000866001600160a01b0316886001600160a01b031611156130a6579596955b6000861180156130e25750600060116130bd614e58565b906101000a90046001600160a01b03166001600160a01b0316886001600160a01b0316145b801561311a5750600060126130f5614e58565b906101000a90046001600160a01b03166001600160a01b0316876001600160a01b0316145b156131b857600061314161313a670de0b6b3a76400006114fa8a88613476565b8890613527565b9050600061314f878361337f565b90506000613161826114fa858a613476565b9050600061318a6131728786613476565b613184670de0b6b3a764000086613476565b90613527565b905060006131a0670de0b6b3a764000085613476565b90506131b0816114fa8585613476565b955050505050505b979650505050505050565b6001600160a01b0383166131df576000806131dc614ded565b50505b6001600160a01b0382166131fb576000806131f8614ded565b50505b6132068383836144fa565b6132418160405160608101604052602680825261530d60208301396001600160a01b038616600090815260208190526040902061116c614e58565b6001600160a01b0384166000908152602081905260409020819061326361504b565b5050506001600160a01b0382166000908152602081905261328c90829060409020611305614e58565b6001600160a01b038316600090815260208190526040902081906132ae61504b565b505050816001600160a01b0316836001600160a01b031660008051602061537b8339815191528360405190815260200160405180910390a3505050565b60008383111561330357600080613300614ded565b50505b5050900390565b60008061332d62015180611efb856040015165ffffffffffff165a613184615223565b9050600061333e6201518083613527565b9050613377620151806114fa6133628588602001516001600160681b031690613476565b6113058589516001600160681b031690613476565b949350505050565b6000828201838110156110e757600080613397614ded565b50509392505050565b6001600160a01b0382166133bc576000806133b9614ded565b50505b6133c8826000836144fa565b613403816040516060810160405260228082526152eb60208301396001600160a01b038516600090815260208190526040902061116c614e58565b6001600160a01b0383166000908152602081905260409020819061342561504b565b505050613436816002613184614e58565b80600261344161504b565b5060009150506001600160a01b03831660008051602061537b8339815191528360405190815260200160405180910390a35050565b60008261348557506000610f2d565b8282028284828161349257fe5b04146110e757600080613397614ded565b60008082116134ba576000806134b7614ded565b50505b8183816134c357fe5b049392505050565b6118428363a9059cbb60e01b84846040516001600160a01b0390921660248301526044820152606401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b031690911790526148a4565b60008282111561353f5760008061353c614ded565b50505b50900390565b612eca846135bb836114fa61355b826001613527565b611305886135b58c60405160408082019052908160008261357a614e58565b6001600160d81b036101009290920a9004168152602001601b8261359c614e58565b64ffffffffff6101009290920a9004169052508c6139da565b90613476565b614932565b6135c8615212565b6040516020810160405260008152905090565b601460106135e7614e58565b906101000a900460ff161561360457600080613601614ded565b50505b806007600181613612614e58565b816001600160a01b0302191690836001600160a01b031602179061363461504b565b5050506136db816001600160a01b0316635a6c72d06040518163ffffffff1660e01b8152600401602060405180830381868061366e614ef9565b15801561368357600080613680614ded565b50505b505a61368d614f45565b50505050501580156136ac573d6000803e3d60006136a9614ded565b50505b505050506040513d60208110156136cb576000806136c8614ded565b50505b81019080805192506149b2915050565b6008600160681b816136eb614e58565b816001600160681b0302191690836001600160681b031602179061370d61504b565b505050613747816001600160a01b03166323662bb96040518163ffffffff1660e01b8152600401602060405180830381868061366e614ef9565b600c600160681b81613757614e58565b816001600160681b0302191690836001600160681b031602179061377961504b565b5050505a613785614eb3565b6010600181613792614e58565b816001600160a01b0302191690836001600160a01b03160217906137b461504b565b5050506001601060146101000a816137ca614e58565b8160ff02191690831515021790612eca61504b565b600080845111156137f657600184510390506110e7565b82826040518163ffffffff1660e01b8152600401602060405180830381868061381d614ef9565b1580156138325760008061382f614ded565b50505b505a61383c614f45565b505050505015801561385b573d6000803e3d6000613858614ded565b50505b505050506040513d602081101561387a57600080613877614ded565b50505b810190808051979650505050505050565b6001600160a01b0382166138a7576000806138a4614ded565b50505b6138b3600083836144fa565b6138c1816002611305614e58565b8060026138cc61504b565b5050506001600160a01b038216600090815260208190526138f590829060409020611305614e58565b6001600160a01b0383166000908152602081905260409020819061391761504b565b5050506001600160a01b038216600060008051602061537b8339815191528360405190815260200160405180910390a35050565b60008183101561395b57816110e7565b5090919050565b612eca846323b872dd60e01b8585856040516001600160a01b0393841660248201529190921660448201526064810191909152608401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b031690911790526148a4565b600081831061395b57816110e7565b6000806139fa603c611efb866020015164ffffffffff165a613184615223565b90506000613a09603c83613527565b9050613a32603c6114fa613a1d8786613476565b611305858a516001600160d81b031690613476565b95945050505050565b600080613a466151fb565b613a7a85516001600160a01b038c166000908152601360205260409020604051604080820190529081600082612792614e58565b8152613a888151865161394b565b8152613ac160208601516001600160a01b038b166000908152601460205260409020604051604080820190529081600082612792614e58565b60208201908152613ad7905186602001516139cb565b6020820152613b535a613ae8614eb3565b5a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015613b3e57600082820152602001613b27565b5050506001600160a01b038d1691908b613962565b613bae85518b6001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825292506020612072565b9250613bc98a8a858451856020015189518a60200151613086565b9150600082118015613bdb5750868210155b613bed57600080613bea614ded565b50505b613c016001600160a01b038a1687846134cb565b8451815114613c3757613c37613c198483519061337f565b6001600160a01b038c16600090815260136020526040902090614932565b8460200151816020015114613c7657613c76613c5883836020015190613527565b6001600160a01b038b16600090815260146020526040902090614932565b613c9985516001600160a01b038c166000908152601460205260409020906149d1565b613cbf85602001516001600160a01b038b166000908152601360205260409020906149d1565b9750975097945050505050565b6000808080806007613cdc614e58565b906101000a90046001600160a01b03166001600160a01b031663172886e76040518163ffffffff1660e01b81526004016080604051808303818680613d1f614ef9565b158015613d3457600080613d31614ded565b50505b505a613d3e614f45565b5050505050158015613d5d573d6000803e3d6000613d5a614ded565b50505b505050506040513d6080811015613d7c57600080613d79614ded565b50505b810190808051929190602001805192919060200180519291906020018051959950939750919550929350600092508291506a0c097ce7bc90715b34b9f160241b9050613dd989516114fa613dd28f8d519061337f565b8490613476565b9050613df589602001516114fa613dd28e8d6020015190613527565b90506a0c097ce7bc90715b34b9f160241b8111156141b757613e1681614a2f565b90506000613e3b826114fa613e3382670de0b6b3a7640000613527565b6135b56110a4565b90506001600160a01b038b16613e52576000613e68565b613e68670de0b6b3a76400006114fa838b613476565b93506001600160a01b038616613e7f576000613e95565b613e95670de0b6b3a76400006114fa838a613476565b92506001600160a01b038516613eca578315613eb557613eb58b8561388b565b8215613ec557613ec5868461388b565b6141b5565b6000841180613ed95750600083115b156141b5576000808411613eee576000613ef1565b60015b60008611613f00576000613f03565b60015b0160ff1690506060816001600160401b0381118015613f2a57600080613f27614ded565b50505b50604051908082528060200260200182016040528015613f54578160200160208202803683370190505b5090506060826001600160401b0381118015613f7857600080613f75614ded565b50505b50604051908082528060200260200182016040528015613fa2578160200160208202803683370190505b5090508d82600081518110613fb357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508681600081518110613fe157fe5b6020908102919091010152851561403f578882600185038151811061400257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508581600185038151811061403257fe5b6020026020010181815250505b876001600160a01b0316630931753c83836040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156140a357808201518382015260200161408b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156140e25780820151838201526020016140ca565b5050505090500194505050505060006040518083038160008780614104614ef9565b15801561411957600080614116614ded565b50505b505a614123615135565b505050505050925050508015614137575060015b61419e577f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa6040516020808252601690820152751d5c19185d1954995dd85c991cca0a4819985a5b195960521b6040808301919091526060909101905180910390a16141b1565b6141b1886141ac898961337f565b61388b565b5050505b505b7f2a368c7f33bb86e2d999940a3989d849031aff29b750f67947e6b8e8c3d2ffd689518a602001518a518b60200151878760405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a1505050505050505050505050565b60008960010161423c614e58565b905080600060028c0161424d614e58565b9050806142598b614a89565b1561426f57614268818a613527565b9050614290565b61428d61428661427f8d89614a94565b8b90613476565b8490613527565b92505b6142998a614a89565b156142af576142a8818961337f565b90506142d0565b6142cd6142c66142bf8c89614a94565b8a90613476565b849061337f565b92505b8383146142e957828060018f016142e561504b565b5050505b81811461430257808060028f016142fe61504b565b5050505b6000871561432757614322886114fa61431b858b613476565b879061337f565b614329565b865b9050614333615269565b8e60405160608101604052908160008261434b614e58565b6001600160681b036101009290920a9004168152602001600d8261436d614e58565b6001600160681b036101009290920a9004168152602001601a8261438f614e58565b65ffffffffffff6101009290920a900416905250905060208101516001600160681b0316821461448d578e6143cb6143c68361330a565b6149b2565b6143d4846149b2565b6143e55a6143e0615223565b614ab1565b83600081600d8482600160d01b816143fb614e58565b8165ffffffffffff021916908365ffffffffffff1602179061441b61504b565b5050508591906101000a8161442e614e58565b816001600160681b0302191690836001600160681b031602179061445061504b565b5050508491906101000a81614463614e58565b816001600160681b0302191690836001600160681b031602179061448561504b565b505050505050505b5061449a90508a8c614ac9565b6144ca576001600160a01b038c16600090815260038e016020528a90604090208151816144c561504b565b505050505b6144eb8c6144d88c89614a94565b6144e18d614a89565b8b8963ffffffff16565b50505050505050505050505050565b816001600160a01b0316836001600160a01b0316141561451957611842565b6000806007614526614e58565b906101000a90046001600160a01b031690506000806001600160a01b0316856001600160a01b031614806146075750816001600160a01b0316633b90b9bf866040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381868061459f614ef9565b1580156145b4576000806145b1614ded565b50505b505a6145be614f45565b50505050501580156145dd573d6000803e3d60006145da614ded565b50505b505050506040513d60208110156145fc576000806145f9614ded565b50505b810190808051925050505b15905060006001600160a01b03851615806146cf5750826001600160a01b0316633b90b9bf866040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680614667614ef9565b15801561467c57600080614679614ded565b50505b505a614686614f45565b50505050501580156146a5573d6000803e3d60006146a2614ded565b50505b505050506040513d60208110156146c4576000806146c1614ded565b50505b810190808051925050505b159050811580156146de575080155b156146eb57505050611842565b60006001600160a01b03871661470257600061470b565b61470b8761177a565b905060006001600160a01b03871661472457600061472d565b61472d8761177a565b9050600061476f6001600160a01b0389161561474a57600061474c565b875b6131846001600160a01b038c1615614765576000614767565b895b6113056110a4565b9050614779615288565b6040518061010001604052808b6001600160a01b031681526020018a6001600160a01b0316815260200187151581526020018615158152602001898152602001858152602001848152602001838152509050600080886001600160a01b031663edb7a6fa6040518163ffffffff1660e01b815260040160408051808303818680614801614ef9565b15801561481657600080614813614ded565b50505b505a614820614f45565b505050505015801561483f573d6000803e3d600061483c614ded565b50505b505050506040513d604081101561485e5760008061485b614ded565b50505b8101908080519291906020018051939550929350614887925085915084905061302f6008614ad7565b6148968382612eee600c614ad7565b505050505050505050505050565b60606148ef826040516040808201905260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201526001600160a01b0386169190614c6e565b905060008151111561184257602081018151602081101561491857600080614915614ded565b50505b810190808051925061184291505057600080611939614ded565b61493b81614d4d565b61494c5a614947615223565b614d65565b8360008282600160d81b8161495f614e58565b8164ffffffffff021916908364ffffffffff1602179061497d61504b565b5050508391906101000a81614990614e58565b816001600160d81b0302191690836001600160d81b031602179061261461504b565b6000600160681b82106149cd576000806149ca614ded565b50505b5090565b614a2b826135bb846040516040808201905290816000826149f0614e58565b6001600160d81b036101009290920a9004168152602001601b82614a12614e58565b64ffffffffff6101009290920a900416905250846139da565b5050565b60006003821115614a735781600160028204015b81811015614a6b57809150600281828681614a5a57fe5b040181614a6357fe5b049050614a43565b509050611698565b8115614a8157506001611698565b506000611698565b600081511592915050565b60008083511115614aab5760018351039050610f2d565b50919050565b6000600160301b82106149cd576000806149ca614ded565b600081518351149392505050565b614adf615212565b60038201600086516001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181614b1c614e58565b9052509050614b29615212565b82600301600087602001516001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181614b69614e58565b9052509050614b7782614a89565b8015614b875750614b8781614a89565b8015614b94575085604001515b8015614ba1575085606001515b15614c0157614bd38651614bb58488614a94565b6001614bca8a608001518b60a0015190613527565b8863ffffffff16565b614bfa8660200151614be58388614a94565b6001614bca8a608001518b60c001519061337f565b5050612eca565b856040015115614c3b57614c3b8651838860a00151614c298a608001518b60a0015190613527565b8a60e001518894939291908b8b614d7d565b856060015115614c6657614c668660200151828860c00151614c298a608001518b60c001519061337f565b505050505050565b6060614c7984614da1565b614c8b57600080614c88614ded565b50505b60006060856001600160a01b0316856040518082805190602001908083835b60208310614cc95780518252601f199092019160209182019101614caa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865a614d03615135565b5050505050509150503d8060008114614d38576040513d603f01601f191681016040523d815291503d6000602084013e614d3d565b606091505b5091509150612641828286614db6565b6000600160d81b82106149cd576000806149ca614ded565b6000600160281b82106149cd576000806149ca614ded565b612f568888888715614d8f5789614d97565b614d976135c0565b898989898961422e565b60008082614dad614ef9565b15159392505050565b60608315614dc55750816110e7565b600083511115614de65782518084602001614dde614ded565b5050506110e7565b6000806133975b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015614e25578086015182820160400152602001614e0a565b506020828760640184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52505050565b6303daa959598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051935060005b604081101561184257600082820152602001614e9c565b6373509064598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020614e9c565b638435035b598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020614e9c565b638540661f598160e01b8152614f76565b8080831115610f2d575090919050565b8080831015610f2d575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015614fae578088015182820152602001614f96565b506060828960a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8b8b82606087013350600060045af150596150038d3d614f66565b8c0161500f8187614f56565b5b828110156150245760008152602001615010565b50929c50505050505050565b60405160408082018152600290829080368337509192915050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52600081526020614e9c565b82806150a3614e58565b600181600116156101000203166002900490600052602060002090601f016020900481019282601f106150ea57805160ff191683800117856150e361504b565b5050615129565b828001600101856150f961504b565b50508215615129579182015b828111156151295782518261511861504b565b505091602001919060010190615105565b506149cd9291506152cb565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b89811015615179578089015182820152602001615161565b506060828a60a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8c8c82606087013350600060045af150596151ce8e3d614f66565b8d016151da8187614f56565b5b828110156151ef57600081526020016151db565b50929d50505050505050565b604051604080820190526000808252602082015290565b604051602081016040526000815290565b63bdbf8c36598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020614e9c565b6040516060810160409081526000808352602083018190529082015290565b60405161010081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e082015290565b808211156149cd57600080826152df61504b565b5050506001016152cb56fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63658be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 554,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 560,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 562,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 564,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 566,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 568,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 7,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_owner",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1244,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5353,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "mooniswapFactoryGovernance",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IMooniswapFactoryGovernance)6914"
      },
      {
        "astId": 5355,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_fee",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Data)7263_storage"
      },
      {
        "astId": 5357,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_slippageFee",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Data)7263_storage"
      },
      {
        "astId": 5359,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_owner",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 5361,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_initialized",
        "offset": 20,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 1373,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "token0",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC20)1118"
      },
      {
        "astId": 1375,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "token1",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IERC20)1118"
      },
      {
        "astId": 1379,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "virtualBalancesForAddition",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_contract(IERC20)1118,t_struct(Data)8330_storage)"
      },
      {
        "astId": 1383,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "virtualBalancesForRemoval",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_contract(IERC20)1118,t_struct(Data)8330_storage)"
      },
      {
        "astId": 1385,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_name",
        "offset": 0,
        "slot": "21",
        "type": "t_string_storage"
      },
      {
        "astId": 1387,
        "contract": "contracts/Mooniswap.sol:Mooniswap",
        "label": "_symbol",
        "offset": 0,
        "slot": "22",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1118": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMooniswapFactoryGovernance)6914": {
        "encoding": "inplace",
        "label": "contract IMooniswapFactoryGovernance",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Data)8527_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vote.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)8527_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1118,t_struct(Data)8330_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => struct VirtualBalance.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)8330_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Data)7263_storage": {
        "encoding": "inplace",
        "label": "struct LiquidVoting.Data",
        "members": [
          {
            "astId": 7254,
            "contract": "contracts/Mooniswap.sol:Mooniswap",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Data)8471_storage"
          },
          {
            "astId": 7256,
            "contract": "contracts/Mooniswap.sol:Mooniswap",
            "label": "_weightedSum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7258,
            "contract": "contracts/Mooniswap.sol:Mooniswap",
            "label": "_defaultVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7262,
            "contract": "contracts/Mooniswap.sol:Mooniswap",
            "label": "votes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Data)8527_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Data)8330_storage": {
        "encoding": "inplace",
        "label": "struct VirtualBalance.Data",
        "members": [
          {
            "astId": 8327,
            "contract": "contracts/Mooniswap.sol:Mooniswap",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint216"
          },
          {
            "astId": 8329,
            "contract": "contracts/Mooniswap.sol:Mooniswap",
            "label": "time",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)8471_storage": {
        "encoding": "inplace",
        "label": "struct VirtualVote.Data",
        "members": [
          {
            "astId": 8466,
            "contract": "contracts/Mooniswap.sol:Mooniswap",
            "label": "oldResult",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 8468,
            "contract": "contracts/Mooniswap.sol:Mooniswap",
            "label": "result",
            "offset": 13,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 8470,
            "contract": "contracts/Mooniswap.sol:Mooniswap",
            "label": "time",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)8527_storage": {
        "encoding": "inplace",
        "label": "struct Vote.Data",
        "members": [
          {
            "astId": 8526,
            "contract": "contracts/Mooniswap.sol:Mooniswap",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}