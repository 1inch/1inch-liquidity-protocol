{
  "address": "0x8b01d28F4fDDD89322711d832325f7eB1f122FB2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token2",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "poolOwner",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80672af03bfb4c70bd5d9a24aa6c661d914699b9f5d8471b4624980b77af37ae",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x8b01d28F4fDDD89322711d832325f7eB1f122FB2",
    "transactionIndex": 0,
    "gasUsed": "8094381",
    "logsBloom": "0x
    "blockHash": "0xa94e94d7d991757c1a3550d8e825861ae09e93707bb38b5f1a2885fafbf12f2a",
    "transactionHash": "0x80672af03bfb4c70bd5d9a24aa6c661d914699b9f5d8471b4624980b77af37ae",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 56659,
        "transactionHash": "0x80672af03bfb4c70bd5d9a24aa6c661d914699b9f5d8471b4624980b77af37ae",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xa94e94d7d991757c1a3550d8e825861ae09e93707bb38b5f1a2885fafbf12f2a"
      }
    ],
    "blockNumber": 56659,
    "cumulativeGasUsed": "8094381",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c40ed9d6ab9534012d51b8ac2455af37",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12-develop.2020.12.9+commit.9b8c5857\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MooniswapDeployer.sol\":\"MooniswapDeployer\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Mooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/Sqrt.sol\\\";\\nimport \\\"./libraries/VirtualBalance.sol\\\";\\nimport \\\"./governance/MooniswapGovernance.sol\\\";\\n\\n\\ncontract Mooniswap is MooniswapGovernance {\\n    using Sqrt for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    struct Balances {\\n        uint256 src;\\n        uint256 dst;\\n    }\\n\\n    struct Fees {\\n        uint256 fee;\\n        uint256 slippageFee;\\n    }\\n\\n    event Error(string reason);\\n\\n    event Deposited(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Withdrawn(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Swapped(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed srcToken,\\n        address dstToken,\\n        uint256 amount,\\n        uint256 result,\\n        uint256 srcAdditionBalance,\\n        uint256 dstRemovalBalance,\\n        address referral\\n    );\\n\\n    event Sync(\\n        uint256 srcBalance,\\n        uint256 dstBalance,\\n        uint256 fee,\\n        uint256 slippageFee,\\n        uint256 referralShare,\\n        uint256 governanceShare\\n    );\\n\\n    uint256 private constant _BASE_SUPPLY = 1000;  // Total supply on first deposit\\n\\n    IERC20 public immutable token0;\\n    IERC20 public immutable token1;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForAddition;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForRemoval;\\n\\n    modifier whenNotShutdown {\\n        require(mooniswapFactoryGovernance.isActive(), \\\"Mooniswap: factory shutdown\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        string memory name,\\n        string memory symbol,\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance\\n    )\\n        public\\n        ERC20(name, symbol)\\n        MooniswapGovernance(_mooniswapFactoryGovernance)\\n    {\\n        require(bytes(name).length > 0, \\\"Mooniswap: name is empty\\\");\\n        require(bytes(symbol).length > 0, \\\"Mooniswap: symbol is empty\\\");\\n        require(_token0 != _token1, \\\"Mooniswap: duplicate tokens\\\");\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function getTokens() external view returns(IERC20[] memory tokens) {\\n        tokens = new IERC20[](2);\\n        tokens[0] = token0;\\n        tokens[1] = token1;\\n    }\\n\\n    function tokens(uint256 i) external view returns(IERC20) {\\n        if (i == 0) {\\n            return token0;\\n        } else if (i == 1) {\\n            return token1;\\n        } else {\\n            revert(\\\"Pool has two tokens\\\");\\n        }\\n    }\\n\\n    function getBalanceForAddition(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        return Math.max(virtualBalancesForAddition[token].current(balance), balance);\\n    }\\n\\n    function getBalanceForRemoval(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        return Math.min(virtualBalancesForRemoval[token].current(balance), balance);\\n    }\\n\\n    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256) {\\n        return _getReturn(src, dst, amount, getBalanceForAddition(src), getBalanceForRemoval(dst), fee(), slippageFee());\\n    }\\n\\n    function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts) external returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        return depositFor(maxAmounts, minAmounts, msg.sender);\\n    }\\n\\n    function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target) public nonReentrant returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalSupply == 0) {\\n            fairSupply = _BASE_SUPPLY.mul(99);\\n            _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.max(fairSupply, maxAmounts[i]);\\n\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                require(maxAmounts[i] >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), maxAmounts[i]);\\n                receivedAmounts[i] = maxAmounts[i];\\n            }\\n        }\\n        else {\\n            uint256[2] memory realBalances;\\n            for (uint i = 0; i < realBalances.length; i++) {\\n                realBalances[i] = _tokens[i].balanceOf(address(this));\\n            }\\n\\n            // Pre-compute fair supply\\n            fairSupply = type(uint256).max;\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 fairSupplyCached = fairSupply;\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\n                require(amount >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), amount);\\n                receivedAmounts[i] = _tokens[i].balanceOf(address(this)).sub(realBalances[i]);\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                virtualBalancesForRemoval[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n                virtualBalancesForAddition[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n            }\\n        }\\n\\n        require(fairSupply > 0, \\\"Mooniswap: result is not enough\\\");\\n        _mint(target, fairSupply);\\n\\n        emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\n    }\\n\\n    function withdraw(uint256 amount, uint256[] memory minReturns) external returns(uint256[2] memory withdrawnAmounts) {\\n        return withdrawFor(amount, minReturns, msg.sender);\\n    }\\n\\n    function withdrawFor(uint256 amount, uint256[] memory minReturns, address target) public nonReentrant returns(uint256[2] memory withdrawnAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n        _burn(msg.sender, amount);\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            IERC20 token = _tokens[i];\\n\\n            uint256 preBalance = token.balanceOf(address(this));\\n            uint256 value = preBalance.mul(amount).div(totalSupply);\\n            token.safeTransfer(target, value);\\n            withdrawnAmounts[i] = value;\\n            require(i >= minReturns.length || value >= minReturns[i], \\\"Mooniswap: result is not enough\\\");\\n\\n            virtualBalancesForAddition[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\\n            virtualBalancesForRemoval[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\\n        }\\n\\n        emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\n    }\\n\\n    function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral) external returns(uint256 result) {\\n        return swapFor(src, dst, amount, minReturn, referral, msg.sender);\\n    }\\n\\n    function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address receiver) public nonReentrant whenNotShutdown returns(uint256 result) {\\n        Balances memory balances = Balances({\\n            src: src.balanceOf(address(this)),\\n            dst: dst.balanceOf(address(this))\\n        });\\n        uint256 confirmed;\\n        Balances memory virtualBalances;\\n        Fees memory fees = Fees({\\n            fee: fee(),\\n            slippageFee: slippageFee()\\n        });\\n        (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\n        emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\n        _mintRewards(confirmed, result, referral, balances, fees);\\n    }\\n\\n    function _doTransfers(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address receiver, Balances memory balances, Fees memory fees)\\n        private returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\n    {\\n        virtualBalances.src = virtualBalancesForAddition[src].current(balances.src);\\n        virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\n        virtualBalances.dst = virtualBalancesForRemoval[dst].current(balances.dst);\\n        virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\n        src.safeTransferFrom(msg.sender, address(this), amount);\\n        confirmed = src.balanceOf(address(this)).sub(balances.src);\\n        result = _getReturn(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\n        require(result > 0 && result >= minReturn, \\\"Mooniswap: return is not enough\\\");\\n        dst.safeTransfer(receiver, result);\\n\\n        // Update virtual balances to the same direction only at imbalanced state\\n        if (virtualBalances.src != balances.src) {\\n            virtualBalancesForAddition[src].set(virtualBalances.src.add(confirmed));\\n        }\\n        if (virtualBalances.dst != balances.dst) {\\n            virtualBalancesForRemoval[dst].set(virtualBalances.dst.sub(result));\\n        }\\n        // Update virtual balances to the opposite direction\\n        virtualBalancesForRemoval[src].update(balances.src);\\n        virtualBalancesForAddition[dst].update(balances.dst);\\n    }\\n\\n    function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees) private {\\n        (uint256 referralShare, uint256 governanceShare, address govWallet, address feeCollector) = mooniswapFactoryGovernance.shareParameters();\\n\\n        uint256 refReward;\\n        uint256 govReward;\\n\\n        uint256 invariantRatio = uint256(1e36);\\n        invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\n        invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\n        if (invariantRatio > 1e36) {\\n            // calculate share only if invariant increased\\n            invariantRatio = invariantRatio.sqrt();\\n            uint256 invIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\n\\n            refReward = (referral != address(0)) ? invIncrease.mul(referralShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n            govReward = (govWallet != address(0)) ? invIncrease.mul(governanceShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n\\n            if (feeCollector == address(0)) {\\n                if (refReward > 0) {\\n                    _mint(referral, refReward);\\n                }\\n                if (govReward > 0) {\\n                    _mint(govWallet, govReward);\\n                }\\n            }\\n            else if (refReward > 0 || govReward > 0) {\\n                uint256 len = (refReward > 0 ? 1 : 0) + (govReward > 0 ? 1 : 0);\\n                address[] memory wallets = new address[](len);\\n                uint256[] memory rewards = new uint256[](len);\\n\\n                wallets[0] = referral;\\n                rewards[0] = refReward;\\n                if (govReward > 0) {\\n                    wallets[len - 1] = govWallet;\\n                    rewards[len - 1] = govReward;\\n                }\\n\\n                try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\n                    _mint(feeCollector, refReward.add(govReward));\\n                }\\n                catch {\\n                    emit Error(\\\"updateRewards() failed\\\");\\n                }\\n            }\\n        }\\n\\n        emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, refReward, govReward);\\n    }\\n\\n    /*\\n        spot_ret = dx * y / x\\n        uni_ret = dx * y / (x + dx)\\n        slippage = (spot_ret - uni_ret) / spot_ret\\n        slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\n        slippage = dx / (x + dx)\\n        ret = uni_ret * (1 - slip_fee * slippage)\\n        ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\n        ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\n\\n        x = amount * denominator\\n        dx = amount * (denominator - fee)\\n    */\\n    function _getReturn(IERC20 src, IERC20 dst, uint256 amount, uint256 srcBalance, uint256 dstBalance, uint256 fee, uint256 slippageFee) internal view returns(uint256) {\\n        if (src > dst) {\\n            (src, dst) = (dst, src);\\n        }\\n        if (amount > 0 && src == token0 && dst == token1) {\\n            uint256 taxedAmount = amount.sub(amount.mul(fee).div(MooniswapConstants._FEE_DENOMINATOR));\\n            uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\n            uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\n            uint256 feeNumerator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\n            uint256 feeDenominator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\n            return ret.mul(feeNumerator).div(feeDenominator);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d44d4a9825a618f05eec844e9cc97add154512674176a2789ab5941336a8b5c\",\"license\":\"MIT\"},\"contracts/MooniswapDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Mooniswap.sol\\\";\\n\\ncontract MooniswapDeployer {\\n    function deploy(\\n        IERC20 token1,\\n        IERC20 token2,\\n        string calldata name,\\n        string calldata symbol,\\n        address poolOwner\\n    ) external returns(Mooniswap pool) {\\n        pool = new Mooniswap(\\n            token1,\\n            token2,\\n            name,\\n            symbol,\\n            IMooniswapFactoryGovernance(msg.sender)\\n        );\\n\\n        pool.transferOwnership(poolOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x25a6faffee2adc2c1ad37260406253e756b09de8fd24d14959fb2e0de4989d8d\",\"license\":\"MIT\"},\"contracts/governance/MooniswapGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactoryGovernance.sol\\\";\\nimport \\\"../libraries/LiquidVoting.sol\\\";\\nimport \\\"../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\n\\n\\nabstract contract MooniswapGovernance is ERC20, Ownable, ReentrancyGuard {\\n    using Vote for Vote.Data;\\n    using LiquidVoting for LiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeCast for uint256;\\n\\n    event FeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n    event SlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n\\n    IMooniswapFactoryGovernance public mooniswapFactoryGovernance;\\n    LiquidVoting.Data private _fee;\\n    LiquidVoting.Data private _slippageFee;\\n\\n    constructor(IMooniswapFactoryGovernance _mooniswapFactoryGovernance) internal {\\n        mooniswapFactoryGovernance = _mooniswapFactoryGovernance;\\n        _fee.data.result = _mooniswapFactoryGovernance.defaultFee().toUint104();\\n        _slippageFee.data.result = _mooniswapFactoryGovernance.defaultSlippageFee().toUint104();\\n    }\\n\\n    function setMooniswapFactoryGovernance(IMooniswapFactoryGovernance newMooniswapFactoryGovernance) external onlyOwner {\\n        mooniswapFactoryGovernance = newMooniswapFactoryGovernance;\\n        this.discardFeeVote();\\n        this.discardSlippageFeeVote();\\n    }\\n\\n    function fee() public view returns(uint256) {\\n        return _fee.data.current();\\n    }\\n\\n    function slippageFee() public view returns(uint256) {\\n        return _slippageFee.data.current();\\n    }\\n\\n    function virtualFee() external view returns(uint104, uint104, uint48) {\\n        return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\n    }\\n\\n    function virtualSlippageFee() external view returns(uint104, uint104, uint48) {\\n        return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\n    }\\n\\n    function feeVotes(address user) external view returns(uint256) {\\n        return _fee.votes[user].get(mooniswapFactoryGovernance.defaultFee);\\n    }\\n\\n    function slippageFeeVotes(address user) external view returns(uint256) {\\n        return _slippageFee.votes[user].get(mooniswapFactoryGovernance.defaultSlippageFee);\\n    }\\n\\n    function feeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function slippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function discardFeeVote() external {\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function discardSlippageFeeVote() external {\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function _emitFeeVoteUpdate(address account, uint256 newFee, bool isDefault, uint256 newBalance) private {\\n        emit FeeVoteUpdate(account, newFee, isDefault, newBalance);\\n    }\\n\\n    function _emitSlippageFeeVoteUpdate(address account, uint256 newSlippageFee, bool isDefault, uint256 newBalance) private {\\n        emit SlippageFeeVoteUpdate(account, newSlippageFee, isDefault, newBalance);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from == to) {\\n            // ignore transfers to self\\n            return;\\n        }\\n\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance = mooniswapFactoryGovernance;\\n        bool updateFrom = !(from == address(0) || _mooniswapFactoryGovernance.isFeeCollector(from));\\n        bool updateTo = !(to == address(0) || _mooniswapFactoryGovernance.isFeeCollector(to));\\n\\n        if (!updateFrom && !updateTo) {\\n            // mint to feeReceiver or burn from feeReceiver\\n            return;\\n        }\\n\\n        uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\n        uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\n        uint256 newTotalSupply = totalSupply()\\n            .add(from == address(0) ? amount : 0)\\n            .sub(to == address(0) ? amount : 0);\\n\\n        ParamsHelper memory params = ParamsHelper({\\n            from: from,\\n            to: to,\\n            updateFrom: updateFrom,\\n            updateTo: updateTo,\\n            amount: amount,\\n            balanceFrom: balanceFrom,\\n            balanceTo: balanceTo,\\n            newTotalSupply: newTotalSupply\\n        });\\n\\n        (uint256 defaultFee, uint256 defaultSlippageFee) = _mooniswapFactoryGovernance.defaults();\\n\\n        _updateOnTransfer(params, defaultFee, _emitFeeVoteUpdate, _fee);\\n        _updateOnTransfer(params, defaultSlippageFee, _emitSlippageFeeVoteUpdate, _slippageFee);\\n    }\\n\\n    struct ParamsHelper {\\n        address from;\\n        address to;\\n        bool updateFrom;\\n        bool updateTo;\\n        uint256 amount;\\n        uint256 balanceFrom;\\n        uint256 balanceTo;\\n        uint256 newTotalSupply;\\n    }\\n\\n    function _updateOnTransfer(\\n        ParamsHelper memory params,\\n        uint256 defaultValue,\\n        function(address, uint256, bool, uint256) internal emitEvent,\\n        LiquidVoting.Data storage votingData\\n    ) private {\\n        Vote.Data memory voteFrom = votingData.votes[params.from];\\n        Vote.Data memory voteTo = votingData.votes[params.to];\\n\\n        if (voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\n            emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\n            emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\n            return;\\n        }\\n\\n        if (params.updateFrom) {\\n            votingData.updateBalance(params.from, voteFrom, params.balanceFrom, params.balanceFrom.sub(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n\\n        if (params.updateTo) {\\n            votingData.updateBalance(params.to, voteTo, params.balanceTo, params.balanceTo.add(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3dcca03803c6ae225ab1bd706ed7482b88dd5d0c71cadfba946417e53c0b63f2\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IFeeCollector {\\n    function updateReward(address receiver, uint256 amount) external;\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x32a215750177362f8077d6e4cf48ae508e0b6565f20f8eaa4b130260bf238555\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactoryGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IMooniswapFactoryGovernance {\\n    function shareParameters() external view returns(uint256 referralShare, uint256 governanceShare, address governanceWallet, address referralFeeReceiver);\\n    function defaults() external view returns(uint256 defaultFee, uint256 defaultSlippageFee);\\n\\n    function defaultFee() external view returns(uint256);\\n    function defaultSlippageFee() external view returns(uint256);\\n\\n    function virtualDefaultFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultSlippageFee() external view returns(uint104, uint104, uint48);\\n\\n    function referralShare() external view returns(uint256);\\n    function governanceShare() external view returns(uint256);\\n    function governanceWallet() external view returns(address);\\n    function feeCollector() external view returns(address);\\n\\n    function isFeeCollector(address) external view returns(bool);\\n    function isActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6ca0e9c05419b5fe05ea3e46246079c2392f6269ca54d33ba05518547c0069a\",\"license\":\"MIT\"},\"contracts/libraries/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary LiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _defaultVotes;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 totalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldDefaultVotes = self._defaultVotes;\\n        uint256 newDefaultVotes = oldDefaultVotes;\\n\\n        if (oldVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.sub(oldBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n        }\\n\\n        if (newVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.add(newBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newDefaultVotes != oldDefaultVotes) {\\n            self._defaultVotes = newDefaultVotes;\\n        }\\n\\n        {\\n            uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).div(newTotalSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x0300c61b4bba9a58097ec0a843d04b42260f705dbc68bf3bbcc9e9011ffdfd7a\",\"license\":\"MIT\"},\"contracts/libraries/MooniswapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary MooniswapConstants {\\n    uint256 internal constant _FEE_DENOMINATOR = 1e18;\\n\\n    uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\n    uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\n\\n    uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\n    uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\n\\n    uint256 internal constant _DEFAULT_FEE = 0;\\n    uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\n    uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\n}\\n\",\"keccak256\":\"0x9f6421e5cf8734fbf5670148f3d6030b69aaeba473933f9a07fd3766fdaf1733\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary SafeCast {\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n}\\n\",\"keccak256\":\"0x6f5e3e3d0bc762c2defe32c7bc62309cd7e60776bb5dc0d059a1bcf0874b4c51\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: non-zero to non-zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: operation failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4cc1b6b3b02d033719e1261afde66c209064899827c63a92faa50d9238c301b4\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary Sqrt {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256) {\\n        if (y > 3) {\\n            uint256 z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n            return z;\\n        } else if (y != 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5674ed7d1bb3655d9d6698ff6175cb23261d8cf837915d0af70404aa019b5267\",\"license\":\"MIT\"},\"contracts/libraries/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./MooniswapConstants.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n\\nlibrary VirtualBalance {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    struct Data {\\n        uint216 balance;\\n        uint40 time;\\n    }\\n\\n    function set(VirtualBalance.Data storage self, uint256 balance) internal {\\n        (self.balance, self.time) = (\\n            balance.toUint216(),\\n            block.timestamp.toUint40()\\n        );\\n    }\\n\\n    function update(VirtualBalance.Data storage self, uint256 realBalance) internal {\\n        set(self, current(self, realBalance));\\n    }\\n\\n    function scale(VirtualBalance.Data storage self, uint256 realBalance, uint256 num, uint256 denom) internal {\\n        set(self, current(self, realBalance).mul(num).add(denom.sub(1)).div(denom));\\n    }\\n\\n    function current(VirtualBalance.Data memory self, uint256 realBalance) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(MooniswapConstants._DEFAULT_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = MooniswapConstants._DEFAULT_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.balance).mul(timeRemain).add(\\n            realBalance.mul(timePassed)\\n        ).div(MooniswapConstants._DEFAULT_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0x4b76426258b1819ccc958c06ab7ec3d6375b594ee9a8f86e4b01949b71e3aa26\",\"license\":\"MIT\"},\"contracts/libraries/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary VirtualVote {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\n\\n    struct Data {\\n        uint104 oldResult;\\n        uint104 result;\\n        uint48 time;\\n    }\\n\\n    function current(VirtualVote.Data memory self) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.oldResult).mul(timeRemain).add(\\n            uint256(self.result).mul(timePassed)\\n        ).div(_VOTE_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0xd62c910eb9b206eb6c2230be6c964824693fbe52436e53c3e69f02a84aa7c63d\",\"license\":\"MIT\"},\"contracts/libraries/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nlibrary Vote {\\n    struct Data {\\n        uint256 value;\\n    }\\n\\n    function eq(Vote.Data memory self, Vote.Data memory vote) internal pure returns(bool) {\\n        return self.value == vote.value;\\n    }\\n\\n    function init() internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: 0\\n        });\\n    }\\n\\n    function init(uint256 vote) internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: vote + 1\\n        });\\n    }\\n\\n    function isDefault(Data memory self) internal pure returns(bool) {\\n        return self.value == 0;\\n    }\\n\\n    function get(Data memory self, uint256 defaultVote) internal pure returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVote;\\n    }\\n\\n    function get(Data memory self, function() external view returns(uint256) defaultVoteFn) internal view returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVoteFn();\\n    }\\n}\\n\",\"keccak256\":\"0xa31a88aebf9a52ea8c02e611cd798631e7296b78e9ecdf37d2b0c7eb2badb252\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156100195760008061001661001f565b50505b5061008a565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561005757808601518282016040015260200161003c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b615de6806100996000396000f3fe60806040523480156200001c57600080620000196200030f565b50505b5060043610620000395760003560e01c8063b92440b01462000049575b600080620000466200030f565b50505b6200017f600480360360a08110156200006c57600080620000696200030f565b50505b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b811115620000ab57600080620000a86200030f565b50505b820183602082011115620000c957600080620000c66200030f565b50505b803590602001918460018302840111600160201b83111715620000f657600080620000f36200030f565b50505b919390929091602081019035600160201b8111156200011f576000806200011c6200030f565b50505b8201836020820111156200013d576000806200013a6200030f565b50505b803590602001918460018302840111600160201b831117156200016a57600080620001676200030f565b50505b9193509150356001600160a01b03166200019b565b6040516001600160a01b03909116815260200160405180910390f35b60008787878787875a620001ae6200037c565b604051620001bc90620003d8565b6001600160a01b03808916825287811660208301528216608082015260a0604082018181529082018690526060820160c08301888880828437600083820152601f01601f191690910184810383528681526020019050868680828437600083820152601f01601f19169091019a50604099505050505050505050505180910390600062000248620003e6565b50508015801562000268573d6000803e3d6000620002656200030f565b50505b509050806001600160a01b031663f2fde38b836040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160006040518083038160008780620002b962000472565b158015620002d157600080620002ce6200030f565b50505b505a620002dd620004bf565b50505050505015801562000300573d6000803e3d6000620002fd6200030f565b50505b50505050979650505050505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015620003495780860151828201604001526020016200032c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015620003d357600082820152602001620003ba565b505050565b61582e80620005b883390190565b6314aa2ff7598160e01b8152600481016020815286602082015260005b878110156200042057808701518282016040015260200162000403565b506020828860640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8151965059825b818110156200046b576000815260200162000455565b5050505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020620003ba565b6385979f76598160e01b8152620004f5565b8080831115620004de5750815b92915050565b8080831015620004de575090919050565b836004820152846024820152606060448201528760648201526084810160005b898110156200052f57808901518282015260200162000515565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af15059620005868e3d620004e4565b8d01620005948187620004d1565b5b82811015620005ab576000815260200162000595565b50929d5050505050505056fe60c06040523480156200001c57600080620000196200055c565b50505b506040516200582e3803806200582e833981810160405260a08110156200004d576000806200004a6200055c565b50505b8101908080519291906020018051929190602001805160405193929190846401000000008211156200008957600080620000866200055c565b50505b908301906020820185811115620000aa57600080620000a76200055c565b50505b8251640100000000811182820188101715620000d057600080620000cd6200055c565b50505b825250602001908051906020019080838360005b83811015620000fe578082015183820152602001620000e4565b50505050905090810190601f1680156200012c5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200015b57600080620001586200055c565b50505b9083019060208201858111156200017c57600080620001796200055c565b50505b8251640100000000811182820188101715620001a2576000806200019f6200055c565b50505b825250602001908051906020019080838360005b83811015620001d0578082015183820152602001620001b6565b50505050905090810190601f168015620001fe5780820380516001836020036101000a031916815260200191505b506040526020018051925082915084905083600382805162000225929160200190620005c9565b5060048180516200023b929160200190620005c9565b50601260056001816200024d62000674565b8160ff021916908360ff1602179062000265620006d6565b505050505060006200027c6200052860201b60201c565b9050806005610100816200028f62000674565b816001600160a01b0302191690836001600160a01b0316021790620002b3620006d6565b5050506001600160a01b03811660007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506001806006620002fe620006d6565b50505080600760006101000a816200031562000674565b816001600160a01b0302191690836001600160a01b031602179062000339620006d6565b505050620003fa816001600160a01b0316635a6c72d06040518163ffffffff1660e01b815260040160206040518083038186806200037662000725565b1580156200038e576000806200038b6200055c565b50505b505a6200039a62000772565b5050505050158015620003bc573d6000803e3d6000620003b96200055c565b50505b505050506040513d6020811015620003de57600080620003db6200055c565b50505b810190808051925050506200053a602090811b62002cc317901c565b6008600160681b816200040c62000674565b816001600160681b0302191690836001600160681b031602179062000430620006d6565b5050506200046d816001600160a01b03166323662bb96040518163ffffffff1660e01b815260040160206040518083038186806200037662000725565b600c600160681b816200047f62000674565b816001600160681b0302191690836001600160681b0316021790620004a3620006d6565b505050506000835111620004c157600080620004be6200055c565b50505b6000825111620004db57600080620004d86200055c565b50505b836001600160a01b0316856001600160a01b031614156200050657600080620005036200055c565b50505b5050506001600160601b0319606092831b8116608052911b1660a052620008d4565b60005a620005356200086a565b905090565b6000600160681b82106200055857600080620005556200055c565b50505b5090565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156200059657808601518282016040015260200162000579565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b8280620005d562000674565b600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200062057805160ff1916838001178562000618620006d6565b505062000666565b8280016001018562000631620006d6565b5050821562000666579182015b82811115620006665782518262000654620006d6565b5050916020019190600101906200063e565b5062000558929150620008b1565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015620006d157600082820152602001620006b8565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020620006b8565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020620006b8565b638540661f598160e01b8152620007a8565b8080831115620007915750815b92915050565b808083101562000791575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015620007e2578088015182820152602001620007c8565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059620008398d3d62000797565b8c0162000847818762000784565b5b828110156200085e576000815260200162000848565b50929c50505050505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020620006b8565b80821115620005585760008082620008c8620006d6565b505050600101620008b1565b60805160601c60a05160601c614efe62000930600039806111f45280611504528061192c528061218952806123e75280612f02525080610da052806111cf52806114d45280611907528061213b5280612ec55250614efe6000f3fe6080604052348015610019576000806100166149e6565b50505b50600436106101ec5760003560e01c806306fdde03146101fa57806307a8007014610279578063095ea7b3146102a15780630dfe1681146102ea57806311212d661461030e57806318160ddd146103345780631e1401f81461034e57806323b872dd1461038d57806323e8cae1146103cc5780633049105d14610412578063313ce567146104dc5780633732b394146104fa57806339509351146105025780633c6216a6146105375780634f64b2be146106465780635915d8061461066c5780635ed9156d146107385780636669302a146107905780636edc2c091461079857806370a08231146107c7578063715018a6146107f65780638da5cb5b146107fe57806393028d831461080657806395cad3c71461080e57806395d89b411461083d5780639aad141b146108455780639ea5ce0a14610874578063a457c2d714610908578063a9059cbb1461093d578063aa6ca80814610972578063c40d4d66146109b5578063d21220a7146109e4578063d5bcb9b5146109ec578063d7d3aab514610a39578063d9a0c21714610a68578063dd62ed3e14610a70578063ddca3f4314610aa7578063e331d03914610aaf578063e7ff42c914610b02578063f1ea604214610b31578063f2fde38b14610b39575b6000806101f76149e6565b50505b610202610b68565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561023e578082015183820152602001610226565b50505050905090810190601f16801561026b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61029f60048036036020811015610298576000806102956149e6565b50505b5035610c25565b005b6102d6600480360360408110156102c0576000806102bd6149e6565b50505b506001600160a01b038135169060200135610d80565b604051901515815260200160405180910390f35b6102f2610d9e565b6040516001600160a01b03909116815260200160405180910390f35b61029f6004803603602081101561032d5760008061032a6149e6565b50505b5035610dc2565b61033c610f14565b60405190815260200160405180910390f35b61033c6004803603606081101561036d5760008061036a6149e6565b50505b506001600160a01b03813581169160208101359091169060400135610f25565b6102d6600480360360608110156103ac576000806103a96149e6565b50505b506001600160a01b03813581169160208101359091169060400135610f5e565b6103d4610ff2565b60405180846001600160681b03168152602001836001600160681b031681526020018265ffffffffffff168152602001935050505060405180910390f35b61049d600480360360808110156104315760008061042e6149e6565b50505b81019080806040019060028060200260405190810160405280929190826002602002808284376000920191909152509194939260408082019350909150600290805190810160405280929190826002602002808284376000920191909152509194506110579350505050565b6040518281526020810182604080838360005b838110156104c85780820151838201526020016104b0565b505050509050019250505060405180910390f35b6104e461107f565b60405160ff909116815260200160405180910390f35b61033c61109b565b6102d6600480360360408110156105215760008061051e6149e6565b50505b506001600160a01b038135169060200135611116565b61060e60048036036060811015610556576000806105536149e6565b50505b81359190810190604081016020820135600160201b8111156105805760008061057d6149e6565b50505b82018360208201111561059b576000806105986149e6565b50505b803590602001918460208302840111600160201b831117156105c5576000806105c26149e6565b50505b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b0316915061117b9050565b6040518082604080838360005b8381101561063357808201518382015260200161061b565b5050505090500191505060405180910390f35b6102f260048036036020811015610665576000806106626149e6565b50505b50356114ca565b61060e6004803603604081101561068b576000806106886149e6565b50505b81359190810190604081016020820135600160201b8111156106b5576000806106b26149e6565b50505b8201836020820111156106d0576000806106cd6149e6565b50505b803590602001918460208302840111600160201b831117156106fa576000806106f76149e6565b50505b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061153b945050505050565b61076760048036036020811015610757576000806107546149e6565b50505b50356001600160a01b0316611556565b6040516001600160d81b03909216825264ffffffffff1660208201526040908101905180910390f35b61029f6115a2565b610767600480360360208110156107b7576000806107b46149e6565b50505b50356001600160a01b03166115fd565b61033c600480360360208110156107e6576000806107e36149e6565b50505b50356001600160a01b0316611618565b61029f611638565b6102f26116e5565b61029f611708565b61033c6004803603602081101561082d5760008061082a6149e6565b50505b50356001600160a01b0316611761565b6102026117bb565b61033c60048036036020811015610864576000806108616149e6565b50505b50356001600160a01b0316611861565b61049d600480360360a0811015610893576000806108906149e6565b50505b81019080806040019060028060200260405190810160405280929190826002602002808284376000920191909152509194939260408082019350909150600290805190810160405280929190826002602002808284376000920191909152509194505050356001600160a01b031690506118b1565b6102d660048036036040811015610927576000806109246149e6565b50505b506001600160a01b03813516906020013561207f565b6102d66004803603604081101561095c576000806109596149e6565b50505b506001600160a01b0381351690602001356120f5565b61097a612109565b6040516020808252819081018381815181526020019150805160209182019102808383600083156104c85780820151838201526020016104b0565b61029f600480360360208110156109d4576000806109d16149e6565b50505b50356001600160a01b03166121d8565b6102f26123e5565b61033c600480360360a0811015610a0b57600080610a086149e6565b50505b506001600160a01b038135811691602081013582169160408201359160608101359160809091013516612409565b61033c60048036036020811015610a5857600080610a556149e6565b50505b50356001600160a01b031661242b565b6102f26125b3565b61033c60048036036040811015610a8f57600080610a8c6149e6565b50505b506001600160a01b03813581169160200135166125d2565b61033c61260b565b61033c600480360360c0811015610ace57600080610acb6149e6565b50505b506001600160a01b0381358116916020810135821691604082013591606081013591608082013581169160a0013516612629565b61033c60048036036020811015610b2157600080610b1e6149e6565b50505b50356001600160a01b0316612a5a565b6103d4612ba7565b61029f60048036036020811015610b5857600080610b556149e6565b50505b50356001600160a01b0316612bf2565b6060600380610b75614a51565b600181600116156101000203166002900480601f016020809104026020016040519081016040528181529190602083018280610baf614a51565b60018160011615610100020316600290048015610c1b5780601f10610be9576101008083610bdb614a51565b040283529160200191610c1b565b820191906000526020600020905b81610c00614a51565b81529060010190602001808311610bf757829003601f168201915b5050505050905090565b670de0b6b3a7640000811115610c4357600080610c406149e6565b50505b610d7d5a610c4f614aac565b600f60005a610c5c614aac565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181610c91614a51565b905250610c9d84612ce2565b610cae5a610ca9614aac565b611618565b610cb6610f14565b60006007610cc2614a51565b906101000a90046001600160a01b03166001600160a01b03166323662bb96040518163ffffffff1660e01b81526004016020604051808303818680610d05614af2565b158015610d1a57600080610d176149e6565b50505b505a610d24614b3e565b5050505050158015610d43573d6000803e3d6000610d406149e6565b50505b505050506040513d6020811015610d6257600080610d5f6149e6565b50505b810190808051600c989796959493509150612d009050612d57565b50565b6000610d94610d8d612d72565b8484612d7d565b5060015b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b662386f26fc10000811115610ddf57600080610ddc6149e6565b50505b610d7d5a610deb614aac565b600b60005a610df8614aac565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181610e2d614a51565b905250610e3984612ce2565b610e455a610ca9614aac565b610e4d610f14565b60006007610e59614a51565b906101000a90046001600160a01b03166001600160a01b0316635a6c72d06040518163ffffffff1660e01b81526004016020604051808303818680610e9c614af2565b158015610eb157600080610eae6149e6565b50505b505a610ebb614b3e565b5050505050158015610eda573d6000803e3d6000610ed76149e6565b50505b505050506040513d6020811015610ef957600080610ef66149e6565b50505b8101908080516008989796959493509150612e419050612d57565b60006002610f20614a51565b905090565b6000610f54848484610f368861242b565b610f3f88612a5a565b610f4761260b565b610f4f61109b565b612e98565b90505b9392505050565b6000610f6b848484612fdf565b610fe884610f77612d72565b610fe385604051606081016040526028808252614e7160208301396001600160a01b038a1660009081526001602052604090206000610fb4612d72565b6001600160a01b03166001600160a01b03168152602001908152602001600020610fdc614a51565b9190613107565b612d7d565b5060019392505050565b6000808080600c611001614a51565b6001600160681b036101009290920a900416600d600c61101f614a51565b6001600160681b036101009290920a900416601a600c61103d614a51565b906101000a900465ffffffffffff16925092509250909192565b6000611061614c29565b61107484845a61106f614aac565b6118b1565b915091509250929050565b600080600561108c614a51565b906101000a900460ff16905090565b6000610f20600c6040516060810160405290816000826110b9614a51565b6001600160681b036101009290920a9004168152602001600d826110db614a51565b6001600160681b036101009290920a9004168152602001601a826110fd614a51565b65ffffffffffff6101009290920a900416905250613126565b6000610d94611123612d72565b84610fe38560016000611134612d72565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038916600090815260209190915260409020611175614a51565b9061319b565b611183614c29565b6002600661118f614a51565b14156111a3576000806111a06149e6565b50505b60028060066111b0614c44565b5050506111bb614c29565b604051604080820190526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602082015290506000611225610f14565b90506112395a611233614aac565b876131bc565b60005b600281101561144757600083826002811061125357fe5b602002015190506000816001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156112c1576000828201526020016112aa565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806112fe614af2565b158015611313576000806113106149e6565b50505b505a61131d614b3e565b505050505015801561133c573d6000803e3d60006113396149e6565b50505b505050506040513d602081101561135b576000806113586149e6565b50505b81019080805193506000925061137f9150869050611379848d613292565b906132bf565b90506113956001600160a01b03841689836132e7565b808785600281106113a257fe5b60200201528851841015806113ca57508884815181106113be57fe5b60200260200101518110155b6113dc576000806113d96149e6565b50505b61140c826113ea878d613343565b6001600160a01b03861660009081526010602052889060409020929190613361565b61143c8261141a878d613343565b6001600160a01b03861660009081526011602052889060409020929190613361565b50505060010161123c565b50836001600160a01b03165a61145b614aac565b6001600160a01b03167f3cae9923fd3c2f468aa25a8ef687923e37f957459557c0380fd06526c0b8cdbc888651602088015160405180848152602001838152602001828152602001935050505060405180910390a350506001600681906114c0614c44565b5050509392505050565b6000816114f857507f0000000000000000000000000000000000000000000000000000000000000000611536565b816001141561152857507f0000000000000000000000000000000000000000000000000000000000000000611536565b6000806115336149e6565b50505b919050565b611543614c29565b610f5783835a611551614aac565b61117b565b60116020528060005260406000209050600081611571614a51565b6001600160d81b036101009290920a90041690601b8161158f614a51565b906101000a900464ffffffffff16905082565b6115fb5a6115ae614aac565b600f60005a6115bb614aac565b6001600160a01b03166001600160a01b03168152602001908152602001600020604051602081016040529081816115f0614a51565b905250610c9d6133dc565b565b60106020528060005260406000209050600081611571614a51565b6001600160a01b0381166000908152602081905260408120610d98614a51565b611640612d72565b6001600160a01b03166116516116e5565b6001600160a01b03161461166d5760008061166a6149e6565b50505b60006001600561167b614a51565b906101000a90046001600160a01b03166001600160a01b0316600080516020614e9983398151915260405160405180910390a360006005610100816116be614a51565b816001600160a01b0302191690836001600160a01b03160217906116e0614c44565b505050565b6000600160056116f3614a51565b906101000a90046001600160a01b0316905090565b6115fb5a611714614aac565b600b60005a611721614aac565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181611756614a51565b905250610e396133dc565b6000610d98816007611771614a51565b6001600160a01b038581166000908152600f6020526101009390930a90910416906323662bb99060409020604051602081016040529081816117b1614a51565b90525091906133f7565b60606004806117c8614a51565b600181600116156101000203166002900480601f016020809104026020016040519081016040528181529190602083018280611802614a51565b60018160011615610100020316600290048015610c1b5780601f1061182e576101008083610bdb614a51565b820191906000526020600020905b81611845614a51565b8152906001019060200180831161183c57509395945050505050565b6000610d98816007611871614a51565b6001600160a01b038581166000908152600b6020526101009390930a9091041690635a6c72d09060409020604051602081016040529081816117b1614a51565b60006118bb614c29565b600260066118c7614a51565b14156118db576000806118d86149e6565b50505b60028060066118e8614c44565b5050506118f3614c29565b604051604080820190526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201529050600061195d610f14565b905080611b23576119716103e86063613292565b93506119d75a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156119cc576000828201526020016119b5565b5050506103e86134a3565b60005b6002811015611b1d576119fd858983600281106119f357fe5b6020020151613563565b94506000888260028110611a0d57fe5b602002015111611a2557600080611a226149e6565b50505b868160028110611a3157fe5b6020020151888260028110611a4257fe5b60200201511015611a5b57600080611a586149e6565b50505b611af35a611a67614aac565b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015611abd57600082820152602001611aa6565b5050508a8460028110611acc57fe5b6020020151868560028110611add57fe5b60200201516001600160a01b031692919061357a565b878160028110611aff57fe5b6020020151848260028110611b1057fe5b60200201526001016119da565b50611fdc565b611b2b614c29565b60005b6002811015611c6b57838160028110611b4357fe5b60200201516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015611bac57600082820152602001611b95565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611be9614af2565b158015611bfe57600080611bfb6149e6565b50505b505a611c08614b3e565b5050505050158015611c27573d6000803e3d6000611c246149e6565b50505b505050506040513d6020811015611c4657600080611c436149e6565b50505b810190808051925084915083905060028110611c5e57fe5b6020020152600101611b2e565b50600019945060005b6002811015611cbf57611cb586611cb0848460028110611c9057fe5b60200201516113798d8660028110611ca457fe5b60200201518890613292565b6135e3565b9550600101611c74565b508460005b6002811015611f385760008a8260028110611cdb57fe5b602002015111611cf357600080611cf06149e6565b50505b6000611d1b856113796001880361117587898860028110611d1057fe5b602002015190613292565b9050898260028110611d2957fe5b6020020151811015611d4357600080611d406149e6565b50505b611db55a611d4f614aac565b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015611da557600082820152602001611d8e565b50505083898660028110611add57fe5b611ee9848360028110611dc457fe5b6020020151878460028110611dd557fe5b60200201516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015611e3e57600082820152602001611e27565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611e7b614af2565b158015611e9057600080611e8d6149e6565b50505b505a611e9a614b3e565b5050505050158015611eb9573d6000803e3d6000611eb66149e6565b50505b505050506040513d6020811015611ed857600080611ed56149e6565b50505b810190808051939250506133439050565b878360028110611ef557fe5b6020020152611f2d88611cb0868560028110611f0d57fe5b60200201516113798b8760028110611f2157fe5b60200201518a90613292565b975050600101611cc4565b5060005b6002811015611fd857611fa1838260028110611f5457fe5b6020020151611f63868a61319b565b86601160008a8760028110611f7457fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020929190613361565b611fd0838260028110611fb057fe5b6020020151611fbf868a61319b565b86601060008a8760028110611f7457fe5b600101611f3c565b5050505b60008411611ff257600080611fef6149e6565b50505b611ffc85856134a3565b846001600160a01b03165a61200f614aac565b6001600160a01b03167f8bab6aed5a508937051a144e61d6e61336834a66aaee250a00613ae6f744c422868651602088015160405180848152602001838152602001828152602001935050505060405180910390a35050600160068190612074614c44565b505050935093915050565b6000610d9461208c612d72565b84610fe385604051606081016040526025808252614ed96020830139600160006120b4612d72565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038a16600090815260209190915260409020610fdc614a51565b6000610d94612102612d72565b8484612fdf565b60606002604051908082528060200260200182016040528015612136578160200160208202803683370190505b5090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061216757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816001815181106121b557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505090565b6121e0612d72565b6001600160a01b03166121f16116e5565b6001600160a01b03161461220d5760008061220a6149e6565b50505b80600760018161221b614a51565b816001600160a01b0302191690836001600160a01b031602179061223d614c44565b5050505a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156122965760008282015260200161227f565b5050506001600160a01b03166393028d836040518163ffffffff1660e01b8152600401600060405180830381600087806122ce614af2565b1580156122e3576000806122e06149e6565b50505b505a6122ed614c92565b50505050505015801561230d573d6000803e3d600061230a6149e6565b50505b505050505a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561236757600082820152602001612350565b5050506001600160a01b0316636669302a6040518163ffffffff1660e01b81526004016000604051808303816000878061239f614af2565b1580156123b4576000806123b16149e6565b50505b505a6123be614c92565b5050505050501580156123de573d6000803e3d60006123db6149e6565b50505b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061242186868686865a61241c614aac565b612629565b9695505050505050565b600080826001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156124935760008282015260200161247c565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806124d0614af2565b1580156124e5576000806124e26149e6565b50505b505a6124ef614b3e565b505050505015801561250e573d6000803e3d600061250b6149e6565b50505b505050506040513d602081101561252d5760008061252a6149e6565b50505b8101908080516001600160a01b03871660009081526010602052909450610f5793506125ad925084915060409020604051604080820190529081600082612572614a51565b6001600160d81b036101009290920a9004168152602001601b82612594614a51565b64ffffffffff6101009290920a900416905250906135f2565b82613563565b600060076125bf614a51565b906101000a90046001600160a01b031681565b6001600160a01b03821660009081526001602052604081206001600160a01b038316600090815260209190915260409020610f57614a51565b6000610f2060086040516060810160405290816000826110b9614a51565b600060026006612637614a51565b141561264b576000806126486149e6565b50505b6002806006612658614c44565b5050506007600090612668614a51565b906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186806126ab614af2565b1580156126c0576000806126bd6149e6565b50505b505a6126ca614b3e565b50505050501580156126e9573d6000803e3d60006126e66149e6565b50505b505050506040513d6020811015612708576000806127056149e6565b50505b8101908080519250612725915050576000806127226149e6565b50505b61272d614d58565b6040518060400160405280896001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561279d57600082820152602001612786565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806127da614af2565b1580156127ef576000806127ec6149e6565b50505b505a6127f9614b3e565b5050505050158015612818573d6000803e3d60006128156149e6565b50505b505050506040513d6020811015612837576000806128346149e6565b50505b81019080805184525050506020016001600160a01b0389166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156128aa57600082820152602001612893565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806128e7614af2565b1580156128fc576000806128f96149e6565b50505b505a612906614b3e565b5050505050158015612925573d6000803e3d60006129226149e6565b50505b505050506040513d6020811015612944576000806129416149e6565b50505b810190808051909352509192506000915061295f9050614d58565b612967614d58565b604051806040016040528061297a61260b565b815260200161298761109b565b9052905061299a8b8b8b8b8a8987613653565b90965090935091506001600160a01b03808c169087165a6129b9614aac565b6001600160a01b03167fbd99c6719f088aa0abd9e7b7a4a635d1f931601e9f304b538dc42be25d8c65c68d878a885189602001518f6040516001600160a01b03968716815260208101959095526040808601949094526060850192909252608084015290921660a082015260c001905180910390a4612a3b83868987856138e4565b50505050600160068190612a4d614c44565b5050509695505050505050565b600080826001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015612ac257600082820152602001612aab565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680612aff614af2565b158015612b1457600080612b116149e6565b50505b505a612b1e614b3e565b5050505050158015612b3d573d6000803e3d6000612b3a6149e6565b50505b505050506040513d6020811015612b5c57600080612b596149e6565b50505b8101908080516001600160a01b03871660009081526011602052909450610f579350612ba1925084915060409020604051604080820190529081600082612572614a51565b826135e3565b60008080806008612bb6614a51565b6001600160681b036101009290920a900416600d6008612bd4614a51565b6001600160681b036101009290920a900416601a600861103d614a51565b612bfa612d72565b6001600160a01b0316612c0b6116e5565b6001600160a01b031614612c2757600080612c246149e6565b50505b6001600160a01b038116612c4357600080612c406149e6565b50505b6001600160a01b03811660016005612c59614a51565b906101000a90046001600160a01b03166001600160a01b0316600080516020614e9983398151915260405160405180910390a380600561010081612c9b614a51565b816001600160a01b0302191690836001600160a01b0316021790612cbd614c44565b50505050565b6000600160681b8210612cde57600080612cdb6149e6565b50505b5090565b612cea614d6f565b6040516020810160405260019290920182525090565b836001600160a01b03167fce0cf859d853e1944032294143a1bf3ad799998ae77acbeb6c4d9b20d691024084848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b612d68888888888889898989613e46565b5050505050505050565b60005a610f20614aac565b6001600160a01b038316612d9957600080612d966149e6565b50505b6001600160a01b038216612db557600080612db26149e6565b50505b6001600160a01b038316600090815260016020528190604090206001600160a01b0384166000908152602091909152604090208190612df2614c44565b505050816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405190815260200160405180910390a3505050565b836001600160a01b03167fe117cae46817b894b41a4412b73ae0ba746a5707b94e02d83b4c6502010b11ac84848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b6000866001600160a01b0316886001600160a01b03161115612eb8579596955b600086118015612ef957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b0316145b8015612f3657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b0316145b15612fd4576000612f5d612f56670de0b6b3a76400006113798a88613292565b8890613343565b90506000612f6b878361319b565b90506000612f7d82611379858a613292565b90506000612fa6612f8e8786613292565b612fa0670de0b6b3a764000086613292565b90613343565b90506000612fbc670de0b6b3a764000085613292565b9050612fcc816113798585613292565b955050505050505b979650505050505050565b6001600160a01b038316612ffb57600080612ff86149e6565b50505b6001600160a01b038216613017576000806130146149e6565b50505b613022838383614112565b61305d81604051606081016040526026808252614e4b60208301396001600160a01b0386166000908152602081905260409020610fdc614a51565b6001600160a01b0384166000908152602081905260409020819061307f614c44565b5050506001600160a01b038216600090815260208190526130a890829060409020611175614a51565b6001600160a01b038316600090815260208190526040902081906130ca614c44565b505050816001600160a01b0316836001600160a01b0316600080516020614eb98339815191528360405190815260200160405180910390a3505050565b60008383111561311f5760008061311c6149e6565b50505b5050900390565b60008061314962015180611cb0856040015165ffffffffffff165a612fa0614d80565b9050600061315a6201518083613343565b90506131936201518061137961317e8588602001516001600160681b031690613292565b6111758589516001600160681b031690613292565b949350505050565b600082820183811015610f57576000806131b36149e6565b50509392505050565b6001600160a01b0382166131d8576000806131d56149e6565b50505b6131e482600083614112565b61321f81604051606081016040526022808252614e2960208301396001600160a01b0385166000908152602081905260409020610fdc614a51565b6001600160a01b03831660009081526020819052604090208190613241614c44565b505050613252816002612fa0614a51565b80600261325d614c44565b5060009150506001600160a01b038316600080516020614eb98339815191528360405190815260200160405180910390a35050565b6000826132a157506000610d98565b828202828482816132ae57fe5b0414610f57576000806131b36149e6565b60008082116132d6576000806132d36149e6565b50505b8183816132df57fe5b049392505050565b6116e08363a9059cbb60e01b84846040516001600160a01b0390921660248301526044820152606401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b031690911790526144bc565b60008282111561335b576000806133586149e6565b50505b50900390565b612cbd846133d783611379613377826001613343565b611175886133d18c604051604080820190529081600082613396614a51565b6001600160d81b036101009290920a9004168152602001601b826133b8614a51565b64ffffffffff6101009290920a9004169052508c6135f2565b90613292565b61454a565b6133e4614d6f565b6040516020810160405260008152905090565b6000808451111561340e5760018451039050610f57565b82826040518163ffffffff1660e01b81526004016020604051808303818680613435614af2565b15801561344a576000806134476149e6565b50505b505a613454614b3e565b5050505050158015613473573d6000803e3d60006134706149e6565b50505b505050506040513d60208110156134925760008061348f6149e6565b50505b810190808051979650505050505050565b6001600160a01b0382166134bf576000806134bc6149e6565b50505b6134cb60008383614112565b6134d9816002611175614a51565b8060026134e4614c44565b5050506001600160a01b0382166000908152602081905261350d90829060409020611175614a51565b6001600160a01b0383166000908152602081905260409020819061352f614c44565b5050506001600160a01b0382166000600080516020614eb98339815191528360405190815260200160405180910390a35050565b6000818310156135735781610f57565b5090919050565b612cbd846323b872dd60e01b8585856040516001600160a01b0393841660248201529190921660448201526064810191909152608401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b031690911790526144bc565b60008183106135735781610f57565b600080613612603c611cb0866020015164ffffffffff165a612fa0614d80565b90506000613621603c83613343565b905061364a603c6113796136358786613292565b611175858a516001600160d81b031690613292565b95945050505050565b60008061365e614d58565b61369285516001600160a01b038c166000908152601060205260409020604051604080820190529081600082612572614a51565b81526136a081518651613563565b81526136d960208601516001600160a01b038b166000908152601160205260409020604051604080820190529081600082612572614a51565b602082019081526136ef905186602001516135e3565b602082015261376b5a613700614aac565b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156137565760008282015260200161373f565b5050506001600160a01b038d1691908b61357a565b6137c685518b6001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825292506020611e27565b92506137e18a8a858451856020015189518a60200151612e98565b91506000821180156137f35750868210155b613805576000806138026149e6565b50505b6138196001600160a01b038a1687846132e7565b845181511461384f5761384f6138318483519061319b565b6001600160a01b038c1660009081526010602052604090209061454a565b846020015181602001511461388e5761388e61387083836020015190613343565b6001600160a01b038b1660009081526011602052604090209061454a565b6138b185516001600160a01b038c166000908152601160205260409020906145ca565b6138d785602001516001600160a01b038b166000908152601060205260409020906145ca565b9750975097945050505050565b60008080808060076138f4614a51565b906101000a90046001600160a01b03166001600160a01b031663172886e76040518163ffffffff1660e01b81526004016080604051808303818680613937614af2565b15801561394c576000806139496149e6565b50505b505a613956614b3e565b5050505050158015613975573d6000803e3d60006139726149e6565b50505b505050506040513d6080811015613994576000806139916149e6565b50505b810190808051929190602001805192919060200180519291906020018051959950939750919550929350600092508291506a0c097ce7bc90715b34b9f160241b90506139f189516113796139ea8f8d519061319b565b8490613292565b9050613a0d89602001516113796139ea8e8d6020015190613343565b90506a0c097ce7bc90715b34b9f160241b811115613dcf57613a2e81614628565b90506000613a5382611379613a4b82670de0b6b3a7640000613343565b6133d1610f14565b90506001600160a01b038b16613a6a576000613a80565b613a80670de0b6b3a7640000611379838b613292565b93506001600160a01b038616613a97576000613aad565b613aad670de0b6b3a7640000611379838a613292565b92506001600160a01b038516613ae2578315613acd57613acd8b856134a3565b8215613add57613add86846134a3565b613dcd565b6000841180613af15750600083115b15613dcd576000808411613b06576000613b09565b60015b60008611613b18576000613b1b565b60015b0160ff1690506060816001600160401b0381118015613b4257600080613b3f6149e6565b50505b50604051908082528060200260200182016040528015613b6c578160200160208202803683370190505b5090506060826001600160401b0381118015613b9057600080613b8d6149e6565b50505b50604051908082528060200260200182016040528015613bba578160200160208202803683370190505b5090508d82600081518110613bcb57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508681600081518110613bf957fe5b60209081029190910101528515613c575788826001850381518110613c1a57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505085816001850381518110613c4a57fe5b6020026020010181815250505b876001600160a01b0316630931753c83836040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015613cbb578082015183820152602001613ca3565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015613cfa578082015183820152602001613ce2565b5050505090500194505050505060006040518083038160008780613d1c614af2565b158015613d3157600080613d2e6149e6565b50505b505a613d3b614c92565b505050505050925050508015613d4f575060015b613db6577f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa6040516020808252601690820152751d5c19185d1954995dd85c991cca0a4819985a5b195960521b6040808301919091526060909101905180910390a1613dc9565b613dc988613dc4898961319b565b6134a3565b5050505b505b7f2a368c7f33bb86e2d999940a3989d849031aff29b750f67947e6b8e8c3d2ffd689518a602001518a518b60200151878760405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a1505050505050505050505050565b600089600101613e54614a51565b905080600060028c01613e65614a51565b905080613e718b614682565b15613e8757613e80818a613343565b9050613ea8565b613ea5613e9e613e978d8961468d565b8b90613292565b8490613343565b92505b613eb18a614682565b15613ec757613ec0818961319b565b9050613ee8565b613ee5613ede613ed78c8961468d565b8a90613292565b849061319b565b92505b838314613f0157828060018f01613efd614c44565b5050505b818114613f1a57808060028f01613f16614c44565b5050505b60008715613f3f57613f3a88611379613f33858b613292565b879061319b565b613f41565b865b9050613f4b614dc6565b8e604051606081016040529081600082613f63614a51565b6001600160681b036101009290920a9004168152602001600d82613f85614a51565b6001600160681b036101009290920a9004168152602001601a82613fa7614a51565b65ffffffffffff6101009290920a900416905250905060208101516001600160681b031682146140a5578e613fe3613fde83613126565b612cc3565b613fec84612cc3565b613ffd5a613ff8614d80565b6146aa565b83600081600d8482600160d01b81614013614a51565b8165ffffffffffff021916908365ffffffffffff16021790614033614c44565b5050508591906101000a81614046614a51565b816001600160681b0302191690836001600160681b0316021790614068614c44565b5050508491906101000a8161407b614a51565b816001600160681b0302191690836001600160681b031602179061409d614c44565b505050505050505b506140b290508a8c6146c2565b6140e2576001600160a01b038c16600090815260038e016020528a90604090208151816140dd614c44565b505050505b6141038c6140f08c8961468d565b6140f98d614682565b8b8963ffffffff16565b50505050505050505050505050565b816001600160a01b0316836001600160a01b03161415614131576116e0565b600080600761413e614a51565b906101000a90046001600160a01b031690506000806001600160a01b0316856001600160a01b0316148061421f5750816001600160a01b0316633b90b9bf866040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806141b7614af2565b1580156141cc576000806141c96149e6565b50505b505a6141d6614b3e565b50505050501580156141f5573d6000803e3d60006141f26149e6565b50505b505050506040513d6020811015614214576000806142116149e6565b50505b810190808051925050505b15905060006001600160a01b03851615806142e75750826001600160a01b0316633b90b9bf866040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381868061427f614af2565b158015614294576000806142916149e6565b50505b505a61429e614b3e565b50505050501580156142bd573d6000803e3d60006142ba6149e6565b50505b505050506040513d60208110156142dc576000806142d96149e6565b50505b810190808051925050505b159050811580156142f6575080155b15614303575050506116e0565b60006001600160a01b03871661431a576000614323565b61432387611618565b905060006001600160a01b03871661433c576000614345565b61434587611618565b905060006143876001600160a01b03891615614362576000614364565b875b612fa06001600160a01b038c161561437d57600061437f565b895b611175610f14565b9050614391614de5565b6040518061010001604052808b6001600160a01b031681526020018a6001600160a01b0316815260200187151581526020018615158152602001898152602001858152602001848152602001838152509050600080886001600160a01b031663edb7a6fa6040518163ffffffff1660e01b815260040160408051808303818680614419614af2565b15801561442e5760008061442b6149e6565b50505b505a614438614b3e565b5050505050158015614457573d6000803e3d60006144546149e6565b50505b505050506040513d6040811015614476576000806144736149e6565b50505b810190808051929190602001805193955092935061449f9250859150849050612e4160086146d0565b6144ae8382612d00600c6146d0565b505050505050505050505050565b6060614507826040516040808201905260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201526001600160a01b0386169190614867565b90506000815111156116e05760208101815160208110156145305760008061452d6149e6565b50505b81019080805192506116e0915050576000806123de6149e6565b61455381614946565b6145645a61455f614d80565b61495e565b8360008282600160d81b81614577614a51565b8164ffffffffff021916908364ffffffffff16021790614595614c44565b5050508391906101000a816145a8614a51565b816001600160d81b0302191690836001600160d81b03160217906123db614c44565b614624826133d7846040516040808201905290816000826145e9614a51565b6001600160d81b036101009290920a9004168152602001601b8261460b614a51565b64ffffffffff6101009290920a900416905250846135f2565b5050565b6000600382111561466c5781600160028204015b818110156146645780915060028182868161465357fe5b04018161465c57fe5b04905061463c565b509050611536565b811561467a57506001611536565b506000611536565b600081511592915050565b600080835111156146a45760018351039050610d98565b50919050565b6000600160301b8210612cde57600080612cdb6149e6565b600081518351149392505050565b6146d8614d6f565b60038201600086516001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181614715614a51565b9052509050614722614d6f565b82600301600087602001516001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181614762614a51565b905250905061477082614682565b8015614780575061478081614682565b801561478d575085604001515b801561479a575085606001515b156147fa576147cc86516147ae848861468d565b60016147c38a608001518b60a0015190613343565b8863ffffffff16565b6147f386602001516147de838861468d565b60016147c38a608001518b60c001519061319b565b5050612cbd565b856040015115614834576148348651838860a001516148228a608001518b60a0015190613343565b8a60e001518894939291908b8b614976565b85606001511561485f5761485f8660200151828860c001516148228a608001518b60c001519061319b565b505050505050565b60606148728461499a565b614884576000806148816149e6565b50505b60006060856001600160a01b0316856040518082805190602001908083835b602083106148c25780518252601f1990920191602091820191016148a3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865a6148fc614c92565b5050505050509150503d8060008114614931576040513d603f01601f191681016040523d815291503d6000602084013e614936565b606091505b50915091506124218282866149af565b6000600160d81b8210612cde57600080612cdb6149e6565b6000600160281b8210612cde57600080612cdb6149e6565b612d6888888887156149885789614990565b6149906133dc565b8989898989613e46565b600080826149a6614af2565b15159392505050565b606083156149be575081610f57565b6000835111156149df57825180846020016149d76149e6565b505050610f57565b6000806131b35b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015614a1e578086015182820160400152602001614a03565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156116e057600082820152602001614a95565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020614a95565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020614a95565b638540661f598160e01b8152614b6f565b8080831115610d98575090919050565b8080831015610d98575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015614ba7578088015182820152602001614b8f565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059614bfc8d3d614b5f565b8c01614c088187614b4f565b5b82811015614c1d5760008152602001614c09565b50929c50505050505050565b60405160408082018152600290829080368337509192915050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020614a95565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b89811015614cd6578089015182820152602001614cbe565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af15059614d2b8e3d614b5f565b8d01614d378187614b4f565b5b82811015614d4c5760008152602001614d38565b50929d50505050505050565b604051604080820190526000808252602082015290565b604051602081016040526000815290565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020614a95565b6040516060810160409081526000808352602083018190529082015290565b60405161010081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e08201529056fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63658be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}