{
  "address": "0x7aB5194e730C4eC4a9d1d7f1DCAD9c173075888A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inchToken",
          "type": "address"
        },
        {
          "internalType": "contract IMooniswapFactory",
          "name": "_mooniswapFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        }
      ],
      "name": "claimCurrentEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        }
      ],
      "name": "claimFrozenEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        }
      ],
      "name": "freezeEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inchToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mooniswapFactory",
      "outputs": [
        {
          "internalType": "contract IMooniswapFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pathWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "firstUnprocessedEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentEpoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "updatePathWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "updateRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe448d6fb8322f797c8e862fdf88548cd7f521f4edee2018a6154356b890f47ef",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x7aB5194e730C4eC4a9d1d7f1DCAD9c173075888A",
    "transactionIndex": 0,
    "gasUsed": "5980176",
    "logsBloom": "0x
    "blockHash": "0xc0fec656002001ba302439cf7be245a7e0cc2a1dc412421b76eb5860ab48238f",
    "transactionHash": "0xe448d6fb8322f797c8e862fdf88548cd7f521f4edee2018a6154356b890f47ef",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 56661,
        "transactionHash": "0xe448d6fb8322f797c8e862fdf88548cd7f521f4edee2018a6154356b890f47ef",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xc0fec656002001ba302439cf7be245a7e0cc2a1dc412421b76eb5860ab48238f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 56661,
        "transactionHash": "0xe448d6fb8322f797c8e862fdf88548cd7f521f4edee2018a6154356b890f47ef",
        "address": "0x7aB5194e730C4eC4a9d1d7f1DCAD9c173075888A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc0fec656002001ba302439cf7be245a7e0cc2a1dc412421b76eb5860ab48238f"
      }
    ],
    "blockNumber": 56661,
    "cumulativeGasUsed": "5980176",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x32d12a25f539E341089050E2d26794F041fC9dF8",
    "0x0d15038f8a0362b4cE71D6c879d56bF9Fc2884cf"
  ],
  "solcInputHash": "c40ed9d6ab9534012d51b8ac2455af37",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12-develop.2020.12.9+commit.9b8c5857\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inchToken\",\"type\":\"address\"},{\"internalType\":\"contract IMooniswapFactory\",\"name\":\"_mooniswapFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"}],\"name\":\"claimCurrentEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"}],\"name\":\"claimFrozenEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"}],\"name\":\"freezeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inchToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooniswapFactory\",\"outputs\":[{\"internalType\":\"contract IMooniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pathWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstUnprocessedEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"updatePathWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReferralFeeReceiver.sol\":\"ReferralFeeReceiver\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Mooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/Sqrt.sol\\\";\\nimport \\\"./libraries/VirtualBalance.sol\\\";\\nimport \\\"./governance/MooniswapGovernance.sol\\\";\\n\\n\\ncontract Mooniswap is MooniswapGovernance {\\n    using Sqrt for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    struct Balances {\\n        uint256 src;\\n        uint256 dst;\\n    }\\n\\n    struct Fees {\\n        uint256 fee;\\n        uint256 slippageFee;\\n    }\\n\\n    event Error(string reason);\\n\\n    event Deposited(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Withdrawn(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Swapped(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed srcToken,\\n        address dstToken,\\n        uint256 amount,\\n        uint256 result,\\n        uint256 srcAdditionBalance,\\n        uint256 dstRemovalBalance,\\n        address referral\\n    );\\n\\n    event Sync(\\n        uint256 srcBalance,\\n        uint256 dstBalance,\\n        uint256 fee,\\n        uint256 slippageFee,\\n        uint256 referralShare,\\n        uint256 governanceShare\\n    );\\n\\n    uint256 private constant _BASE_SUPPLY = 1000;  // Total supply on first deposit\\n\\n    IERC20 public immutable token0;\\n    IERC20 public immutable token1;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForAddition;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForRemoval;\\n\\n    modifier whenNotShutdown {\\n        require(mooniswapFactoryGovernance.isActive(), \\\"Mooniswap: factory shutdown\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        string memory name,\\n        string memory symbol,\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance\\n    )\\n        public\\n        ERC20(name, symbol)\\n        MooniswapGovernance(_mooniswapFactoryGovernance)\\n    {\\n        require(bytes(name).length > 0, \\\"Mooniswap: name is empty\\\");\\n        require(bytes(symbol).length > 0, \\\"Mooniswap: symbol is empty\\\");\\n        require(_token0 != _token1, \\\"Mooniswap: duplicate tokens\\\");\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function getTokens() external view returns(IERC20[] memory tokens) {\\n        tokens = new IERC20[](2);\\n        tokens[0] = token0;\\n        tokens[1] = token1;\\n    }\\n\\n    function tokens(uint256 i) external view returns(IERC20) {\\n        if (i == 0) {\\n            return token0;\\n        } else if (i == 1) {\\n            return token1;\\n        } else {\\n            revert(\\\"Pool has two tokens\\\");\\n        }\\n    }\\n\\n    function getBalanceForAddition(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        return Math.max(virtualBalancesForAddition[token].current(balance), balance);\\n    }\\n\\n    function getBalanceForRemoval(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        return Math.min(virtualBalancesForRemoval[token].current(balance), balance);\\n    }\\n\\n    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256) {\\n        return _getReturn(src, dst, amount, getBalanceForAddition(src), getBalanceForRemoval(dst), fee(), slippageFee());\\n    }\\n\\n    function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts) external returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        return depositFor(maxAmounts, minAmounts, msg.sender);\\n    }\\n\\n    function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target) public nonReentrant returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalSupply == 0) {\\n            fairSupply = _BASE_SUPPLY.mul(99);\\n            _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.max(fairSupply, maxAmounts[i]);\\n\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                require(maxAmounts[i] >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), maxAmounts[i]);\\n                receivedAmounts[i] = maxAmounts[i];\\n            }\\n        }\\n        else {\\n            uint256[2] memory realBalances;\\n            for (uint i = 0; i < realBalances.length; i++) {\\n                realBalances[i] = _tokens[i].balanceOf(address(this));\\n            }\\n\\n            // Pre-compute fair supply\\n            fairSupply = type(uint256).max;\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 fairSupplyCached = fairSupply;\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\n                require(amount >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), amount);\\n                receivedAmounts[i] = _tokens[i].balanceOf(address(this)).sub(realBalances[i]);\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                virtualBalancesForRemoval[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n                virtualBalancesForAddition[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n            }\\n        }\\n\\n        require(fairSupply > 0, \\\"Mooniswap: result is not enough\\\");\\n        _mint(target, fairSupply);\\n\\n        emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\n    }\\n\\n    function withdraw(uint256 amount, uint256[] memory minReturns) external returns(uint256[2] memory withdrawnAmounts) {\\n        return withdrawFor(amount, minReturns, msg.sender);\\n    }\\n\\n    function withdrawFor(uint256 amount, uint256[] memory minReturns, address target) public nonReentrant returns(uint256[2] memory withdrawnAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n        _burn(msg.sender, amount);\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            IERC20 token = _tokens[i];\\n\\n            uint256 preBalance = token.balanceOf(address(this));\\n            uint256 value = preBalance.mul(amount).div(totalSupply);\\n            token.safeTransfer(target, value);\\n            withdrawnAmounts[i] = value;\\n            require(i >= minReturns.length || value >= minReturns[i], \\\"Mooniswap: result is not enough\\\");\\n\\n            virtualBalancesForAddition[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\\n            virtualBalancesForRemoval[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\\n        }\\n\\n        emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\n    }\\n\\n    function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral) external returns(uint256 result) {\\n        return swapFor(src, dst, amount, minReturn, referral, msg.sender);\\n    }\\n\\n    function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address receiver) public nonReentrant whenNotShutdown returns(uint256 result) {\\n        Balances memory balances = Balances({\\n            src: src.balanceOf(address(this)),\\n            dst: dst.balanceOf(address(this))\\n        });\\n        uint256 confirmed;\\n        Balances memory virtualBalances;\\n        Fees memory fees = Fees({\\n            fee: fee(),\\n            slippageFee: slippageFee()\\n        });\\n        (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\n        emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\n        _mintRewards(confirmed, result, referral, balances, fees);\\n    }\\n\\n    function _doTransfers(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address receiver, Balances memory balances, Fees memory fees)\\n        private returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\n    {\\n        virtualBalances.src = virtualBalancesForAddition[src].current(balances.src);\\n        virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\n        virtualBalances.dst = virtualBalancesForRemoval[dst].current(balances.dst);\\n        virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\n        src.safeTransferFrom(msg.sender, address(this), amount);\\n        confirmed = src.balanceOf(address(this)).sub(balances.src);\\n        result = _getReturn(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\n        require(result > 0 && result >= minReturn, \\\"Mooniswap: return is not enough\\\");\\n        dst.safeTransfer(receiver, result);\\n\\n        // Update virtual balances to the same direction only at imbalanced state\\n        if (virtualBalances.src != balances.src) {\\n            virtualBalancesForAddition[src].set(virtualBalances.src.add(confirmed));\\n        }\\n        if (virtualBalances.dst != balances.dst) {\\n            virtualBalancesForRemoval[dst].set(virtualBalances.dst.sub(result));\\n        }\\n        // Update virtual balances to the opposite direction\\n        virtualBalancesForRemoval[src].update(balances.src);\\n        virtualBalancesForAddition[dst].update(balances.dst);\\n    }\\n\\n    function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees) private {\\n        (uint256 referralShare, uint256 governanceShare, address govWallet, address feeCollector) = mooniswapFactoryGovernance.shareParameters();\\n\\n        uint256 refReward;\\n        uint256 govReward;\\n\\n        uint256 invariantRatio = uint256(1e36);\\n        invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\n        invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\n        if (invariantRatio > 1e36) {\\n            // calculate share only if invariant increased\\n            invariantRatio = invariantRatio.sqrt();\\n            uint256 invIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\n\\n            refReward = (referral != address(0)) ? invIncrease.mul(referralShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n            govReward = (govWallet != address(0)) ? invIncrease.mul(governanceShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n\\n            if (feeCollector == address(0)) {\\n                if (refReward > 0) {\\n                    _mint(referral, refReward);\\n                }\\n                if (govReward > 0) {\\n                    _mint(govWallet, govReward);\\n                }\\n            }\\n            else if (refReward > 0 || govReward > 0) {\\n                uint256 len = (refReward > 0 ? 1 : 0) + (govReward > 0 ? 1 : 0);\\n                address[] memory wallets = new address[](len);\\n                uint256[] memory rewards = new uint256[](len);\\n\\n                wallets[0] = referral;\\n                rewards[0] = refReward;\\n                if (govReward > 0) {\\n                    wallets[len - 1] = govWallet;\\n                    rewards[len - 1] = govReward;\\n                }\\n\\n                try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\n                    _mint(feeCollector, refReward.add(govReward));\\n                }\\n                catch {\\n                    emit Error(\\\"updateRewards() failed\\\");\\n                }\\n            }\\n        }\\n\\n        emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, refReward, govReward);\\n    }\\n\\n    /*\\n        spot_ret = dx * y / x\\n        uni_ret = dx * y / (x + dx)\\n        slippage = (spot_ret - uni_ret) / spot_ret\\n        slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\n        slippage = dx / (x + dx)\\n        ret = uni_ret * (1 - slip_fee * slippage)\\n        ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\n        ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\n\\n        x = amount * denominator\\n        dx = amount * (denominator - fee)\\n    */\\n    function _getReturn(IERC20 src, IERC20 dst, uint256 amount, uint256 srcBalance, uint256 dstBalance, uint256 fee, uint256 slippageFee) internal view returns(uint256) {\\n        if (src > dst) {\\n            (src, dst) = (dst, src);\\n        }\\n        if (amount > 0 && src == token0 && dst == token1) {\\n            uint256 taxedAmount = amount.sub(amount.mul(fee).div(MooniswapConstants._FEE_DENOMINATOR));\\n            uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\n            uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\n            uint256 feeNumerator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\n            uint256 feeDenominator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\n            return ret.mul(feeNumerator).div(feeDenominator);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d44d4a9825a618f05eec844e9cc97add154512674176a2789ab5941336a8b5c\",\"license\":\"MIT\"},\"contracts/ReferralFeeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./utils/Converter.sol\\\";\\n\\n\\ncontract ReferralFeeReceiver is IFeeCollector, Converter, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 balance;\\n        mapping(IERC20 => mapping(uint256 => uint256)) share;\\n        mapping(IERC20 => uint256) firstUnprocessedEpoch;\\n    }\\n\\n    struct EpochBalance {\\n        uint256 totalSupply;\\n        uint256 token0Balance;\\n        uint256 token1Balance;\\n        uint256 inchBalance;\\n    }\\n\\n    struct TokenInfo {\\n        mapping(uint256 => EpochBalance) epochBalance;\\n        uint256 firstUnprocessedEpoch;\\n        uint256 currentEpoch;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(IERC20 => TokenInfo) public tokenInfo;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(IERC20 _inchToken, IMooniswapFactory _mooniswapFactory) public Converter(_inchToken, _mooniswapFactory) {}\\n\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external override {\\n        for (uint i = 0; i < receivers.length; i++) {\\n            updateReward(receivers[i], amounts[i]);\\n        }\\n    }\\n\\n    function updateReward(address referral, uint256 amount) public override {\\n        Mooniswap mooniswap = Mooniswap(msg.sender);\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        UserInfo storage user = userInfo[referral];\\n        uint256 currentEpoch = token.currentEpoch;\\n\\n        // Add new reward to current epoch\\n        user.share[mooniswap][currentEpoch] = user.share[mooniswap][currentEpoch].add(amount);\\n        token.epochBalance[currentEpoch].totalSupply = token.epochBalance[currentEpoch].totalSupply.add(amount);\\n\\n        // Collect all processed epochs and advance user token epoch\\n        _collectProcessedEpochs(user, token, mooniswap, currentEpoch);\\n    }\\n\\n    function freezeEpoch(Mooniswap mooniswap) external nonReentrant validPool(mooniswap) validSpread(mooniswap) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        uint256 currentEpoch = token.currentEpoch;\\n        require(token.firstUnprocessedEpoch == currentEpoch, \\\"Previous epoch is not finalized\\\");\\n\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n        uint256 token0Balance = tokens[0].balanceOf(address(this));\\n        uint256 token1Balance = tokens[1].balanceOf(address(this));\\n        mooniswap.withdraw(mooniswap.balanceOf(address(this)), new uint256[](0));\\n        token.epochBalance[currentEpoch].token0Balance = tokens[0].balanceOf(address(this)).sub(token0Balance);\\n        token.epochBalance[currentEpoch].token1Balance = tokens[1].balanceOf(address(this)).sub(token1Balance);\\n        token.currentEpoch = currentEpoch.add(1);\\n    }\\n\\n    function trade(Mooniswap mooniswap, IERC20[] memory path) external nonReentrant validPool(mooniswap) validPath(path) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        uint256 firstUnprocessedEpoch = token.firstUnprocessedEpoch;\\n        EpochBalance storage epochBalance = token.epochBalance[firstUnprocessedEpoch];\\n        require(firstUnprocessedEpoch.add(1) == token.currentEpoch, \\\"Prev epoch already finalized\\\");\\n\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n        uint256 availableBalance;\\n        if (path[0] == tokens[0]) {\\n            availableBalance = epochBalance.token0Balance;\\n        } else if (path[0] == tokens[1]) {\\n            availableBalance = epochBalance.token1Balance;\\n        } else {\\n            revert(\\\"Invalid first token\\\");\\n        }\\n\\n        (uint256 amount, uint256 returnAmount) = _maxAmountForSwap(path, availableBalance);\\n        if (returnAmount == 0) {\\n            // get rid of dust\\n            if (availableBalance > 0) {\\n                require(availableBalance == amount, \\\"availableBalance is not dust\\\");\\n                for (uint256 i = 0; i + 1 < path.length; i += 1) {\\n                    Mooniswap _mooniswap = mooniswapFactory.pools(path[i], path[i+1]);\\n                    require(_validateSpread(_mooniswap), \\\"Spread is too high\\\");\\n                }\\n                path[0].safeTransfer(address(mooniswap), availableBalance);\\n            }\\n        } else {\\n            uint256 receivedAmount = _swap(path, amount, address(this));\\n            epochBalance.inchBalance = epochBalance.inchBalance.add(receivedAmount);\\n        }\\n\\n        if (path[0] == tokens[0]) {\\n            epochBalance.token0Balance = epochBalance.token0Balance.sub(amount);\\n        } else {\\n            epochBalance.token1Balance = epochBalance.token1Balance.sub(amount);\\n        }\\n\\n        if (epochBalance.token0Balance == 0 && epochBalance.token1Balance == 0) {\\n            token.firstUnprocessedEpoch = firstUnprocessedEpoch.add(1);\\n        }\\n    }\\n\\n    function claim(Mooniswap[] memory pools) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n        for (uint256 i = 0; i < pools.length; ++i) {\\n            Mooniswap mooniswap = pools[i];\\n            TokenInfo storage token = tokenInfo[mooniswap];\\n            _collectProcessedEpochs(user, token, mooniswap, token.currentEpoch);\\n        }\\n\\n        uint256 balance = user.balance;\\n        if (balance > 1) {\\n            // Avoid erasing storage to decrease gas footprint for referral payments\\n            user.balance = 1;\\n            inchToken.transfer(msg.sender, balance - 1);\\n        }\\n    }\\n\\n    function claimCurrentEpoch(Mooniswap mooniswap) external nonReentrant validPool(mooniswap) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 currentEpoch = token.currentEpoch;\\n        uint256 balance = user.share[mooniswap][currentEpoch];\\n        if (balance > 0) {\\n            user.share[mooniswap][currentEpoch] = 0;\\n            token.epochBalance[currentEpoch].totalSupply = token.epochBalance[currentEpoch].totalSupply.sub(balance);\\n            mooniswap.transfer(msg.sender, balance);\\n        }\\n    }\\n\\n    function claimFrozenEpoch(Mooniswap mooniswap) external nonReentrant validPool(mooniswap) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 firstUnprocessedEpoch = token.firstUnprocessedEpoch;\\n        uint256 currentEpoch = token.currentEpoch;\\n\\n        require(firstUnprocessedEpoch.add(1) == currentEpoch, \\\"Epoch already finalized\\\");\\n        require(user.firstUnprocessedEpoch[mooniswap] == firstUnprocessedEpoch, \\\"Epoch funds already claimed\\\");\\n\\n        user.firstUnprocessedEpoch[mooniswap] = currentEpoch;\\n        uint256 share = user.share[mooniswap][firstUnprocessedEpoch];\\n\\n        if (share > 0) {\\n            EpochBalance storage epochBalance = token.epochBalance[firstUnprocessedEpoch];\\n            uint256 totalSupply = epochBalance.totalSupply;\\n            user.share[mooniswap][firstUnprocessedEpoch] = 0;\\n            epochBalance.totalSupply = totalSupply.sub(share);\\n\\n            IERC20[] memory tokens = mooniswap.getTokens();\\n            epochBalance.token0Balance = _transferTokenShare(tokens[0], epochBalance.token0Balance, share, totalSupply);\\n            epochBalance.token1Balance = _transferTokenShare(tokens[1], epochBalance.token1Balance, share, totalSupply);\\n            epochBalance.inchBalance = _transferTokenShare(inchToken, epochBalance.inchBalance, share, totalSupply);\\n        }\\n    }\\n\\n    function _transferTokenShare(IERC20 token, uint256 balance, uint256 share, uint256 totalSupply) private returns(uint256 newBalance) {\\n        uint256 amount = balance.mul(share).div(totalSupply);\\n        if (amount > 0) {\\n            token.safeTransfer(msg.sender, amount);\\n        }\\n        return balance.sub(amount);\\n    }\\n\\n    function _collectProcessedEpochs(UserInfo storage user, TokenInfo storage token, Mooniswap mooniswap, uint256 currentEpoch) private {\\n        // Early return for the new users\\n        if (user.share[mooniswap][user.firstUnprocessedEpoch[mooniswap]] == 0) {\\n            user.firstUnprocessedEpoch[mooniswap] = currentEpoch;\\n            return;\\n        }\\n\\n        uint256 userEpoch = user.firstUnprocessedEpoch[mooniswap];\\n        uint256 tokenEpoch = token.firstUnprocessedEpoch;\\n        uint256 epochCount = Math.min(2, tokenEpoch.sub(userEpoch)); // 0, 1 or 2 epochs\\n        if (epochCount == 0) {\\n            return;\\n        }\\n\\n        // Claim 1 or 2 processed epochs for the user\\n        uint256 collected = _collectEpoch(user, token, mooniswap, userEpoch);\\n        if (epochCount > 1) {\\n            collected = collected.add(_collectEpoch(user, token, mooniswap, userEpoch + 1));\\n        }\\n        user.balance = user.balance.add(collected);\\n\\n        // Update user token epoch counter\\n        bool emptySecondEpoch = user.share[mooniswap][userEpoch + 1] == 0;\\n        user.firstUnprocessedEpoch[mooniswap] = (epochCount == 2 || emptySecondEpoch) ? currentEpoch : userEpoch + 1;\\n    }\\n\\n    function _collectEpoch(UserInfo storage user, TokenInfo storage token, Mooniswap mooniswap, uint256 epoch) private returns(uint256 collected) {\\n        uint256 share = user.share[mooniswap][epoch];\\n        if (share > 0) {\\n            uint256 inchBalance = token.epochBalance[epoch].inchBalance;\\n            uint256 totalSupply = token.epochBalance[epoch].totalSupply;\\n\\n            collected = inchBalance.mul(share).div(totalSupply);\\n\\n            user.share[mooniswap][epoch] = 0;\\n            token.epochBalance[epoch].totalSupply = totalSupply.sub(share);\\n            token.epochBalance[epoch].inchBalance = inchBalance.sub(collected);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5825254dc9e4c58e2d3c20ccdda3fd7a47133746f3f973f20cc89650c680009c\",\"license\":\"MIT\"},\"contracts/governance/MooniswapGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactoryGovernance.sol\\\";\\nimport \\\"../libraries/LiquidVoting.sol\\\";\\nimport \\\"../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\n\\n\\nabstract contract MooniswapGovernance is ERC20, Ownable, ReentrancyGuard {\\n    using Vote for Vote.Data;\\n    using LiquidVoting for LiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeCast for uint256;\\n\\n    event FeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n    event SlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n\\n    IMooniswapFactoryGovernance public mooniswapFactoryGovernance;\\n    LiquidVoting.Data private _fee;\\n    LiquidVoting.Data private _slippageFee;\\n\\n    constructor(IMooniswapFactoryGovernance _mooniswapFactoryGovernance) internal {\\n        mooniswapFactoryGovernance = _mooniswapFactoryGovernance;\\n        _fee.data.result = _mooniswapFactoryGovernance.defaultFee().toUint104();\\n        _slippageFee.data.result = _mooniswapFactoryGovernance.defaultSlippageFee().toUint104();\\n    }\\n\\n    function setMooniswapFactoryGovernance(IMooniswapFactoryGovernance newMooniswapFactoryGovernance) external onlyOwner {\\n        mooniswapFactoryGovernance = newMooniswapFactoryGovernance;\\n        this.discardFeeVote();\\n        this.discardSlippageFeeVote();\\n    }\\n\\n    function fee() public view returns(uint256) {\\n        return _fee.data.current();\\n    }\\n\\n    function slippageFee() public view returns(uint256) {\\n        return _slippageFee.data.current();\\n    }\\n\\n    function virtualFee() external view returns(uint104, uint104, uint48) {\\n        return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\n    }\\n\\n    function virtualSlippageFee() external view returns(uint104, uint104, uint48) {\\n        return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\n    }\\n\\n    function feeVotes(address user) external view returns(uint256) {\\n        return _fee.votes[user].get(mooniswapFactoryGovernance.defaultFee);\\n    }\\n\\n    function slippageFeeVotes(address user) external view returns(uint256) {\\n        return _slippageFee.votes[user].get(mooniswapFactoryGovernance.defaultSlippageFee);\\n    }\\n\\n    function feeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function slippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function discardFeeVote() external {\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function discardSlippageFeeVote() external {\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function _emitFeeVoteUpdate(address account, uint256 newFee, bool isDefault, uint256 newBalance) private {\\n        emit FeeVoteUpdate(account, newFee, isDefault, newBalance);\\n    }\\n\\n    function _emitSlippageFeeVoteUpdate(address account, uint256 newSlippageFee, bool isDefault, uint256 newBalance) private {\\n        emit SlippageFeeVoteUpdate(account, newSlippageFee, isDefault, newBalance);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from == to) {\\n            // ignore transfers to self\\n            return;\\n        }\\n\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance = mooniswapFactoryGovernance;\\n        bool updateFrom = !(from == address(0) || _mooniswapFactoryGovernance.isFeeCollector(from));\\n        bool updateTo = !(to == address(0) || _mooniswapFactoryGovernance.isFeeCollector(to));\\n\\n        if (!updateFrom && !updateTo) {\\n            // mint to feeReceiver or burn from feeReceiver\\n            return;\\n        }\\n\\n        uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\n        uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\n        uint256 newTotalSupply = totalSupply()\\n            .add(from == address(0) ? amount : 0)\\n            .sub(to == address(0) ? amount : 0);\\n\\n        ParamsHelper memory params = ParamsHelper({\\n            from: from,\\n            to: to,\\n            updateFrom: updateFrom,\\n            updateTo: updateTo,\\n            amount: amount,\\n            balanceFrom: balanceFrom,\\n            balanceTo: balanceTo,\\n            newTotalSupply: newTotalSupply\\n        });\\n\\n        (uint256 defaultFee, uint256 defaultSlippageFee) = _mooniswapFactoryGovernance.defaults();\\n\\n        _updateOnTransfer(params, defaultFee, _emitFeeVoteUpdate, _fee);\\n        _updateOnTransfer(params, defaultSlippageFee, _emitSlippageFeeVoteUpdate, _slippageFee);\\n    }\\n\\n    struct ParamsHelper {\\n        address from;\\n        address to;\\n        bool updateFrom;\\n        bool updateTo;\\n        uint256 amount;\\n        uint256 balanceFrom;\\n        uint256 balanceTo;\\n        uint256 newTotalSupply;\\n    }\\n\\n    function _updateOnTransfer(\\n        ParamsHelper memory params,\\n        uint256 defaultValue,\\n        function(address, uint256, bool, uint256) internal emitEvent,\\n        LiquidVoting.Data storage votingData\\n    ) private {\\n        Vote.Data memory voteFrom = votingData.votes[params.from];\\n        Vote.Data memory voteTo = votingData.votes[params.to];\\n\\n        if (voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\n            emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\n            emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\n            return;\\n        }\\n\\n        if (params.updateFrom) {\\n            votingData.updateBalance(params.from, voteFrom, params.balanceFrom, params.balanceFrom.sub(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n\\n        if (params.updateTo) {\\n            votingData.updateBalance(params.to, voteTo, params.balanceTo, params.balanceTo.add(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3dcca03803c6ae225ab1bd706ed7482b88dd5d0c71cadfba946417e53c0b63f2\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IFeeCollector {\\n    function updateReward(address receiver, uint256 amount) external;\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x32a215750177362f8077d6e4cf48ae508e0b6565f20f8eaa4b130260bf238555\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../Mooniswap.sol\\\";\\n\\ninterface IMooniswapFactory is IMooniswapFactoryGovernance {\\n    function pools(IERC20 token0, IERC20 token1) external view returns (Mooniswap);\\n    function isPool(Mooniswap mooniswap) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee7b8aa36fc3d066d8c1413b06f09932eb72e9d608f5ce8b303a9cafc049fcab\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactoryGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IMooniswapFactoryGovernance {\\n    function shareParameters() external view returns(uint256 referralShare, uint256 governanceShare, address governanceWallet, address referralFeeReceiver);\\n    function defaults() external view returns(uint256 defaultFee, uint256 defaultSlippageFee);\\n\\n    function defaultFee() external view returns(uint256);\\n    function defaultSlippageFee() external view returns(uint256);\\n\\n    function virtualDefaultFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultSlippageFee() external view returns(uint104, uint104, uint48);\\n\\n    function referralShare() external view returns(uint256);\\n    function governanceShare() external view returns(uint256);\\n    function governanceWallet() external view returns(address);\\n    function feeCollector() external view returns(address);\\n\\n    function isFeeCollector(address) external view returns(bool);\\n    function isActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6ca0e9c05419b5fe05ea3e46246079c2392f6269ca54d33ba05518547c0069a\",\"license\":\"MIT\"},\"contracts/libraries/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary LiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _defaultVotes;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 totalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldDefaultVotes = self._defaultVotes;\\n        uint256 newDefaultVotes = oldDefaultVotes;\\n\\n        if (oldVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.sub(oldBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n        }\\n\\n        if (newVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.add(newBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newDefaultVotes != oldDefaultVotes) {\\n            self._defaultVotes = newDefaultVotes;\\n        }\\n\\n        {\\n            uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).div(newTotalSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x0300c61b4bba9a58097ec0a843d04b42260f705dbc68bf3bbcc9e9011ffdfd7a\",\"license\":\"MIT\"},\"contracts/libraries/MooniswapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary MooniswapConstants {\\n    uint256 internal constant _FEE_DENOMINATOR = 1e18;\\n\\n    uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\n    uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\n\\n    uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\n    uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\n\\n    uint256 internal constant _DEFAULT_FEE = 0;\\n    uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\n    uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\n}\\n\",\"keccak256\":\"0x9f6421e5cf8734fbf5670148f3d6030b69aaeba473933f9a07fd3766fdaf1733\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary SafeCast {\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n}\\n\",\"keccak256\":\"0x6f5e3e3d0bc762c2defe32c7bc62309cd7e60776bb5dc0d059a1bcf0874b4c51\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: non-zero to non-zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: operation failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4cc1b6b3b02d033719e1261afde66c209064899827c63a92faa50d9238c301b4\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary Sqrt {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256) {\\n        if (y > 3) {\\n            uint256 z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n            return z;\\n        } else if (y != 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5674ed7d1bb3655d9d6698ff6175cb23261d8cf837915d0af70404aa019b5267\",\"license\":\"MIT\"},\"contracts/libraries/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./MooniswapConstants.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n\\nlibrary VirtualBalance {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    struct Data {\\n        uint216 balance;\\n        uint40 time;\\n    }\\n\\n    function set(VirtualBalance.Data storage self, uint256 balance) internal {\\n        (self.balance, self.time) = (\\n            balance.toUint216(),\\n            block.timestamp.toUint40()\\n        );\\n    }\\n\\n    function update(VirtualBalance.Data storage self, uint256 realBalance) internal {\\n        set(self, current(self, realBalance));\\n    }\\n\\n    function scale(VirtualBalance.Data storage self, uint256 realBalance, uint256 num, uint256 denom) internal {\\n        set(self, current(self, realBalance).mul(num).add(denom.sub(1)).div(denom));\\n    }\\n\\n    function current(VirtualBalance.Data memory self, uint256 realBalance) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(MooniswapConstants._DEFAULT_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = MooniswapConstants._DEFAULT_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.balance).mul(timeRemain).add(\\n            realBalance.mul(timePassed)\\n        ).div(MooniswapConstants._DEFAULT_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0x4b76426258b1819ccc958c06ab7ec3d6375b594ee9a8f86e4b01949b71e3aa26\",\"license\":\"MIT\"},\"contracts/libraries/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary VirtualVote {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\n\\n    struct Data {\\n        uint104 oldResult;\\n        uint104 result;\\n        uint48 time;\\n    }\\n\\n    function current(VirtualVote.Data memory self) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.oldResult).mul(timeRemain).add(\\n            uint256(self.result).mul(timePassed)\\n        ).div(_VOTE_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0xd62c910eb9b206eb6c2230be6c964824693fbe52436e53c3e69f02a84aa7c63d\",\"license\":\"MIT\"},\"contracts/libraries/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nlibrary Vote {\\n    struct Data {\\n        uint256 value;\\n    }\\n\\n    function eq(Vote.Data memory self, Vote.Data memory vote) internal pure returns(bool) {\\n        return self.value == vote.value;\\n    }\\n\\n    function init() internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: 0\\n        });\\n    }\\n\\n    function init(uint256 vote) internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: vote + 1\\n        });\\n    }\\n\\n    function isDefault(Data memory self) internal pure returns(bool) {\\n        return self.value == 0;\\n    }\\n\\n    function get(Data memory self, uint256 defaultVote) internal pure returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVote;\\n    }\\n\\n    function get(Data memory self, function() external view returns(uint256) defaultVoteFn) internal view returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVoteFn();\\n    }\\n}\\n\",\"keccak256\":\"0xa31a88aebf9a52ea8c02e611cd798631e7296b78e9ecdf37d2b0c7eb2badb252\",\"license\":\"MIT\"},\"contracts/utils/Converter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactory.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../libraries/VirtualBalance.sol\\\";\\nimport \\\"../Mooniswap.sol\\\";\\n\\n\\ncontract Converter is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    uint256 private constant _ONE = 1e18;\\n    uint256 private constant _MAX_SPREAD = 0.01e18;\\n    uint256 private constant _MAX_LIQUIDITY_SHARE = 100;\\n\\n    IERC20 public immutable inchToken;\\n    IMooniswapFactory public immutable mooniswapFactory;\\n    mapping(IERC20 => bool) public pathWhitelist;\\n\\n    constructor (IERC20 _inchToken, IMooniswapFactory _mooniswapFactory) public {\\n        inchToken = _inchToken;\\n        mooniswapFactory = _mooniswapFactory;\\n    }\\n\\n    modifier validSpread(Mooniswap mooniswap) {\\n        require(_validateSpread(mooniswap), \\\"Spread is too high\\\");\\n\\n        _;\\n    }\\n\\n    modifier validPool(Mooniswap mooniswap) {\\n        require(mooniswapFactory.isPool(mooniswap), \\\"Invalid mooniswap\\\");\\n\\n        _;\\n    }\\n\\n    modifier validPath(IERC20[] memory path) {\\n        require(path.length > 0, \\\"Min path length is 1\\\");\\n        require(path.length < 5, \\\"Max path length is 4\\\");\\n        require(path[path.length - 1] == inchToken, \\\"Should swap to target token\\\");\\n\\n        for (uint256 i = 1; i + 1 < path.length; i += 1) {\\n            require(pathWhitelist[path[i]], \\\"Token is not whitelisted\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    function updatePathWhitelist(IERC20 token, bool whitelisted) external onlyOwner {\\n        pathWhitelist[token] = whitelisted;\\n    }\\n\\n    function _validateSpread(Mooniswap mooniswap) internal view returns(bool) {\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n\\n        uint256 buyPrice;\\n        uint256 sellPrice;\\n        uint256 spotPrice;\\n        {\\n            uint256 token0Balance = tokens[0].balanceOf(address(mooniswap));\\n            uint256 token1Balance = tokens[1].balanceOf(address(mooniswap));\\n            VirtualBalance.Data memory vb;\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForAddition(tokens[0]);\\n            uint256 token0BalanceForAddition = Math.max(vb.current(token0Balance), token0Balance);\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForAddition(tokens[1]);\\n            uint256 token1BalanceForAddition = Math.max(vb.current(token1Balance), token1Balance);\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForRemoval(tokens[0]);\\n            uint256 token0BalanceForRemoval = Math.min(vb.current(token0Balance), token0Balance);\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForRemoval(tokens[1]);\\n            uint256 token1BalanceForRemoval = Math.min(vb.current(token1Balance), token1Balance);\\n\\n            buyPrice = _ONE.mul(token1BalanceForAddition).div(token0BalanceForRemoval);\\n            sellPrice = _ONE.mul(token1BalanceForRemoval).div(token0BalanceForAddition);\\n            spotPrice = _ONE.mul(token1Balance).div(token0Balance);\\n        }\\n\\n        return buyPrice.sub(sellPrice).mul(_ONE) < _MAX_SPREAD.mul(spotPrice);\\n    }\\n\\n    function _maxAmountForSwap(IERC20[] memory path, uint256 amount) internal view returns(uint256 srcAmount, uint256 dstAmount) {\\n        srcAmount = amount;\\n        dstAmount = amount;\\n        uint256 pathLength = path.length;\\n\\n        for (uint256 i = 0; i + 1 < pathLength; i += 1) {\\n            Mooniswap mooniswap = mooniswapFactory.pools(path[i], path[i+1]);\\n            uint256 maxCurStepAmount = path[i].balanceOf(address(mooniswap)).div(_MAX_LIQUIDITY_SHARE);\\n            if (maxCurStepAmount < dstAmount) {\\n                srcAmount = srcAmount.mul(maxCurStepAmount).div(dstAmount);\\n                dstAmount = maxCurStepAmount;\\n            }\\n            dstAmount = mooniswap.getReturn(path[i], path[i+1], dstAmount);\\n        }\\n    }\\n\\n    function _swap(IERC20[] memory path, uint256 initialAmount, address destination) internal returns(uint256 amount)\\n    {\\n        amount = initialAmount;\\n\\n        for (uint256 i = 0; i + 1 < path.length; i += 1) {\\n            Mooniswap mooniswap = mooniswapFactory.pools(path[i], path[i+1]);\\n\\n            require(_validateSpread(mooniswap), \\\"Spread is too high\\\");\\n\\n            path[i].safeApprove(address(mooniswap), amount);\\n\\n            if (i + 2 < path.length) {\\n                amount = mooniswap.swap(path[i], path[i+1], amount, 0, address(0));\\n            }\\n            else {\\n                amount = mooniswap.swapFor(path[i], path[i+1], amount, 0, address(0), destination);\\n            }\\n        }\\n\\n        if (path.length == 1) {\\n            path[0].transfer(destination, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f47c9fa13272d73162f60bf4f859a3b97f2e567148a259899c073bf7874f83f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001957600080610016613a38565b50505b50600436106100d95760003560e01c80630931753c146100e75780631959a002146101e65780631a39912514610227578063318d9e5d1461025c5780635e8c8bb714610321578063715018a61461036457806371646f981461036c578063857311401461039b5780638da5cb5b146103bf578063946e1a62146103c75780639e96b2ce146103f6578063ec95459414610425578063f2fde38b1461042d578063f3aafa801461045c578063f583adbc14610531578063f5dab71114610568575b6000806100e4613a38565b50505b6101e46004803603604081101561010657600080610103613a38565b50505b810190602081018135600160201b81111561012957600080610126613a38565b50505b82018360208201111561014457600080610141613a38565b50505b803590602001918460208302840111600160201b8311171561016e5760008061016b613a38565b50505b919390929091602081019035600160201b81111561019457600080610191613a38565b50505b8201836020820111156101af576000806101ac613a38565b50505b803590602001918460208302840111600160201b831117156101d9576000806101d6613a38565b50505b5090925090506105af565b005b6102156004803603602081101561020557600080610202613a38565b50505b50356001600160a01b0316610600565b60405190815260200160405180910390f35b6101e46004803603604081101561024657600080610243613a38565b50505b506001600160a01b03813516906020013561061e565b6101e46004803603602081101561027b57600080610278613a38565b50505b810190602081018135600160201b81111561029e5760008061029b613a38565b50505b8201836020820111156102b9576000806102b6613a38565b50505b803590602001918460208302840111600160201b831117156102e3576000806102e0613a38565b50505b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610730945050505050565b610350600480360360208110156103405760008061033d613a38565b50505b50356001600160a01b03166108d2565b604051901515815260200160405180910390f35b6101e46108f9565b6101e46004803603602081101561038b57600080610388613a38565b50505b50356001600160a01b031661099d565b6103a3610e5c565b6040516001600160a01b03909116815260200160405180910390f35b6103a3610e80565b6101e4600480360360208110156103e6576000806103e3613a38565b50505b50356001600160a01b0316610ea1565b6101e46004803603602081101561041557600080610412613a38565b50505b50356001600160a01b0316611775565b6103a3611a66565b6101e46004803603602081101561044c57600080610449613a38565b50505b50356001600160a01b0316611a8a565b6101e46004803603604081101561047b57600080610478613a38565b50505b6001600160a01b038235169190810190604081016020820135600160201b8111156104ae576000806104ab613a38565b50505b8201836020820111156104c9576000806104c6613a38565b50505b803590602001918460208302840111600160201b831117156104f3576000806104f0613a38565b50505b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611b53945050505050565b6101e4600480360360408110156105505760008061054d613a38565b50505b506001600160a01b03813516906020013515156122dc565b6105976004803603602081101561058757600080610584613a38565b50505b50356001600160a01b031661234b565b60405191825260208201526040908101905180910390f35b60005b838110156105f9576105f18585838181106105c957fe5b905060200201356001600160a01b03168484848181106105e557fe5b9050602002013561061e565b6001016105b2565b5050505050565b6003602052806000526040600020905080610619613aa3565b905081565b60005a610629613afe565b6001600160a01b03811660009081526004602052909150604081206001600160a01b0385166000908152600360205290915060408120905060008260020161066f613aa3565b6001600160a01b0385166000908152600184016020529091506106af908690604090206000848152602091909152604090206106a9613aa3565b90612379565b6001600160a01b0385166000908152600184016020526040902060008381526020919091526040902081906106e2613b44565b50505060008181526020849052610701908690604090206106a9613aa3565b60008281526020859052604090208190610719613b44565b5050506107288284868461239d565b505050505050565b6000600360005a61073f613afe565b6001600160a01b03166001600160a01b03168152602001908152602001600020905060005b82518110156107c157600083828151811061077b57fe5b60200260200101516001600160a01b038116600090815260046020529091506040812090506107b7848284846002016107b2613aa3565b61239d565b5050600101610764565b506000816107cd613aa3565b905060018111156108cd57600180836107e4613b44565b5050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb5a61081f613afe565b600184036040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038160008780610864613b92565b15801561087957600080610876613a38565b50505b505a610883613bde565b5050505050501580156108a3573d6000803e3d60006108a0613a38565b50505b505050506040513d60208110156108c2576000806108bf613a38565b50505b810190808051505050505b505050565b6001602052806000526040600020600091506108ec613aa3565b906101000a900460ff1681565b61090161254f565b6001600160a01b0316610912610e80565b6001600160a01b03161461092e5760008061092b613a38565b50505b6000808061093a613aa3565b906101000a90046001600160a01b03166001600160a01b0316600080516020613ded83398151915260405160405180910390a360008060018161097b613aa3565b816001600160a01b0302191690836001600160a01b03160217906108cd613b44565b6002806109a8613aa3565b14156109bc576000806109b9613a38565b50505b600280806109c8613b44565b505050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb7826040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680610a36613b92565b158015610a4b57600080610a48613a38565b50505b505a610a55613cc9565b5050505050158015610a74573d6000803e3d6000610a71613a38565b50505b505050506040513d6020811015610a9357600080610a90613a38565b50505b8101908080519250610ab091505057600080610aad613a38565b50505b6001600160a01b038216600090815260046020526040812090506000600360005a610ad9613afe565b6001600160a01b03166001600160a01b031681526020019081526020016000209050600082600101610b09613aa3565b9050600083600201610b19613aa3565b905080610b27836001612379565b14610b3a57600080610b37613a38565b50505b6001600160a01b038616600090815260028401602052829060409020610b5e613aa3565b14610b7157600080610b6e613a38565b50505b6001600160a01b0386166000908152600284016020528190604090208190610b97613b44565b5050506001600160a01b03861660009081526001840160205260408120600084815260209190915260409020610bcb613aa3565b90508015610e425760008381526020869052604081209050600081610bee613aa3565b6001600160a01b038a16600090815260018801602052909150604081206000878152602091909152604090208190610c24613b44565b50610c3391508290508461255f565b8083610c3d613b44565b5050506060896001600160a01b031663aa6ca8086040518163ffffffff1660e01b81526004016000604051808303818680610c76613b92565b158015610c8b57600080610c88613a38565b50505b505a610c95613cc9565b5050505050158015610cb4573d6000803e3d6000610cb1613a38565b50505b505050506040513d6000823e601f3d908101601f191682016040526020811015610ce657600080610ce3613a38565b50505b8101908080516040519392919084600160201b821115610d0e57600080610d0b613a38565b50505b908301906020820185811115610d2c57600080610d29613a38565b50505b82518660208202830111600160201b82111715610d5157600080610d4e613a38565b50505b825250602001908051906020019060200280838360005b83811015610d80578082015183820152602001610d68565b505050509050016040525050509050610dba81600081518110610d9f57fe5b602002602001015184600101610db3613aa3565b868561257d565b8060018501610dc7613b44565b505050610dee81600181518110610dda57fe5b602002602001015184600201610db3613aa3565b8060028501610dfb613b44565b505050610e2e7f000000000000000000000000000000000000000000000000000000000000000084600301610db3613aa3565b8060038501610e3b613b44565b5050505050505b505050505050600160028190610e56613b44565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008080610e8c613aa3565b906101000a90046001600160a01b0316905090565b600280610eac613aa3565b1415610ec057600080610ebd613a38565b50505b60028080610ecc613b44565b505050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb7826040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680610f3a613b92565b158015610f4f57600080610f4c613a38565b50505b505a610f59613cc9565b5050505050158015610f78573d6000803e3d6000610f75613a38565b50505b505050506040513d6020811015610f9757600080610f94613a38565b50505b8101908080519250610fb491505057600080610fb1613a38565b50505b81610fbe816125cd565b610fd057600080610fcd613a38565b50505b6001600160a01b03831660009081526004602052604081209050600081600201610ff8613aa3565b90508082600101611007613aa3565b1461101a57600080611017613a38565b50505b6060856001600160a01b031663aa6ca8086040518163ffffffff1660e01b81526004016000604051808303818680611050613b92565b15801561106557600080611062613a38565b50505b505a61106f613cc9565b505050505015801561108e573d6000803e3d600061108b613a38565b50505b505050506040513d6000823e601f3d908101601f1916820160405260208110156110c0576000806110bd613a38565b50505b8101908080516040519392919084600160201b8211156110e8576000806110e5613a38565b50505b90830190602082018581111561110657600080611103613a38565b50505b82518660208202830111600160201b8211171561112b57600080611128613a38565b50505b825250602001908051906020019060200280838360005b8381101561115a578082015183820152602001611142565b50505050905001604052505050905060008160008151811061117857fe5b60200260200101516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b60408110156111e4576000828201526020016111cd565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611221613b92565b15801561123657600080611233613a38565b50505b505a611240613cc9565b505050505015801561125f573d6000803e3d600061125c613a38565b50505b505050506040513d602081101561127e5760008061127b613a38565b50505b810190808051935060009250849150600190508151811061129b57fe5b60200260200101516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015611307576000828201526020016112f0565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611344613b92565b15801561135957600080611356613a38565b50505b505a611363613cc9565b5050505050158015611382573d6000803e3d600061137f613a38565b50505b505050506040513d60208110156113a15760008061139e613a38565b50505b810190808051935050506001600160a01b0389169050635915d806816370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b604081101561141857600082820152602001611401565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611455613b92565b15801561146a57600080611467613a38565b50505b505a611474613cc9565b5050505050158015611493573d6000803e3d6000611490613a38565b50505b505050506040513d60208110156114b2576000806114af613a38565b50505b81019080805192506000915060409050519080825280602002602001820160405280156114e9578160200160208202803683370190505b506040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561153f578082015183820152602001611527565b50505050905001935050505060408051808303816000878061155f613b92565b15801561157457600080611571613a38565b50505b505a61157e613bde565b50505050505015801561159e573d6000803e3d600061159b613a38565b50505b50505050604051601f3d908101601f1916820160409081528110156115cb576000806115c8613a38565b50505b506116f6905082846000815181106115df57fe5b60200260200101516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b604081101561164b57600082820152602001611634565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611688613b92565b15801561169d5760008061169a613a38565b50505b505a6116a7613cc9565b50505050501580156116c6573d6000803e3d60006116c3613a38565b50505b505050506040513d60208110156116e5576000806116e2613a38565b50505b8101908080519392505061255f9050565b60008581526020879052604090206001018190611711613b44565b50505061172581846001815181106115df57fe5b60008581526020879052604090206002018190611740613b44565b5061175091508590506001612379565b806002870161175d613b44565b50505050505050505050600160028190610e56613b44565b600280611780613aa3565b141561179457600080611791613a38565b50505b600280806117a0613b44565b505050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb7826040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381868061180e613b92565b15801561182357600080611820613a38565b50505b505a61182d613cc9565b505050505015801561184c573d6000803e3d6000611849613a38565b50505b505050506040513d602081101561186b57600080611868613a38565b50505b810190808051925061188891505057600080611885613a38565b50505b6001600160a01b038216600090815260046020526040812090506000600360005a6118b1613afe565b6001600160a01b03166001600160a01b0316815260200190815260200160002090506000826002016118e1613aa3565b6001600160a01b03861660009081526001840160205290915060408120600083815260209190915260409020611915613aa3565b90508015611a53576001600160a01b038616600090815260018401602052604081206000848152602091909152604090208190611950613b44565b505050600082815260208590526119759082906040902061196f613aa3565b9061255f565b6000838152602086905260409020819061198d613b44565b505050856001600160a01b031663a9059cbb5a6119a8613afe565b836040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087806119ea613b92565b1580156119ff576000806119fc613a38565b50505b505a611a09613bde565b505050505050158015611a29573d6000803e3d6000611a26613a38565b50505b505050506040513d6020811015611a4857600080611a45613a38565b50505b810190808051505050505b5050505050600160028190610e56613b44565b7f000000000000000000000000000000000000000000000000000000000000000081565b611a9261254f565b6001600160a01b0316611aa3610e80565b6001600160a01b031614611abf57600080611abc613a38565b50505b6001600160a01b038116611adb57600080611ad8613a38565b50505b806001600160a01b0316600080611af0613aa3565b906101000a90046001600160a01b03166001600160a01b0316600080516020613ded83398151915260405160405180910390a3806000600181611b31613aa3565b816001600160a01b0302191690836001600160a01b0316021790610e56613b44565b600280611b5e613aa3565b1415611b7257600080611b6f613a38565b50505b60028080611b7e613b44565b505050817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb7826040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611bec613b92565b158015611c0157600080611bfe613a38565b50505b505a611c0b613cc9565b5050505050158015611c2a573d6000803e3d6000611c27613a38565b50505b505050506040513d6020811015611c4957600080611c46613a38565b50505b8101908080519250611c6691505057600080611c63613a38565b50505b816000815111611c7e57600080611c7b613a38565b50505b6005815110611c9557600080611c92613a38565b50505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681600183510381518110611ccf57fe5b60200260200101516001600160a01b031614611cf357600080611cf0613a38565b50505b60015b8151816001011015611d695760016000838381518110611d1257fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600090611d45613aa3565b906101000a900460ff16611d6157600080611d5e613a38565b50505b600101611cf6565b506001600160a01b03841660009081526004602052604081209050600081600101611d92613aa3565b6000818152602084905290915060408120905082600201611db1613aa3565b611dbc836001612379565b14611dcf57600080611dcc613a38565b50505b6060876001600160a01b031663aa6ca8086040518163ffffffff1660e01b81526004016000604051808303818680611e05613b92565b158015611e1a57600080611e17613a38565b50505b505a611e24613cc9565b5050505050158015611e43573d6000803e3d6000611e40613a38565b50505b505050506040513d6000823e601f3d908101601f191682016040526020811015611e7557600080611e72613a38565b50505b8101908080516040519392919084600160201b821115611e9d57600080611e9a613a38565b50505b908301906020820185811115611ebb57600080611eb8613a38565b50505b82518660208202830111600160201b82111715611ee057600080611edd613a38565b50505b825250602001908051906020019060200280838360005b83811015611f0f578082015183820152602001611ef7565b505050509050016040525050509050600081600081518110611f2d57fe5b60200260200101516001600160a01b031688600081518110611f4b57fe5b60200260200101516001600160a01b03161415611f755782600101611f6e613aa3565b9050611fd1565b81600181518110611f8257fe5b60200260200101516001600160a01b031688600081518110611fa057fe5b60200260200101516001600160a01b03161415611fc35782600201611f6e613aa3565b600080611fce613a38565b50505b600080611fde8a84612d27565b91509150806000141561217157821561216c5781831461200657600080612003613a38565b50505b60005b8a518160010110156121415760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d78d848151811061205257fe5b60200260200101518e856001018151811061206957fe5b60200260200101516040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186806120b2613b92565b1580156120c7576000806120c4613a38565b50505b505a6120d1613cc9565b50505050501580156120f0573d6000803e3d60006120ed613a38565b50505b505050506040513d602081101561210f5760008061210c613a38565b50505b810190808051935061212692508391506125cd9050565b61213857600080612135613a38565b50505b50600101612009565b5061216c8b848c60008151811061215457fe5b60200260200101516001600160a01b0316919061303b565b6121fa565b60006121d68b845a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b60408110156121ce576000828201526020016121b7565b505050613097565b90506121e881876003016106a9613aa3565b80600388016121f5613b44565b505050505b8360008151811061220757fe5b60200260200101516001600160a01b03168a60008151811061222557fe5b60200260200101516001600160a01b031614156122615761224c828660010161196f613aa3565b8060018701612259613b44565b505050612282565b612271828660020161196f613aa3565b806002870161227e613b44565b5050505b8460010161228e613aa3565b1580156122a45750846002016122a2613aa3565b155b156122c5576122b4866001612379565b80600189016122c1613b44565b5050505b5050505050505050506001600281906105f9613b44565b6122e461254f565b6001600160a01b03166122f5610e80565b6001600160a01b0316146123115760008061230e613a38565b50505b6001600160a01b03821660009081526001602052819060409020600181612336613aa3565b8160ff021916908315150217906105f9613b44565b6004602052806000526040600020905060018101612367613aa3565b9080600201612374613aa3565b905082565b60008282018381101561239457600080612391613a38565b50505b90505b92915050565b6001600160a01b038216600090815260018501602052604090206001600160a01b038316600090815260028601602052604081206123d9613aa3565b81526020019081526020016000206123ef613aa3565b612421576001600160a01b0382166000908152600285016020528190604090208190612419613b44565b505050610e56565b6001600160a01b03821660009081526002850160205260408120612443613aa3565b9050600084600101612453613aa3565b9050600061246b6002612466848661255f565b6134fb565b90508061247a57505050610e56565b600061248888888887613511565b905060018211156124af576124ac6124a589898988600101613511565b8290612379565b90505b6124bc81896106a9613aa3565b80896124c6613b44565b5050506001600160a01b0386166000908152600189016020526040812060008660010181526020019081526020016000206124ff613aa3565b159050600283148061250e5750805b61251b578460010161251d565b855b6001600160a01b038816600090815260028b01602052604090208190612541613b44565b505050505050505050505050565b60005a61255a613afe565b905090565b60008282111561257757600080612574613a38565b50505b50900390565b6000806125948361258e8787613623565b90613650565b905080156125b9576125b95a6125a8613afe565b6001600160a01b038816908361303b565b6125c3858261255f565b9695505050505050565b60006060826001600160a01b031663aa6ca8086040518163ffffffff1660e01b81526004016000604051808303818680612605613b92565b15801561261a57600080612617613a38565b50505b505a612624613cc9565b5050505050158015612643573d6000803e3d6000612640613a38565b50505b505050506040513d6000823e601f3d908101601f19168201604052602081101561267557600080612672613a38565b50505b8101908080516040519392919084600160201b82111561269d5760008061269a613a38565b50505b9083019060208201858111156126bb576000806126b8613a38565b50505b82518660208202830111600160201b821117156126e0576000806126dd613a38565b50505b825250602001908051906020019060200280838360005b8381101561270f5780820151838201526020016126f7565b5050505090500160405250505090506000806000808460008151811061273157fe5b60200260200101516001600160a01b03166370a08231886040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680612782613b92565b15801561279757600080612794613a38565b50505b505a6127a1613cc9565b50505050501580156127c0573d6000803e3d60006127bd613a38565b50505b505050506040513d60208110156127df576000806127dc613a38565b50505b81019080805193506000925087915060019050815181106127fc57fe5b60200260200101516001600160a01b03166370a08231896040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381868061284d613b92565b1580156128625760008061285f613a38565b50505b505a61286c613cc9565b505050505015801561288b573d6000803e3d6000612888613a38565b50505b505050506040513d60208110156128aa576000806128a7613a38565b50505b81019080805193506128bf9250613d8f915050565b886001600160a01b0316636edc2c09886000815181106128db57fe5b60200260200101516040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016040805180830381868061291c613b92565b1580156129315760008061292e613a38565b50505b505a61293b613cc9565b505050505015801561295a573d6000803e3d6000612957613a38565b50505b505050506040513d604081101561297957600080612976613a38565b50505b810190808051929190602001805164ffffffffff1660208601525050506001600160d81b0316815260006129b66129b08386613678565b856136d9565b9050896001600160a01b0316636edc2c09896001815181106129d457fe5b60200260200101516040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160408051808303818680612a15613b92565b158015612a2a57600080612a27613a38565b50505b505a612a34613cc9565b5050505050158015612a53573d6000803e3d6000612a50613a38565b50505b505050506040513d6040811015612a7257600080612a6f613a38565b50505b810190808051929190602001805164ffffffffff1660208701525050506001600160d81b031682526000612aa96129b08486613678565b90508a6001600160a01b0316635ed9156d8a600081518110612ac757fe5b60200260200101516040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160408051808303818680612b08613b92565b158015612b1d57600080612b1a613a38565b50505b505a612b27613cc9565b5050505050158015612b46573d6000803e3d6000612b43613a38565b50505b505050506040513d6040811015612b6557600080612b62613a38565b50505b810190808051929190602001805164ffffffffff1660208801525050506001600160d81b031683526000612ba2612b9c8588613678565b876134fb565b90508b6001600160a01b0316635ed9156d8b600181518110612bc057fe5b60200260200101516040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160408051808303818680612c01613b92565b158015612c1657600080612c13613a38565b50505b505a612c20613cc9565b5050505050158015612c3f573d6000803e3d6000612c3c613a38565b50505b505050506040513d6040811015612c5e57600080612c5b613a38565b50505b810190808051929190602001805164ffffffffff1660208901525050506001600160d81b031684526000612c95612b9c8688613678565b9050612cad8261258e670de0b6b3a764000086613623565b9950612cc58461258e670de0b6b3a764000084613623565b9850612cdd8761258e670de0b6b3a764000089613623565b975050505050505050612d0081662386f26fc1000061362390919063ffffffff16565b612d1c670de0b6b3a7640000612d16868661255f565b90613623565b109695505050505050565b808060008451905060005b818160010110156130325760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d7888481518110612d7a57fe5b6020026020010151898560010181518110612d9157fe5b60200260200101516040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303818680612dda613b92565b158015612def57600080612dec613a38565b50505b505a612df9613cc9565b5050505050158015612e18573d6000803e3d6000612e15613a38565b50505b505050506040513d6020811015612e3757600080612e34613a38565b50505b810190808051935060009250612f17915060649050898581518110612e5857fe5b60200260200101516001600160a01b03166370a08231856040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680612ea9613b92565b158015612ebe57600080612ebb613a38565b50505b505a612ec8613cc9565b5050505050158015612ee7573d6000803e3d6000612ee4613a38565b50505b505050506040513d6020811015612f0657600080612f03613a38565b50505b810190808051939250506136509050565b905084811015612f3557612f2f8561258e8884613623565b95508094505b816001600160a01b0316631e1401f8898581518110612f5057fe5b60200260200101518a8660010181518110612f6757fe5b6020026020010151886040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291909216602482015260448101919091526064016020604051808303818680612fbb613b92565b158015612fd057600080612fcd613a38565b50505b505a612fda613cc9565b5050505050158015612ff9573d6000803e3d6000612ff6613a38565b50505b505050506040513d602081101561301857600080613015613a38565b50505b810190808051975050506001939093019250612d32915050565b50509250929050565b6108cd8363a9059cbb60e01b84846040516001600160a01b0390921660248301526044820152606401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b031690911790526136e9565b8160005b845181600101101561341a5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d78784815181106130e457fe5b60200260200101518885600101815181106130fb57fe5b60200260200101516040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303818680613144613b92565b15801561315957600080613156613a38565b50505b505a613163613cc9565b5050505050158015613182573d6000803e3d600061317f613a38565b50505b505050506040513d60208110156131a15760008061319e613a38565b50505b81019080805193506131b892508391506125cd9050565b6131ca576000806131c7613a38565b50505b6131f381848885815181106131db57fe5b60200260200101516001600160a01b03169190613777565b855182600201101561330557806001600160a01b031663d5bcb9b587848151811061321a57fe5b602002602001015188856001018151811061323157fe5b6020026020010151866000806040516001600160e01b031960e088901b1681526001600160a01b039586166004820152938516602485015260448401929092526064830152909116608482015260a40160206040518083038160008780613296613b92565b1580156132ab576000806132a8613a38565b50505b505a6132b5613bde565b5050505050501580156132d5573d6000803e3d60006132d2613a38565b50505b505050506040513d60208110156132f4576000806132f1613a38565b50505b810190808051955061341192505050565b806001600160a01b031663e331d03987848151811061332057fe5b602002602001015188856001018151811061333757fe5b6020026020010151866000808a6040516001600160e01b031960e089901b1681526001600160a01b0396871660048201529486166024860152604485019390935260648401919091528316608483015290911660a482015260c401602060405180830381600087806133a7613b92565b1580156133bc576000806133b9613a38565b50505b505a6133c6613bde565b5050505050501580156133e6573d6000803e3d60006133e3613a38565b50505b505050506040513d602081101561340557600080613402613a38565b50505b81019080805195505050505b5060010161309b565b508351600114156134f4578360008151811061343257fe5b60200260200101516001600160a01b031663a9059cbb83836040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000878061348b613b92565b1580156134a05760008061349d613a38565b50505b505a6134aa613bde565b5050505050501580156134ca573d6000803e3d60006134c7613a38565b50505b505050506040513d60208110156134e9576000806134e6613a38565b50505b810190808051505050505b9392505050565b600081831061350a5781612394565b5090919050565b6001600160a01b0382166000908152600185016020528060408120600084815260209190915260409020613543613aa3565b9050801561361a576000838152602086905260408120600301613564613aa3565b600085815260208890529091506040812061357d613aa3565b905061358d8161258e8486613623565b6001600160a01b038716600090815260018a016020529094506040812060008781526020919091526040902081906135c3613b44565b506135d291508290508461255f565b600086815260208990526040902081906135ea613b44565b506135f991508390508561255f565b60008681526020899052604090206003018190613614613b44565b50505050505b50949350505050565b60008261363257506000612397565b8282028284828161363f57fe5b041461239457600080612391613a38565b600080821161366757600080613664613a38565b50505b81838161367057fe5b049392505050565b600080613698603c612466866020015164ffffffffff165a61196f613da6565b905060006136a7603c8361255f565b90506136d0603c61258e6136bb8786613623565b6106a9858a516001600160d81b031690613623565b95945050505050565b60008183101561350a5781612394565b6060613734826040516040808201905260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201526001600160a01b0386169190613900565b90506000815111156108cd57602081018151602081101561375d5760008061375a613a38565b50505b81019080805192506108cd915050576000806105f9613a38565b8015806138925750826001600160a01b031663dd62ed3e5a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b60408110156137e4576000828201526020016137cd565b505050846040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303818680613829613b92565b15801561383e5760008061383b613a38565b50505b505a613848613cc9565b5050505050158015613867573d6000803e3d6000613864613a38565b50505b505050506040513d602081101561388657600080613883613a38565b50505b81019080805115925050505b6138a4576000806138a1613a38565b50505b6108cd8363095ea7b360e01b84846040516001600160a01b0390921660248301526044820152606401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b031690911790526136e9565b606061390b846139df565b61391d5760008061391a613a38565b50505b60006060856001600160a01b0316856040518082805190602001908083835b6020831061395b5780518252601f19909201916020918201910161393c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865a613995613bde565b5050505050509150503d80600081146139ca576040513d603f01601f191681016040523d815291503d6000602084013e6139cf565b606091505b50915091506125c38282866139f4565b600080826139eb613b92565b15159392505050565b60608315613a035750816134f4565b600083511115613a245782518084602001613a1c613a38565b5050506134f4565b600080613a2f613a38565b50509392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015613a70578086015182820160400152602001613a55565b506020828760640184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52505050565b6303daa959598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051935060005b60408110156108cd57600082820152602001613ae7565b6373509064598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020613ae7565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52600081526020613ae7565b638435035b598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020613ae7565b6385979f76598160e01b8152613c0f565b8080831115612397575090919050565b8080831015612397575090919050565b836004820152846024820152606060448201528760648201526084810160005b89811015613c47578089015182820152602001613c2f565b506060828a60a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8c8c82606087013350600060045af15059613c9c8e3d613bff565b8d01613ca88187613bef565b5b82811015613cbd5760008152602001613ca9565b50929d50505050505050565b638540661f598160e01b8152836004820152846024820152606060448201528660648201526084810160005b88811015613d0d578088015182820152602001613cf5565b506060828960a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8b8b82606087013350600060045af15059613d628d3d613bff565b8c01613d6e8187613bef565b5b82811015613d835760008152602001613d6f565b50929c50505050505050565b604051604080820190526000808252602082015290565b63bdbf8c36598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020613ae756fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9674,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "pathWhitelist",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)1118,t_bool)"
      },
      {
        "astId": 1244,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3163,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "userInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UserInfo)3141_storage)"
      },
      {
        "astId": 3167,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20)1118,t_struct(TokenInfo)3159_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1118": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3141_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReferralFeeReceiver.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3141_storage"
      },
      "t_mapping(t_contract(IERC20)1118,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)1118,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)1118,t_struct(TokenInfo)3159_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => struct ReferralFeeReceiver.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)3159_storage"
      },
      "t_mapping(t_contract(IERC20)1118,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(EpochBalance)3150_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ReferralFeeReceiver.EpochBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochBalance)3150_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EpochBalance)3150_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.EpochBalance",
        "members": [
          {
            "astId": 3143,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3145,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "token0Balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3147,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "token1Balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3149,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "inchBalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenInfo)3159_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.TokenInfo",
        "members": [
          {
            "astId": 3154,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "epochBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(EpochBalance)3150_storage)"
          },
          {
            "astId": 3156,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "firstUnprocessedEpoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3158,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "currentEpoch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)3141_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.UserInfo",
        "members": [
          {
            "astId": 3130,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3136,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_contract(IERC20)1118,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 3140,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "firstUnprocessedEpoch",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_contract(IERC20)1118,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}