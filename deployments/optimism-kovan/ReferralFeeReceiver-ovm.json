{
  "address": "0xb12443d2c1dB7e566795b18f77D58fBdac1096ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inchToken",
          "type": "address"
        },
        {
          "internalType": "contract IMooniswapFactory",
          "name": "_mooniswapFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        }
      ],
      "name": "claimCurrentEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        }
      ],
      "name": "claimFrozenEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        }
      ],
      "name": "freezeEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inchToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mooniswapFactory",
      "outputs": [
        {
          "internalType": "contract IMooniswapFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pathWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "firstUnprocessedEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentEpoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "updatePathWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "updateRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x33990f67adcbaed9aa48a79dfcc3bccd1e351b0e8bed9bfc035c431418072643",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xb12443d2c1dB7e566795b18f77D58fBdac1096ea",
    "transactionIndex": 0,
    "gasUsed": "6704329",
    "logsBloom": "0x
    "blockHash": "0xc271f3885076c851f0596e1c55954d2fb7873a68347e0a9b3e7ddf91a547de5d",
    "transactionHash": "0x33990f67adcbaed9aa48a79dfcc3bccd1e351b0e8bed9bfc035c431418072643",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 101331,
        "transactionHash": "0x33990f67adcbaed9aa48a79dfcc3bccd1e351b0e8bed9bfc035c431418072643",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xc271f3885076c851f0596e1c55954d2fb7873a68347e0a9b3e7ddf91a547de5d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 101331,
        "transactionHash": "0x33990f67adcbaed9aa48a79dfcc3bccd1e351b0e8bed9bfc035c431418072643",
        "address": "0xb12443d2c1dB7e566795b18f77D58fBdac1096ea",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc271f3885076c851f0596e1c55954d2fb7873a68347e0a9b3e7ddf91a547de5d"
      }
    ],
    "blockNumber": 101331,
    "cumulativeGasUsed": "6704329",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x135C8C0393fbbb6942294192064EeD5e63A24A93",
    "0x2Be171963835b6d21202b62EEE54c67910680129"
  ],
  "solcInputHash": "1a562338fc3dcc7c3518836eb7783537",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12-develop.2020.12.9+commit.9b8c5857\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inchToken\",\"type\":\"address\"},{\"internalType\":\"contract IMooniswapFactory\",\"name\":\"_mooniswapFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"}],\"name\":\"claimCurrentEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"}],\"name\":\"claimFrozenEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"}],\"name\":\"freezeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inchToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooniswapFactory\",\"outputs\":[{\"internalType\":\"contract IMooniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pathWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstUnprocessedEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"updatePathWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReferralFeeReceiver.sol\":\"ReferralFeeReceiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Mooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/Sqrt.sol\\\";\\nimport \\\"./libraries/VirtualBalance.sol\\\";\\nimport \\\"./governance/MooniswapGovernance.sol\\\";\\n\\n\\ncontract Mooniswap is MooniswapGovernance {\\n    using Sqrt for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    struct Balances {\\n        uint256 src;\\n        uint256 dst;\\n    }\\n\\n    struct Fees {\\n        uint256 fee;\\n        uint256 slippageFee;\\n    }\\n\\n    event Error(string reason);\\n\\n    event Deposited(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Withdrawn(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Swapped(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed srcToken,\\n        address dstToken,\\n        uint256 amount,\\n        uint256 result,\\n        uint256 srcAdditionBalance,\\n        uint256 dstRemovalBalance,\\n        address referral\\n    );\\n\\n    event Sync(\\n        uint256 srcBalance,\\n        uint256 dstBalance,\\n        uint256 fee,\\n        uint256 slippageFee,\\n        uint256 referralShare,\\n        uint256 governanceShare\\n    );\\n\\n    uint256 private constant _BASE_SUPPLY = 1000;  // Total supply on first deposit\\n\\n    IERC20 public token0;\\n    IERC20 public token1;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForAddition;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForRemoval;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    modifier whenNotShutdown {\\n        require(mooniswapFactoryGovernance.isActive(), \\\"Mooniswap: factory shutdown\\\");\\n        _;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    constructor(string memory name_, string memory symbol_) public ERC20(name_, symbol_) {\\n        require(bytes(name_).length > 0, \\\"Mooniswap: name is empty\\\");\\n        require(bytes(symbol_).length > 0, \\\"Mooniswap: symbol is empty\\\");\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function init(\\n        IERC20 token0_,\\n        IERC20 token1_,\\n        string memory name_,\\n        string memory symbol_,\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance\\n    ) external {\\n        require(bytes(name_).length > 0, \\\"Mooniswap: name is empty\\\");\\n        require(bytes(symbol_).length > 0, \\\"Mooniswap: symbol is empty\\\");\\n        require(token0_ != token1_, \\\"Mooniswap: duplicate tokens\\\");\\n        token0 = token0_;\\n        token1 = token1_;\\n        _name = name_;\\n        _symbol = symbol_;\\n        _init(_mooniswapFactoryGovernance);\\n    }\\n\\n    function getTokens() external view returns(IERC20[] memory tokens) {\\n        tokens = new IERC20[](2);\\n        tokens[0] = token0;\\n        tokens[1] = token1;\\n    }\\n\\n    function tokens(uint256 i) external view returns(IERC20) {\\n        if (i == 0) {\\n            return token0;\\n        } else if (i == 1) {\\n            return token1;\\n        } else {\\n            revert(\\\"Pool has two tokens\\\");\\n        }\\n    }\\n\\n    function getBalanceForAddition(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        return Math.max(virtualBalancesForAddition[token].current(balance), balance);\\n    }\\n\\n    function getBalanceForRemoval(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        return Math.min(virtualBalancesForRemoval[token].current(balance), balance);\\n    }\\n\\n    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256) {\\n        return _getReturn(src, dst, amount, getBalanceForAddition(src), getBalanceForRemoval(dst), fee(), slippageFee());\\n    }\\n\\n    function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts) external returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        return depositFor(maxAmounts, minAmounts, msg.sender);\\n    }\\n\\n    function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target) public nonReentrant returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalSupply == 0) {\\n            fairSupply = _BASE_SUPPLY.mul(99);\\n            _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.max(fairSupply, maxAmounts[i]);\\n\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                require(maxAmounts[i] >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), maxAmounts[i]);\\n                receivedAmounts[i] = maxAmounts[i];\\n            }\\n        }\\n        else {\\n            uint256[2] memory realBalances;\\n            for (uint i = 0; i < realBalances.length; i++) {\\n                realBalances[i] = _tokens[i].balanceOf(address(this));\\n            }\\n\\n            // Pre-compute fair supply\\n            fairSupply = type(uint256).max;\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 fairSupplyCached = fairSupply;\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\n                require(amount >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), amount);\\n                receivedAmounts[i] = _tokens[i].balanceOf(address(this)).sub(realBalances[i]);\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                virtualBalancesForRemoval[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n                virtualBalancesForAddition[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n            }\\n        }\\n\\n        require(fairSupply > 0, \\\"Mooniswap: result is not enough\\\");\\n        _mint(target, fairSupply);\\n\\n        emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\n    }\\n\\n    function withdraw(uint256 amount, uint256[] memory minReturns) external returns(uint256[2] memory withdrawnAmounts) {\\n        return withdrawFor(amount, minReturns, msg.sender);\\n    }\\n\\n    function withdrawFor(uint256 amount, uint256[] memory minReturns, address target) public nonReentrant returns(uint256[2] memory withdrawnAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n        _burn(msg.sender, amount);\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            IERC20 token = _tokens[i];\\n\\n            uint256 preBalance = token.balanceOf(address(this));\\n            uint256 value = preBalance.mul(amount).div(totalSupply);\\n            token.safeTransfer(target, value);\\n            withdrawnAmounts[i] = value;\\n            require(i >= minReturns.length || value >= minReturns[i], \\\"Mooniswap: result is not enough\\\");\\n\\n            virtualBalancesForAddition[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\\n            virtualBalancesForRemoval[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\\n        }\\n\\n        emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\n    }\\n\\n    function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral) external returns(uint256 result) {\\n        return swapFor(src, dst, amount, minReturn, referral, msg.sender);\\n    }\\n\\n    function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address receiver) public nonReentrant whenNotShutdown returns(uint256 result) {\\n        Balances memory balances = Balances({\\n            src: src.balanceOf(address(this)),\\n            dst: dst.balanceOf(address(this))\\n        });\\n        uint256 confirmed;\\n        Balances memory virtualBalances;\\n        Fees memory fees = Fees({\\n            fee: fee(),\\n            slippageFee: slippageFee()\\n        });\\n        (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\n        emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\n        _mintRewards(confirmed, result, referral, balances, fees);\\n    }\\n\\n    function _doTransfers(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address receiver, Balances memory balances, Fees memory fees)\\n        private returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\n    {\\n        virtualBalances.src = virtualBalancesForAddition[src].current(balances.src);\\n        virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\n        virtualBalances.dst = virtualBalancesForRemoval[dst].current(balances.dst);\\n        virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\n        src.safeTransferFrom(msg.sender, address(this), amount);\\n        confirmed = src.balanceOf(address(this)).sub(balances.src);\\n        result = _getReturn(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\n        require(result > 0 && result >= minReturn, \\\"Mooniswap: return is not enough\\\");\\n        dst.safeTransfer(receiver, result);\\n\\n        // Update virtual balances to the same direction only at imbalanced state\\n        if (virtualBalances.src != balances.src) {\\n            virtualBalancesForAddition[src].set(virtualBalances.src.add(confirmed));\\n        }\\n        if (virtualBalances.dst != balances.dst) {\\n            virtualBalancesForRemoval[dst].set(virtualBalances.dst.sub(result));\\n        }\\n        // Update virtual balances to the opposite direction\\n        virtualBalancesForRemoval[src].update(balances.src);\\n        virtualBalancesForAddition[dst].update(balances.dst);\\n    }\\n\\n    function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees) private {\\n        (uint256 referralShare, uint256 governanceShare, address govWallet, address feeCollector) = mooniswapFactoryGovernance.shareParameters();\\n\\n        uint256 refReward;\\n        uint256 govReward;\\n\\n        uint256 invariantRatio = uint256(1e36);\\n        invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\n        invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\n        if (invariantRatio > 1e36) {\\n            // calculate share only if invariant increased\\n            invariantRatio = invariantRatio.sqrt();\\n            uint256 invIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\n\\n            refReward = (referral != address(0)) ? invIncrease.mul(referralShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n            govReward = (govWallet != address(0)) ? invIncrease.mul(governanceShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n\\n            if (feeCollector == address(0)) {\\n                if (refReward > 0) {\\n                    _mint(referral, refReward);\\n                }\\n                if (govReward > 0) {\\n                    _mint(govWallet, govReward);\\n                }\\n            }\\n            else if (refReward > 0 || govReward > 0) {\\n                uint256 len = (refReward > 0 ? 1 : 0) + (govReward > 0 ? 1 : 0);\\n                address[] memory wallets = new address[](len);\\n                uint256[] memory rewards = new uint256[](len);\\n\\n                wallets[0] = referral;\\n                rewards[0] = refReward;\\n                if (govReward > 0) {\\n                    wallets[len - 1] = govWallet;\\n                    rewards[len - 1] = govReward;\\n                }\\n\\n                try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\n                    _mint(feeCollector, refReward.add(govReward));\\n                }\\n                catch {\\n                    emit Error(\\\"updateRewards() failed\\\");\\n                }\\n            }\\n        }\\n\\n        emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, refReward, govReward);\\n    }\\n\\n    /*\\n        spot_ret = dx * y / x\\n        uni_ret = dx * y / (x + dx)\\n        slippage = (spot_ret - uni_ret) / spot_ret\\n        slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\n        slippage = dx / (x + dx)\\n        ret = uni_ret * (1 - slip_fee * slippage)\\n        ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\n        ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\n\\n        x = amount * denominator\\n        dx = amount * (denominator - fee)\\n    */\\n    function _getReturn(IERC20 src, IERC20 dst, uint256 amount, uint256 srcBalance, uint256 dstBalance, uint256 fee, uint256 slippageFee) internal view returns(uint256) {\\n        if (src > dst) {\\n            (src, dst) = (dst, src);\\n        }\\n        if (amount > 0 && src == token0 && dst == token1) {\\n            uint256 taxedAmount = amount.sub(amount.mul(fee).div(MooniswapConstants._FEE_DENOMINATOR));\\n            uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\n            uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\n            uint256 feeNumerator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\n            uint256 feeDenominator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\n            return ret.mul(feeNumerator).div(feeDenominator);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74a69b35535a77eb2349704fd2efed8173aebb1962763f2c06440f068a2eca28\",\"license\":\"MIT\"},\"contracts/ReferralFeeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./utils/Converter.sol\\\";\\n\\n\\ncontract ReferralFeeReceiver is IFeeCollector, Converter, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 balance;\\n        mapping(IERC20 => mapping(uint256 => uint256)) share;\\n        mapping(IERC20 => uint256) firstUnprocessedEpoch;\\n    }\\n\\n    struct EpochBalance {\\n        uint256 totalSupply;\\n        uint256 token0Balance;\\n        uint256 token1Balance;\\n        uint256 inchBalance;\\n    }\\n\\n    struct TokenInfo {\\n        mapping(uint256 => EpochBalance) epochBalance;\\n        uint256 firstUnprocessedEpoch;\\n        uint256 currentEpoch;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(IERC20 => TokenInfo) public tokenInfo;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(IERC20 _inchToken, IMooniswapFactory _mooniswapFactory) public Converter(_inchToken, _mooniswapFactory) {}\\n\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external override {\\n        for (uint i = 0; i < receivers.length; i++) {\\n            updateReward(receivers[i], amounts[i]);\\n        }\\n    }\\n\\n    function updateReward(address referral, uint256 amount) public override {\\n        Mooniswap mooniswap = Mooniswap(msg.sender);\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        UserInfo storage user = userInfo[referral];\\n        uint256 currentEpoch = token.currentEpoch;\\n\\n        // Add new reward to current epoch\\n        user.share[mooniswap][currentEpoch] = user.share[mooniswap][currentEpoch].add(amount);\\n        token.epochBalance[currentEpoch].totalSupply = token.epochBalance[currentEpoch].totalSupply.add(amount);\\n\\n        // Collect all processed epochs and advance user token epoch\\n        _collectProcessedEpochs(user, token, mooniswap, currentEpoch);\\n    }\\n\\n    function freezeEpoch(Mooniswap mooniswap) external nonReentrant validPool(mooniswap) validSpread(mooniswap) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        uint256 currentEpoch = token.currentEpoch;\\n        require(token.firstUnprocessedEpoch == currentEpoch, \\\"Previous epoch is not finalized\\\");\\n\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n        uint256 token0Balance = tokens[0].balanceOf(address(this));\\n        uint256 token1Balance = tokens[1].balanceOf(address(this));\\n        mooniswap.withdraw(mooniswap.balanceOf(address(this)), new uint256[](0));\\n        token.epochBalance[currentEpoch].token0Balance = tokens[0].balanceOf(address(this)).sub(token0Balance);\\n        token.epochBalance[currentEpoch].token1Balance = tokens[1].balanceOf(address(this)).sub(token1Balance);\\n        token.currentEpoch = currentEpoch.add(1);\\n    }\\n\\n    function trade(Mooniswap mooniswap, IERC20[] memory path) external nonReentrant validPool(mooniswap) validPath(path) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        uint256 firstUnprocessedEpoch = token.firstUnprocessedEpoch;\\n        EpochBalance storage epochBalance = token.epochBalance[firstUnprocessedEpoch];\\n        require(firstUnprocessedEpoch.add(1) == token.currentEpoch, \\\"Prev epoch already finalized\\\");\\n\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n        uint256 availableBalance;\\n        if (path[0] == tokens[0]) {\\n            availableBalance = epochBalance.token0Balance;\\n        } else if (path[0] == tokens[1]) {\\n            availableBalance = epochBalance.token1Balance;\\n        } else {\\n            revert(\\\"Invalid first token\\\");\\n        }\\n\\n        (uint256 amount, uint256 returnAmount) = _maxAmountForSwap(path, availableBalance);\\n        if (returnAmount == 0) {\\n            // get rid of dust\\n            if (availableBalance > 0) {\\n                require(availableBalance == amount, \\\"availableBalance is not dust\\\");\\n                for (uint256 i = 0; i + 1 < path.length; i += 1) {\\n                    Mooniswap _mooniswap = mooniswapFactory.pools(path[i], path[i+1]);\\n                    require(_validateSpread(_mooniswap), \\\"Spread is too high\\\");\\n                }\\n                path[0].safeTransfer(address(mooniswap), availableBalance);\\n            }\\n        } else {\\n            uint256 receivedAmount = _swap(path, amount, address(this));\\n            epochBalance.inchBalance = epochBalance.inchBalance.add(receivedAmount);\\n        }\\n\\n        if (path[0] == tokens[0]) {\\n            epochBalance.token0Balance = epochBalance.token0Balance.sub(amount);\\n        } else {\\n            epochBalance.token1Balance = epochBalance.token1Balance.sub(amount);\\n        }\\n\\n        if (epochBalance.token0Balance == 0 && epochBalance.token1Balance == 0) {\\n            token.firstUnprocessedEpoch = firstUnprocessedEpoch.add(1);\\n        }\\n    }\\n\\n    function claim(Mooniswap[] memory pools) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n        for (uint256 i = 0; i < pools.length; ++i) {\\n            Mooniswap mooniswap = pools[i];\\n            TokenInfo storage token = tokenInfo[mooniswap];\\n            _collectProcessedEpochs(user, token, mooniswap, token.currentEpoch);\\n        }\\n\\n        uint256 balance = user.balance;\\n        if (balance > 1) {\\n            // Avoid erasing storage to decrease gas footprint for referral payments\\n            user.balance = 1;\\n            inchToken.transfer(msg.sender, balance - 1);\\n        }\\n    }\\n\\n    function claimCurrentEpoch(Mooniswap mooniswap) external nonReentrant validPool(mooniswap) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 currentEpoch = token.currentEpoch;\\n        uint256 balance = user.share[mooniswap][currentEpoch];\\n        if (balance > 0) {\\n            user.share[mooniswap][currentEpoch] = 0;\\n            token.epochBalance[currentEpoch].totalSupply = token.epochBalance[currentEpoch].totalSupply.sub(balance);\\n            mooniswap.transfer(msg.sender, balance);\\n        }\\n    }\\n\\n    function claimFrozenEpoch(Mooniswap mooniswap) external nonReentrant validPool(mooniswap) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 firstUnprocessedEpoch = token.firstUnprocessedEpoch;\\n        uint256 currentEpoch = token.currentEpoch;\\n\\n        require(firstUnprocessedEpoch.add(1) == currentEpoch, \\\"Epoch already finalized\\\");\\n        require(user.firstUnprocessedEpoch[mooniswap] == firstUnprocessedEpoch, \\\"Epoch funds already claimed\\\");\\n\\n        user.firstUnprocessedEpoch[mooniswap] = currentEpoch;\\n        uint256 share = user.share[mooniswap][firstUnprocessedEpoch];\\n\\n        if (share > 0) {\\n            EpochBalance storage epochBalance = token.epochBalance[firstUnprocessedEpoch];\\n            uint256 totalSupply = epochBalance.totalSupply;\\n            user.share[mooniswap][firstUnprocessedEpoch] = 0;\\n            epochBalance.totalSupply = totalSupply.sub(share);\\n\\n            IERC20[] memory tokens = mooniswap.getTokens();\\n            epochBalance.token0Balance = _transferTokenShare(tokens[0], epochBalance.token0Balance, share, totalSupply);\\n            epochBalance.token1Balance = _transferTokenShare(tokens[1], epochBalance.token1Balance, share, totalSupply);\\n            epochBalance.inchBalance = _transferTokenShare(inchToken, epochBalance.inchBalance, share, totalSupply);\\n        }\\n    }\\n\\n    function _transferTokenShare(IERC20 token, uint256 balance, uint256 share, uint256 totalSupply) private returns(uint256 newBalance) {\\n        uint256 amount = balance.mul(share).div(totalSupply);\\n        if (amount > 0) {\\n            token.safeTransfer(msg.sender, amount);\\n        }\\n        return balance.sub(amount);\\n    }\\n\\n    function _collectProcessedEpochs(UserInfo storage user, TokenInfo storage token, Mooniswap mooniswap, uint256 currentEpoch) private {\\n        // Early return for the new users\\n        if (user.share[mooniswap][user.firstUnprocessedEpoch[mooniswap]] == 0) {\\n            user.firstUnprocessedEpoch[mooniswap] = currentEpoch;\\n            return;\\n        }\\n\\n        uint256 userEpoch = user.firstUnprocessedEpoch[mooniswap];\\n        uint256 tokenEpoch = token.firstUnprocessedEpoch;\\n        uint256 epochCount = Math.min(2, tokenEpoch.sub(userEpoch)); // 0, 1 or 2 epochs\\n        if (epochCount == 0) {\\n            return;\\n        }\\n\\n        // Claim 1 or 2 processed epochs for the user\\n        uint256 collected = _collectEpoch(user, token, mooniswap, userEpoch);\\n        if (epochCount > 1) {\\n            collected = collected.add(_collectEpoch(user, token, mooniswap, userEpoch + 1));\\n        }\\n        user.balance = user.balance.add(collected);\\n\\n        // Update user token epoch counter\\n        bool emptySecondEpoch = user.share[mooniswap][userEpoch + 1] == 0;\\n        user.firstUnprocessedEpoch[mooniswap] = (epochCount == 2 || emptySecondEpoch) ? currentEpoch : userEpoch + 1;\\n    }\\n\\n    function _collectEpoch(UserInfo storage user, TokenInfo storage token, Mooniswap mooniswap, uint256 epoch) private returns(uint256 collected) {\\n        uint256 share = user.share[mooniswap][epoch];\\n        if (share > 0) {\\n            uint256 inchBalance = token.epochBalance[epoch].inchBalance;\\n            uint256 totalSupply = token.epochBalance[epoch].totalSupply;\\n\\n            collected = inchBalance.mul(share).div(totalSupply);\\n\\n            user.share[mooniswap][epoch] = 0;\\n            token.epochBalance[epoch].totalSupply = totalSupply.sub(share);\\n            token.epochBalance[epoch].inchBalance = inchBalance.sub(collected);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5825254dc9e4c58e2d3c20ccdda3fd7a47133746f3f973f20cc89650c680009c\",\"license\":\"MIT\"},\"contracts/governance/MooniswapGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactoryGovernance.sol\\\";\\nimport \\\"../libraries/LiquidVoting.sol\\\";\\nimport \\\"../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\n\\n\\nabstract contract MooniswapGovernance is ERC20, Ownable, ReentrancyGuard {\\n    using Vote for Vote.Data;\\n    using LiquidVoting for LiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeCast for uint256;\\n\\n    event FeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n    event SlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n\\n    IMooniswapFactoryGovernance public mooniswapFactoryGovernance;\\n    LiquidVoting.Data private _fee;\\n    LiquidVoting.Data private _slippageFee;\\n    address private _owner;\\n    bool private _initialized;\\n\\n    function _init(IMooniswapFactoryGovernance _mooniswapFactoryGovernance) internal {\\n        require(!_initialized, \\\"Already initialized\\\");\\n        mooniswapFactoryGovernance = _mooniswapFactoryGovernance;\\n        _fee.data.result = _mooniswapFactoryGovernance.defaultFee().toUint104();\\n        _slippageFee.data.result = _mooniswapFactoryGovernance.defaultSlippageFee().toUint104();\\n        _owner = msg.sender;\\n        _initialized = true;\\n    }\\n\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    function setMooniswapFactoryGovernance(IMooniswapFactoryGovernance newMooniswapFactoryGovernance) external onlyOwner {\\n        mooniswapFactoryGovernance = newMooniswapFactoryGovernance;\\n        this.discardFeeVote();\\n        this.discardSlippageFeeVote();\\n    }\\n\\n    function fee() public view returns(uint256) {\\n        return _fee.data.current();\\n    }\\n\\n    function slippageFee() public view returns(uint256) {\\n        return _slippageFee.data.current();\\n    }\\n\\n    function virtualFee() external view returns(uint104, uint104, uint48) {\\n        return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\n    }\\n\\n    function virtualSlippageFee() external view returns(uint104, uint104, uint48) {\\n        return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\n    }\\n\\n    function feeVotes(address user) external view returns(uint256) {\\n        return _fee.votes[user].get(mooniswapFactoryGovernance.defaultFee);\\n    }\\n\\n    function slippageFeeVotes(address user) external view returns(uint256) {\\n        return _slippageFee.votes[user].get(mooniswapFactoryGovernance.defaultSlippageFee);\\n    }\\n\\n    function feeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function slippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function discardFeeVote() external {\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function discardSlippageFeeVote() external {\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function _emitFeeVoteUpdate(address account, uint256 newFee, bool isDefault, uint256 newBalance) private {\\n        emit FeeVoteUpdate(account, newFee, isDefault, newBalance);\\n    }\\n\\n    function _emitSlippageFeeVoteUpdate(address account, uint256 newSlippageFee, bool isDefault, uint256 newBalance) private {\\n        emit SlippageFeeVoteUpdate(account, newSlippageFee, isDefault, newBalance);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from == to) {\\n            // ignore transfers to self\\n            return;\\n        }\\n\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance = mooniswapFactoryGovernance;\\n        bool updateFrom = !(from == address(0) || _mooniswapFactoryGovernance.isFeeCollector(from));\\n        bool updateTo = !(to == address(0) || _mooniswapFactoryGovernance.isFeeCollector(to));\\n\\n        if (!updateFrom && !updateTo) {\\n            // mint to feeReceiver or burn from feeReceiver\\n            return;\\n        }\\n\\n        uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\n        uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\n        uint256 newTotalSupply = totalSupply()\\n            .add(from == address(0) ? amount : 0)\\n            .sub(to == address(0) ? amount : 0);\\n\\n        ParamsHelper memory params = ParamsHelper({\\n            from: from,\\n            to: to,\\n            updateFrom: updateFrom,\\n            updateTo: updateTo,\\n            amount: amount,\\n            balanceFrom: balanceFrom,\\n            balanceTo: balanceTo,\\n            newTotalSupply: newTotalSupply\\n        });\\n\\n        (uint256 defaultFee, uint256 defaultSlippageFee) = _mooniswapFactoryGovernance.defaults();\\n\\n        _updateOnTransfer(params, defaultFee, _emitFeeVoteUpdate, _fee);\\n        _updateOnTransfer(params, defaultSlippageFee, _emitSlippageFeeVoteUpdate, _slippageFee);\\n    }\\n\\n    struct ParamsHelper {\\n        address from;\\n        address to;\\n        bool updateFrom;\\n        bool updateTo;\\n        uint256 amount;\\n        uint256 balanceFrom;\\n        uint256 balanceTo;\\n        uint256 newTotalSupply;\\n    }\\n\\n    function _updateOnTransfer(\\n        ParamsHelper memory params,\\n        uint256 defaultValue,\\n        function(address, uint256, bool, uint256) internal emitEvent,\\n        LiquidVoting.Data storage votingData\\n    ) private {\\n        Vote.Data memory voteFrom = votingData.votes[params.from];\\n        Vote.Data memory voteTo = votingData.votes[params.to];\\n\\n        if (voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\n            emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\n            emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\n            return;\\n        }\\n\\n        if (params.updateFrom) {\\n            votingData.updateBalance(params.from, voteFrom, params.balanceFrom, params.balanceFrom.sub(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n\\n        if (params.updateTo) {\\n            votingData.updateBalance(params.to, voteTo, params.balanceTo, params.balanceTo.add(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e98c2ffa477cda46840e2a71dbfc8e1b718c5c01490a3684730007b3d7cad49\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IFeeCollector {\\n    function updateReward(address receiver, uint256 amount) external;\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x32a215750177362f8077d6e4cf48ae508e0b6565f20f8eaa4b130260bf238555\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../Mooniswap.sol\\\";\\n\\ninterface IMooniswapFactory is IMooniswapFactoryGovernance {\\n    function pools(IERC20 token0, IERC20 token1) external view returns (Mooniswap);\\n    function isPool(Mooniswap mooniswap) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee7b8aa36fc3d066d8c1413b06f09932eb72e9d608f5ce8b303a9cafc049fcab\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactoryGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IMooniswapFactoryGovernance {\\n    function shareParameters() external view returns(uint256 referralShare, uint256 governanceShare, address governanceWallet, address referralFeeReceiver);\\n    function defaults() external view returns(uint256 defaultFee, uint256 defaultSlippageFee);\\n\\n    function defaultFee() external view returns(uint256);\\n    function defaultSlippageFee() external view returns(uint256);\\n\\n    function virtualDefaultFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultSlippageFee() external view returns(uint104, uint104, uint48);\\n\\n    function referralShare() external view returns(uint256);\\n    function governanceShare() external view returns(uint256);\\n    function governanceWallet() external view returns(address);\\n    function feeCollector() external view returns(address);\\n\\n    function isFeeCollector(address) external view returns(bool);\\n    function isActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6ca0e9c05419b5fe05ea3e46246079c2392f6269ca54d33ba05518547c0069a\",\"license\":\"MIT\"},\"contracts/libraries/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary LiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _defaultVotes;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 totalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldDefaultVotes = self._defaultVotes;\\n        uint256 newDefaultVotes = oldDefaultVotes;\\n\\n        if (oldVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.sub(oldBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n        }\\n\\n        if (newVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.add(newBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newDefaultVotes != oldDefaultVotes) {\\n            self._defaultVotes = newDefaultVotes;\\n        }\\n\\n        {\\n            uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).div(newTotalSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x0300c61b4bba9a58097ec0a843d04b42260f705dbc68bf3bbcc9e9011ffdfd7a\",\"license\":\"MIT\"},\"contracts/libraries/MooniswapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary MooniswapConstants {\\n    uint256 internal constant _FEE_DENOMINATOR = 1e18;\\n\\n    uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\n    uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\n\\n    uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\n    uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\n\\n    uint256 internal constant _DEFAULT_FEE = 0;\\n    uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\n    uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\n}\\n\",\"keccak256\":\"0x9f6421e5cf8734fbf5670148f3d6030b69aaeba473933f9a07fd3766fdaf1733\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary SafeCast {\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n}\\n\",\"keccak256\":\"0x6f5e3e3d0bc762c2defe32c7bc62309cd7e60776bb5dc0d059a1bcf0874b4c51\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: non-zero to non-zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: operation failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4cc1b6b3b02d033719e1261afde66c209064899827c63a92faa50d9238c301b4\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary Sqrt {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256) {\\n        if (y > 3) {\\n            uint256 z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n            return z;\\n        } else if (y != 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5674ed7d1bb3655d9d6698ff6175cb23261d8cf837915d0af70404aa019b5267\",\"license\":\"MIT\"},\"contracts/libraries/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./MooniswapConstants.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n\\nlibrary VirtualBalance {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    struct Data {\\n        uint216 balance;\\n        uint40 time;\\n    }\\n\\n    function set(VirtualBalance.Data storage self, uint256 balance) internal {\\n        (self.balance, self.time) = (\\n            balance.toUint216(),\\n            block.timestamp.toUint40()\\n        );\\n    }\\n\\n    function update(VirtualBalance.Data storage self, uint256 realBalance) internal {\\n        set(self, current(self, realBalance));\\n    }\\n\\n    function scale(VirtualBalance.Data storage self, uint256 realBalance, uint256 num, uint256 denom) internal {\\n        set(self, current(self, realBalance).mul(num).add(denom.sub(1)).div(denom));\\n    }\\n\\n    function current(VirtualBalance.Data memory self, uint256 realBalance) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(MooniswapConstants._DEFAULT_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = MooniswapConstants._DEFAULT_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.balance).mul(timeRemain).add(\\n            realBalance.mul(timePassed)\\n        ).div(MooniswapConstants._DEFAULT_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0x4b76426258b1819ccc958c06ab7ec3d6375b594ee9a8f86e4b01949b71e3aa26\",\"license\":\"MIT\"},\"contracts/libraries/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary VirtualVote {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\n\\n    struct Data {\\n        uint104 oldResult;\\n        uint104 result;\\n        uint48 time;\\n    }\\n\\n    function current(VirtualVote.Data memory self) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.oldResult).mul(timeRemain).add(\\n            uint256(self.result).mul(timePassed)\\n        ).div(_VOTE_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0xd62c910eb9b206eb6c2230be6c964824693fbe52436e53c3e69f02a84aa7c63d\",\"license\":\"MIT\"},\"contracts/libraries/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nlibrary Vote {\\n    struct Data {\\n        uint256 value;\\n    }\\n\\n    function eq(Vote.Data memory self, Vote.Data memory vote) internal pure returns(bool) {\\n        return self.value == vote.value;\\n    }\\n\\n    function init() internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: 0\\n        });\\n    }\\n\\n    function init(uint256 vote) internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: vote + 1\\n        });\\n    }\\n\\n    function isDefault(Data memory self) internal pure returns(bool) {\\n        return self.value == 0;\\n    }\\n\\n    function get(Data memory self, uint256 defaultVote) internal pure returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVote;\\n    }\\n\\n    function get(Data memory self, function() external view returns(uint256) defaultVoteFn) internal view returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVoteFn();\\n    }\\n}\\n\",\"keccak256\":\"0xa31a88aebf9a52ea8c02e611cd798631e7296b78e9ecdf37d2b0c7eb2badb252\",\"license\":\"MIT\"},\"contracts/utils/Converter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactory.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../libraries/VirtualBalance.sol\\\";\\nimport \\\"../Mooniswap.sol\\\";\\n\\n\\ncontract Converter is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    uint256 private constant _ONE = 1e18;\\n    uint256 private constant _MAX_SPREAD = 0.01e18;\\n    uint256 private constant _MAX_LIQUIDITY_SHARE = 100;\\n\\n    IERC20 public immutable inchToken;\\n    IMooniswapFactory public immutable mooniswapFactory;\\n    mapping(IERC20 => bool) public pathWhitelist;\\n\\n    constructor (IERC20 _inchToken, IMooniswapFactory _mooniswapFactory) public {\\n        inchToken = _inchToken;\\n        mooniswapFactory = _mooniswapFactory;\\n    }\\n\\n    modifier validSpread(Mooniswap mooniswap) {\\n        require(_validateSpread(mooniswap), \\\"Spread is too high\\\");\\n\\n        _;\\n    }\\n\\n    modifier validPool(Mooniswap mooniswap) {\\n        require(mooniswapFactory.isPool(mooniswap), \\\"Invalid mooniswap\\\");\\n\\n        _;\\n    }\\n\\n    modifier validPath(IERC20[] memory path) {\\n        require(path.length > 0, \\\"Min path length is 1\\\");\\n        require(path.length < 5, \\\"Max path length is 4\\\");\\n        require(path[path.length - 1] == inchToken, \\\"Should swap to target token\\\");\\n\\n        for (uint256 i = 1; i + 1 < path.length; i += 1) {\\n            require(pathWhitelist[path[i]], \\\"Token is not whitelisted\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    function updatePathWhitelist(IERC20 token, bool whitelisted) external onlyOwner {\\n        pathWhitelist[token] = whitelisted;\\n    }\\n\\n    function _validateSpread(Mooniswap mooniswap) internal view returns(bool) {\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n\\n        uint256 buyPrice;\\n        uint256 sellPrice;\\n        uint256 spotPrice;\\n        {\\n            uint256 token0Balance = tokens[0].balanceOf(address(mooniswap));\\n            uint256 token1Balance = tokens[1].balanceOf(address(mooniswap));\\n            VirtualBalance.Data memory vb;\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForAddition(tokens[0]);\\n            uint256 token0BalanceForAddition = Math.max(vb.current(token0Balance), token0Balance);\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForAddition(tokens[1]);\\n            uint256 token1BalanceForAddition = Math.max(vb.current(token1Balance), token1Balance);\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForRemoval(tokens[0]);\\n            uint256 token0BalanceForRemoval = Math.min(vb.current(token0Balance), token0Balance);\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForRemoval(tokens[1]);\\n            uint256 token1BalanceForRemoval = Math.min(vb.current(token1Balance), token1Balance);\\n\\n            buyPrice = _ONE.mul(token1BalanceForAddition).div(token0BalanceForRemoval);\\n            sellPrice = _ONE.mul(token1BalanceForRemoval).div(token0BalanceForAddition);\\n            spotPrice = _ONE.mul(token1Balance).div(token0Balance);\\n        }\\n\\n        return buyPrice.sub(sellPrice).mul(_ONE) < _MAX_SPREAD.mul(spotPrice);\\n    }\\n\\n    function _maxAmountForSwap(IERC20[] memory path, uint256 amount) internal view returns(uint256 srcAmount, uint256 dstAmount) {\\n        srcAmount = amount;\\n        dstAmount = amount;\\n        uint256 pathLength = path.length;\\n\\n        for (uint256 i = 0; i + 1 < pathLength; i += 1) {\\n            Mooniswap mooniswap = mooniswapFactory.pools(path[i], path[i+1]);\\n            uint256 maxCurStepAmount = path[i].balanceOf(address(mooniswap)).div(_MAX_LIQUIDITY_SHARE);\\n            if (maxCurStepAmount < dstAmount) {\\n                srcAmount = srcAmount.mul(maxCurStepAmount).div(dstAmount);\\n                dstAmount = maxCurStepAmount;\\n            }\\n            dstAmount = mooniswap.getReturn(path[i], path[i+1], dstAmount);\\n        }\\n    }\\n\\n    function _swap(IERC20[] memory path, uint256 initialAmount, address destination) internal returns(uint256 amount)\\n    {\\n        amount = initialAmount;\\n\\n        for (uint256 i = 0; i + 1 < path.length; i += 1) {\\n            Mooniswap mooniswap = mooniswapFactory.pools(path[i], path[i+1]);\\n\\n            require(_validateSpread(mooniswap), \\\"Spread is too high\\\");\\n\\n            path[i].safeApprove(address(mooniswap), amount);\\n\\n            if (i + 2 < path.length) {\\n                amount = mooniswap.swap(path[i], path[i+1], amount, 0, address(0));\\n            }\\n            else {\\n                amount = mooniswap.swapFor(path[i], path[i+1], amount, 0, address(0), destination);\\n            }\\n        }\\n\\n        if (path.length == 1) {\\n            path[0].transfer(destination, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f47c9fa13272d73162f60bf4f859a3b97f2e567148a259899c073bf7874f83f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156100195760008061001661426b565b50505b50600436106100d95760003560e01c80630931753c146100e75780631959a002146101e65780631a39912514610227578063318d9e5d1461025c5780635e8c8bb714610321578063715018a61461036457806371646f981461036c578063857311401461039b5780638da5cb5b146103bf578063946e1a62146103c75780639e96b2ce146103f6578063ec95459414610425578063f2fde38b1461042d578063f3aafa801461045c578063f583adbc14610531578063f5dab71114610568575b6000806100e461426b565b50505b6101e4600480360360408110156101065760008061010361426b565b50505b810190602081018135600160201b8111156101295760008061012661426b565b50505b8201836020820111156101445760008061014161426b565b50505b803590602001918460208302840111600160201b8311171561016e5760008061016b61426b565b50505b919390929091602081019035600160201b8111156101945760008061019161426b565b50505b8201836020820111156101af576000806101ac61426b565b50505b803590602001918460208302840111600160201b831117156101d9576000806101d661426b565b50505b5090925090506105af565b005b610215600480360360208110156102055760008061020261426b565b50505b50356001600160a01b0316610600565b60405190815260200160405180910390f35b6101e4600480360360408110156102465760008061024361426b565b50505b506001600160a01b03813516906020013561061e565b6101e46004803603602081101561027b5760008061027861426b565b50505b810190602081018135600160201b81111561029e5760008061029b61426b565b50505b8201836020820111156102b9576000806102b661426b565b50505b803590602001918460208302840111600160201b831117156102e3576000806102e061426b565b50505b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610730945050505050565b610350600480360360208110156103405760008061033d61426b565b50505b50356001600160a01b03166108d2565b604051901515815260200160405180910390f35b6101e46108f9565b6101e46004803603602081101561038b5760008061038861426b565b50505b50356001600160a01b03166109d2565b6103a3610f87565b6040516001600160a01b03909116815260200160405180910390f35b6103a3610fab565b6101e4600480360360208110156103e6576000806103e361426b565b50505b50356001600160a01b0316610fcc565b6101e4600480360360208110156104155760008061041261426b565b50505b50356001600160a01b0316611993565b6103a3611cf4565b6101e46004803603602081101561044c5760008061044961426b565b50505b50356001600160a01b0316611d18565b6101e46004803603604081101561047b5760008061047861426b565b50505b6001600160a01b038235169190810190604081016020820135600160201b8111156104ae576000806104ab61426b565b50505b8201836020820111156104c9576000806104c661426b565b50505b803590602001918460208302840111600160201b831117156104f3576000806104f061426b565b50505b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611e48945050505050565b6101e4600480360360408110156105505760008061054d61426b565b50505b506001600160a01b0381351690602001351515612849565b610597600480360360208110156105875760008061058461426b565b50505b50356001600160a01b03166128ed565b60405191825260208201526040908101905180910390f35b60005b838110156105f9576105f18585838181106105c957fe5b905060200201356001600160a01b03168484848181106105e557fe5b9050602002013561061e565b6001016105b2565b5050505050565b60036020528060005260406000209050806106196142d6565b905081565b60005a610629614331565b6001600160a01b03811660009081526004602052909150604081206001600160a01b0385166000908152600360205290915060408120905060008260020161066f6142d6565b6001600160a01b0385166000908152600184016020529091506106af908690604090206000848152602091909152604090206106a96142d6565b9061291b565b6001600160a01b0385166000908152600184016020526040902060008381526020919091526040902081906106e2614377565b50505060008181526020849052610701908690604090206106a96142d6565b60008281526020859052604090208190610719614377565b50505061072882848684612984565b505050505050565b6000600360005a61073f614331565b6001600160a01b03166001600160a01b03168152602001908152602001600020905060005b82518110156107c157600083828151811061077b57fe5b60200260200101516001600160a01b038116600090815260046020529091506040812090506107b7848284846002016107b26142d6565b612984565b5050600101610764565b506000816107cd6142d6565b905060018111156108cd57600180836107e4614377565b5050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb5a61081f614331565b600184036040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087806108646143c5565b1580156108795760008061087661426b565b50505b505a610883614411565b5050505050501580156108a3573d6000803e3d60006108a061426b565b50505b505050506040513d60208110156108c2576000806108bf61426b565b50505b810190808051505050505b505050565b6001602052806000526040600020600091506108ec6142d6565b906101000a900460ff1681565b610901612b36565b6001600160a01b0316610912610fab565b6001600160a01b0316146109635760405162461bcd60e51b8152602060048201819052602482015260008051602061468783398151915260448201526064016040518091039061096061426b565b50505b6000808061096f6142d6565b906101000a90046001600160a01b03166001600160a01b03166000805160206146a783398151915260405160405180910390a36000806001816109b06142d6565b816001600160a01b0302191690836001600160a01b03160217906108cd614377565b6002806109dd6142d6565b1415610a265760405162461bcd60e51b815260206004820152601f6024820152600080516020614620833981519152604482015260640160405180910390610a2361426b565b50505b60028080610a32614377565b505050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb7826040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680610aa06143c5565b158015610ab557600080610ab261426b565b50505b505a610abf6144fc565b5050505050158015610ade573d6000803e3d6000610adb61426b565b50505b505050506040513d6020811015610afd57600080610afa61426b565b50505b8101908080519250610b559150505760405162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015260640160405180910390610b5261426b565b50505b6001600160a01b038216600090815260046020526040812090506000600360005a610b7e614331565b6001600160a01b03166001600160a01b031681526020019081526020016000209050600082600101610bae6142d6565b9050600083600201610bbe6142d6565b905080610bcc83600161291b565b14610c205760405162461bcd60e51b8152602060048201526017602482015276115c1bd8da08185b1c9958591e48199a5b985b1a5e9959604a1b604482015260640160405180910390610c1d61426b565b50505b6001600160a01b038616600090815260028401602052829060409020610c446142d6565b14610c9c5760405162461bcd60e51b815260206004820152601b60248201527a115c1bd8da08199d5b991cc8185b1c9958591e4818db185a5b5959602a1b604482015260640160405180910390610c9961426b565b50505b6001600160a01b0386166000908152600284016020528190604090208190610cc2614377565b5050506001600160a01b03861660009081526001840160205260408120600084815260209190915260409020610cf66142d6565b90508015610f6d5760008381526020869052604081209050600081610d196142d6565b6001600160a01b038a16600090815260018801602052909150604081206000878152602091909152604090208190610d4f614377565b50610d5e915082905084612b46565b8083610d68614377565b5050506060896001600160a01b031663aa6ca8086040518163ffffffff1660e01b81526004016000604051808303818680610da16143c5565b158015610db657600080610db361426b565b50505b505a610dc06144fc565b5050505050158015610ddf573d6000803e3d6000610ddc61426b565b50505b505050506040513d6000823e601f3d908101601f191682016040526020811015610e1157600080610e0e61426b565b50505b8101908080516040519392919084600160201b821115610e3957600080610e3661426b565b50505b908301906020820185811115610e5757600080610e5461426b565b50505b82518660208202830111600160201b82111715610e7c57600080610e7961426b565b50505b825250602001908051906020019060200280838360005b83811015610eab578082015183820152602001610e93565b505050509050016040525050509050610ee581600081518110610eca57fe5b602002602001015184600101610ede6142d6565b8685612bab565b8060018501610ef2614377565b505050610f1981600181518110610f0557fe5b602002602001015184600201610ede6142d6565b8060028501610f26614377565b505050610f597f000000000000000000000000000000000000000000000000000000000000000084600301610ede6142d6565b8060038501610f66614377565b5050505050505b505050505050600160028190610f81614377565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008080610fb76142d6565b906101000a90046001600160a01b0316905090565b600280610fd76142d6565b14156110205760405162461bcd60e51b815260206004820152601f602482015260008051602061462083398151915260448201526064016040518091039061101d61426b565b50505b6002808061102c614377565b505050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb7826040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381868061109a6143c5565b1580156110af576000806110ac61426b565b50505b505a6110b96144fc565b50505050501580156110d8573d6000803e3d60006110d561426b565b50505b505050506040513d60208110156110f7576000806110f461426b565b50505b810190808051925061114f9150505760405162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b60448201526064016040518091039061114c61426b565b50505b8161115981612bfb565b6111a75760405162461bcd60e51b81526020600482015260126024820152710a6e0e4cac2c840d2e640e8dede40d0d2ced60731b6044820152606401604051809103906111a461426b565b50505b6001600160a01b038316600090815260046020526040812090506000816002016111cf6142d6565b905080826001016111de6142d6565b146112385760405162461bcd60e51b815260206004820152601f60248201527f50726576696f75732065706f6368206973206e6f742066696e616c697a65640060448201526064016040518091039061123561426b565b50505b6060856001600160a01b031663aa6ca8086040518163ffffffff1660e01b8152600401600060405180830381868061126e6143c5565b1580156112835760008061128061426b565b50505b505a61128d6144fc565b50505050501580156112ac573d6000803e3d60006112a961426b565b50505b505050506040513d6000823e601f3d908101601f1916820160405260208110156112de576000806112db61426b565b50505b8101908080516040519392919084600160201b8211156113065760008061130361426b565b50505b9083019060208201858111156113245760008061132161426b565b50505b82518660208202830111600160201b821117156113495760008061134661426b565b50505b825250602001908051906020019060200280838360005b83811015611378578082015183820152602001611360565b50505050905001604052505050905060008160008151811061139657fe5b60200260200101516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015611402576000828201526020016113eb565b5050506040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381868061143f6143c5565b1580156114545760008061145161426b565b50505b505a61145e6144fc565b505050505015801561147d573d6000803e3d600061147a61426b565b50505b505050506040513d602081101561149c5760008061149961426b565b50505b81019080805193506000925084915060019050815181106114b957fe5b60200260200101516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b60408110156115255760008282015260200161150e565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806115626143c5565b1580156115775760008061157461426b565b50505b505a6115816144fc565b50505050501580156115a0573d6000803e3d600061159d61426b565b50505b505050506040513d60208110156115bf576000806115bc61426b565b50505b810190808051935050506001600160a01b0389169050635915d806816370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b60408110156116365760008282015260200161161f565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806116736143c5565b1580156116885760008061168561426b565b50505b505a6116926144fc565b50505050501580156116b1573d6000803e3d60006116ae61426b565b50505b505050506040513d60208110156116d0576000806116cd61426b565b50505b8101908080519250600091506040905051908082528060200260200182016040528015611707578160200160208202803683370190505b506040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561175d578082015183820152602001611745565b50505050905001935050505060408051808303816000878061177d6143c5565b1580156117925760008061178f61426b565b50505b505a61179c614411565b5050505050501580156117bc573d6000803e3d60006117b961426b565b50505b50505050604051601f3d908101601f1916820160409081528110156117e9576000806117e661426b565b50505b50611914905082846000815181106117fd57fe5b60200260200101516001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b604081101561186957600082820152602001611852565b5050506040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806118a66143c5565b1580156118bb576000806118b861426b565b50505b505a6118c56144fc565b50505050501580156118e4573d6000803e3d60006118e161426b565b50505b505050506040513d60208110156119035760008061190061426b565b50505b81019080805193925050612b469050565b6000858152602087905260409020600101819061192f614377565b50505061194381846001815181106117fd57fe5b6000858152602087905260409020600201819061195e614377565b5061196e9150859050600161291b565b806002870161197b614377565b50505050505050505050600160028190610f81614377565b60028061199e6142d6565b14156119e75760405162461bcd60e51b815260206004820152601f60248201526000805160206146208339815191526044820152606401604051809103906119e461426b565b50505b600280806119f3614377565b505050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb7826040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611a616143c5565b158015611a7657600080611a7361426b565b50505b505a611a806144fc565b5050505050158015611a9f573d6000803e3d6000611a9c61426b565b50505b505050506040513d6020811015611abe57600080611abb61426b565b50505b8101908080519250611b169150505760405162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015260640160405180910390611b1361426b565b50505b6001600160a01b038216600090815260046020526040812090506000600360005a611b3f614331565b6001600160a01b03166001600160a01b031681526020019081526020016000209050600082600201611b6f6142d6565b6001600160a01b03861660009081526001840160205290915060408120600083815260209190915260409020611ba36142d6565b90508015611ce1576001600160a01b038616600090815260018401602052604081206000848152602091909152604090208190611bde614377565b50505060008281526020859052611c0390829060409020611bfd6142d6565b90612b46565b60008381526020869052604090208190611c1b614377565b505050856001600160a01b031663a9059cbb5a611c36614331565b836040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038160008780611c786143c5565b158015611c8d57600080611c8a61426b565b50505b505a611c97614411565b505050505050158015611cb7573d6000803e3d6000611cb461426b565b50505b505050506040513d6020811015611cd657600080611cd361426b565b50505b810190808051505050505b5050505050600160028190610f81614377565b7f000000000000000000000000000000000000000000000000000000000000000081565b611d20612b36565b6001600160a01b0316611d31610fab565b6001600160a01b031614611d825760405162461bcd60e51b81526020600482018190526024820152600080516020614687833981519152604482015260640160405180910390611d7f61426b565b50505b6001600160a01b038116611dd05760405162461bcd60e51b81526004018080602001828103825260268152602001806146406026913960400191505060405180910390611dcd61426b565b50505b806001600160a01b0316600080611de56142d6565b906101000a90046001600160a01b03166001600160a01b03166000805160206146a783398151915260405160405180910390a3806000600181611e266142d6565b816001600160a01b0302191690836001600160a01b0316021790610f81614377565b600280611e536142d6565b1415611e9c5760405162461bcd60e51b815260206004820152601f6024820152600080516020614620833981519152604482015260640160405180910390611e9961426b565b50505b60028080611ea8614377565b505050817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb7826040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680611f166143c5565b158015611f2b57600080611f2861426b565b50505b505a611f356144fc565b5050505050158015611f54573d6000803e3d6000611f5161426b565b50505b505050506040513d6020811015611f7357600080611f7061426b565b50505b8101908080519250611fcb9150505760405162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015260640160405180910390611fc861426b565b50505b8160008151116120215760405162461bcd60e51b81526020600482015260146024820152734d696e2070617468206c656e677468206973203160601b60448201526064016040518091039061201e61426b565b50505b60058151106120765760405162461bcd60e51b815260206004820152601460248201527313585e081c185d1a081b195b99dd1a081a5cc80d60621b60448201526064016040518091039061207361426b565b50505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001835103815181106120b057fe5b60200260200101516001600160a01b0316146121195760405162461bcd60e51b815260206004820152601b60248201527a29b437bab6321039bbb0b8103a37903a30b933b2ba103a37b5b2b760291b60448201526064016040518091039061211661426b565b50505b60015b81518160010110156121d1576001600083838151811061213857fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009061216b6142d6565b906101000a900460ff166121c95760405162461bcd60e51b8152602060048201526018602482015277151bdad95b881a5cc81b9bdd081dda1a5d195b1a5cdd195960421b6044820152606401604051809103906121c661426b565b50505b60010161211c565b506001600160a01b038416600090815260046020526040812090506000816001016121fa6142d6565b60008181526020849052909150604081209050826002016122196142d6565b61222483600161291b565b1461227d5760405162461bcd60e51b815260206004820152601c60248201527b141c995d88195c1bd8da08185b1c9958591e48199a5b985b1a5e995960221b60448201526064016040518091039061227a61426b565b50505b6060876001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186806122b36143c5565b1580156122c8576000806122c561426b565b50505b505a6122d26144fc565b50505050501580156122f1573d6000803e3d60006122ee61426b565b50505b505050506040513d6000823e601f3d908101601f1916820160405260208110156123235760008061232061426b565b50505b8101908080516040519392919084600160201b82111561234b5760008061234861426b565b50505b9083019060208201858111156123695760008061236661426b565b50505b82518660208202830111600160201b8211171561238e5760008061238b61426b565b50505b825250602001908051906020019060200280838360005b838110156123bd5780820151838201526020016123a5565b5050505090500160405250505090506000816000815181106123db57fe5b60200260200101516001600160a01b0316886000815181106123f957fe5b60200260200101516001600160a01b03161415612423578260010161241c6142d6565b90506124bc565b8160018151811061243057fe5b60200260200101516001600160a01b03168860008151811061244e57fe5b60200260200101516001600160a01b03161415612471578260020161241c6142d6565b60405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103334b939ba103a37b5b2b760691b6044820152606401604051809103906124b961426b565b50505b6000806124c98a84613355565b9150915080600014156126de5782156126d9578183146125375760405162461bcd60e51b815260206004820152601c60248201527b185d985a5b18589b1950985b185b98d9481a5cc81b9bdd08191d5cdd60221b60448201526064016040518091039061253461426b565b50505b60005b8a518160010110156126ae5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d78d848151811061258357fe5b60200260200101518e856001018151811061259a57fe5b60200260200101516040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186806125e36143c5565b1580156125f8576000806125f561426b565b50505b505a6126026144fc565b5050505050158015612621573d6000803e3d600061261e61426b565b50505b505050506040513d60208110156126405760008061263d61426b565b50505b81019080805193506126579250839150612bfb9050565b6126a55760405162461bcd60e51b81526020600482015260126024820152710a6e0e4cac2c840d2e640e8dede40d0d2ced60731b6044820152606401604051809103906126a261426b565b50505b5060010161253a565b506126d98b848c6000815181106126c157fe5b60200260200101516001600160a01b03169190613669565b612767565b60006127438b845a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b604081101561273b57600082820152602001612724565b5050506136c5565b905061275581876003016106a96142d6565b8060038801612762614377565b505050505b8360008151811061277457fe5b60200260200101516001600160a01b03168a60008151811061279257fe5b60200260200101516001600160a01b031614156127ce576127b98286600101611bfd6142d6565b80600187016127c6614377565b5050506127ef565b6127de8286600201611bfd6142d6565b80600287016127eb614377565b5050505b846001016127fb6142d6565b15801561281157508460020161280f6142d6565b155b156128325761282186600161291b565b806001890161282e614377565b5050505b5050505050505050506001600281906105f9614377565b612851612b36565b6001600160a01b0316612862610fab565b6001600160a01b0316146128b35760405162461bcd60e51b815260206004820181905260248201526000805160206146878339815191526044820152606401604051809103906128b061426b565b50505b6001600160a01b038216600090815260016020528190604090206001816128d86142d6565b8160ff021916908315150217906105f9614377565b60046020528060005260406000209050600181016129096142d6565b90806002016129166142d6565b905082565b60008282018381101561297b5760405162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b60448201526064016040518091039061297861426b565b50505b90505b92915050565b6001600160a01b038216600090815260018501602052604090206001600160a01b038316600090815260028601602052604081206129c06142d6565b81526020019081526020016000206129d66142d6565b612a08576001600160a01b0382166000908152600285016020528190604090208190612a00614377565b505050610f81565b6001600160a01b03821660009081526002850160205260408120612a2a6142d6565b9050600084600101612a3a6142d6565b90506000612a526002612a4d8486612b46565b613b65565b905080612a6157505050610f81565b6000612a6f88888887613b7b565b90506001821115612a9657612a93612a8c89898988600101613b7b565b829061291b565b90505b612aa381896106a96142d6565b8089612aad614377565b5050506001600160a01b038616600090815260018901602052604081206000866001018152602001908152602001600020612ae66142d6565b1590506002831480612af55750805b612b025784600101612b04565b855b6001600160a01b038816600090815260028b01602052604090208190612b28614377565b505050505050505050505050565b60005a612b41614331565b905090565b600082821115612ba55760405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015260640160405180910390612ba261426b565b50505b50900390565b600080612bc283612bbc8787613c8d565b90613cec565b90508015612be757612be75a612bd6614331565b6001600160a01b0388169083613669565b612bf18582612b46565b9695505050505050565b60006060826001600160a01b031663aa6ca8086040518163ffffffff1660e01b81526004016000604051808303818680612c336143c5565b158015612c4857600080612c4561426b565b50505b505a612c526144fc565b5050505050158015612c71573d6000803e3d6000612c6e61426b565b50505b505050506040513d6000823e601f3d908101601f191682016040526020811015612ca357600080612ca061426b565b50505b8101908080516040519392919084600160201b821115612ccb57600080612cc861426b565b50505b908301906020820185811115612ce957600080612ce661426b565b50505b82518660208202830111600160201b82111715612d0e57600080612d0b61426b565b50505b825250602001908051906020019060200280838360005b83811015612d3d578082015183820152602001612d25565b50505050905001604052505050905060008060008084600081518110612d5f57fe5b60200260200101516001600160a01b03166370a08231886040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680612db06143c5565b158015612dc557600080612dc261426b565b50505b505a612dcf6144fc565b5050505050158015612dee573d6000803e3d6000612deb61426b565b50505b505050506040513d6020811015612e0d57600080612e0a61426b565b50505b8101908080519350600092508791506001905081518110612e2a57fe5b60200260200101516001600160a01b03166370a08231896040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680612e7b6143c5565b158015612e9057600080612e8d61426b565b50505b505a612e9a6144fc565b5050505050158015612eb9573d6000803e3d6000612eb661426b565b50505b505050506040513d6020811015612ed857600080612ed561426b565b50505b8101908080519350612eed92506145c2915050565b886001600160a01b0316636edc2c0988600081518110612f0957fe5b60200260200101516040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160408051808303818680612f4a6143c5565b158015612f5f57600080612f5c61426b565b50505b505a612f696144fc565b5050505050158015612f88573d6000803e3d6000612f8561426b565b50505b505050506040513d6040811015612fa757600080612fa461426b565b50505b810190808051929190602001805164ffffffffff1660208601525050506001600160d81b031681526000612fe4612fde8386613d58565b85613db9565b9050896001600160a01b0316636edc2c098960018151811061300257fe5b60200260200101516040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401604080518083038186806130436143c5565b1580156130585760008061305561426b565b50505b505a6130626144fc565b5050505050158015613081573d6000803e3d600061307e61426b565b50505b505050506040513d60408110156130a05760008061309d61426b565b50505b810190808051929190602001805164ffffffffff1660208701525050506001600160d81b0316825260006130d7612fde8486613d58565b90508a6001600160a01b0316635ed9156d8a6000815181106130f557fe5b60200260200101516040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401604080518083038186806131366143c5565b15801561314b5760008061314861426b565b50505b505a6131556144fc565b5050505050158015613174573d6000803e3d600061317161426b565b50505b505050506040513d60408110156131935760008061319061426b565b50505b810190808051929190602001805164ffffffffff1660208801525050506001600160d81b0316835260006131d06131ca8588613d58565b87613b65565b90508b6001600160a01b0316635ed9156d8b6001815181106131ee57fe5b60200260200101516040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016040805180830381868061322f6143c5565b1580156132445760008061324161426b565b50505b505a61324e6144fc565b505050505015801561326d573d6000803e3d600061326a61426b565b50505b505050506040513d604081101561328c5760008061328961426b565b50505b810190808051929190602001805164ffffffffff1660208901525050506001600160d81b0316845260006132c36131ca8688613d58565b90506132db82612bbc670de0b6b3a764000086613c8d565b99506132f384612bbc670de0b6b3a764000084613c8d565b985061330b87612bbc670de0b6b3a764000089613c8d565b97505050505050505061332e81662386f26fc10000613c8d90919063ffffffff16565b61334a670de0b6b3a76400006133448686612b46565b90613c8d565b109695505050505050565b808060008451905060005b818160010110156136605760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d78884815181106133a857fe5b60200260200101518985600101815181106133bf57fe5b60200260200101516040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186806134086143c5565b15801561341d5760008061341a61426b565b50505b505a6134276144fc565b5050505050158015613446573d6000803e3d600061344361426b565b50505b505050506040513d60208110156134655760008061346261426b565b50505b81019080805193506000925061354591506064905089858151811061348657fe5b60200260200101516001600160a01b03166370a08231856040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806134d76143c5565b1580156134ec576000806134e961426b565b50505b505a6134f66144fc565b5050505050158015613515573d6000803e3d600061351261426b565b50505b505050506040513d60208110156135345760008061353161426b565b50505b81019080805193925050613cec9050565b9050848110156135635761355d85612bbc8884613c8d565b95508094505b816001600160a01b0316631e1401f889858151811061357e57fe5b60200260200101518a866001018151811061359557fe5b6020026020010151886040516001600160e01b031960e086901b1681526001600160a01b039384166004820152919092166024820152604481019190915260640160206040518083038186806135e96143c5565b1580156135fe576000806135fb61426b565b50505b505a6136086144fc565b5050505050158015613627573d6000803e3d600061362461426b565b50505b505050506040513d60208110156136465760008061364361426b565b50505b810190808051975050506001939093019250613360915050565b50509250929050565b6108cd8363a9059cbb60e01b84846040516001600160a01b0390921660248301526044820152606401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03169091179052613dc9565b8160005b8451816001011015613a845760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d787848151811061371257fe5b602002602001015188856001018151811061372957fe5b60200260200101516040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186806137726143c5565b1580156137875760008061378461426b565b50505b505a6137916144fc565b50505050501580156137b0573d6000803e3d60006137ad61426b565b50505b505050506040513d60208110156137cf576000806137cc61426b565b50505b81019080805193506137e69250839150612bfb9050565b6138345760405162461bcd60e51b81526020600482015260126024820152710a6e0e4cac2c840d2e640e8dede40d0d2ced60731b60448201526064016040518091039061383161426b565b50505b61385d818488858151811061384557fe5b60200260200101516001600160a01b03169190613e9c565b855182600201101561396f57806001600160a01b031663d5bcb9b587848151811061388457fe5b602002602001015188856001018151811061389b57fe5b6020026020010151866000806040516001600160e01b031960e088901b1681526001600160a01b039586166004820152938516602485015260448401929092526064830152909116608482015260a401602060405180830381600087806139006143c5565b1580156139155760008061391261426b565b50505b505a61391f614411565b50505050505015801561393f573d6000803e3d600061393c61426b565b50505b505050506040513d602081101561395e5760008061395b61426b565b50505b8101908080519550613a7b92505050565b806001600160a01b031663e331d03987848151811061398a57fe5b60200260200101518885600101815181106139a157fe5b6020026020010151866000808a6040516001600160e01b031960e089901b1681526001600160a01b0396871660048201529486166024860152604485019390935260648401919091528316608483015290911660a482015260c40160206040518083038160008780613a116143c5565b158015613a2657600080613a2361426b565b50505b505a613a30614411565b505050505050158015613a50573d6000803e3d6000613a4d61426b565b50505b505050506040513d6020811015613a6f57600080613a6c61426b565b50505b81019080805195505050505b506001016136c9565b50835160011415613b5e5783600081518110613a9c57fe5b60200260200101516001600160a01b031663a9059cbb83836040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038160008780613af56143c5565b158015613b0a57600080613b0761426b565b50505b505a613b14614411565b505050505050158015613b34573d6000803e3d6000613b3161426b565b50505b505050506040513d6020811015613b5357600080613b5061426b565b50505b810190808051505050505b9392505050565b6000818310613b74578161297b565b5090919050565b6001600160a01b0382166000908152600185016020528060408120600084815260209190915260409020613bad6142d6565b90508015613c84576000838152602086905260408120600301613bce6142d6565b6000858152602088905290915060408120613be76142d6565b9050613bf781612bbc8486613c8d565b6001600160a01b038716600090815260018a01602052909450604081206000878152602091909152604090208190613c2d614377565b50613c3c915082905084612b46565b60008681526020899052604090208190613c54614377565b50613c63915083905085612b46565b60008681526020899052604090206003018190613c7e614377565b50505050505b50949350505050565b600082613c9c5750600061297e565b82820282848281613ca957fe5b041461297b5760405162461bcd60e51b8152600401808060200182810382526021815260200180614666602191396040019150506040518091039061297861426b565b6000808211613d475760405162461bcd60e51b815260206004820152601a602482015279536166654d6174683a206469766973696f6e206279207a65726f60301b604482015260640160405180910390613d4461426b565b50505b818381613d5057fe5b049392505050565b600080613d78603c612a4d866020015164ffffffffff165a611bfd6145d9565b90506000613d87603c83612b46565b9050613db0603c612bbc613d9b8786613c8d565b6106a9858a516001600160d81b031690613c8d565b95945050505050565b600081831015613b74578161297b565b6060613e14826040516040808201905260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201526001600160a01b038616919061406c565b90506000815111156108cd576020810181516020811015613e3d57600080613e3a61426b565b50505b81019080805192506108cd9150505760405162461bcd60e51b815260206004820152601b60248201527a14d85999515490cc8c0e881bdc195c985d1a5bdb8819985a5b1959602a1b6044820152606401604051809103906105f961426b565b801580613fb75750826001600160a01b031663dd62ed3e5a63996d79a5598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051925060005b6040811015613f0957600082820152602001613ef2565b505050846040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303818680613f4e6143c5565b158015613f6357600080613f6061426b565b50505b505a613f6d6144fc565b5050505050158015613f8c573d6000803e3d6000613f8961426b565b50505b505050506040513d6020811015613fab57600080613fa861426b565b50505b81019080805115925050505b6140105760405162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a206e6f6e2d7a65726f20746f206e6f6e2d7a65726f0060448201526064016040518091039061400d61426b565b50505b6108cd8363095ea7b360e01b84846040516001600160a01b0390921660248301526044820152606401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03169091179052613dc9565b606061407784614192565b6140d05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401604051809103906140cd61426b565b50505b60006060856001600160a01b0316856040518082805190602001908083835b6020831061410e5780518252601f1990920191602091820191016140ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865a614148614411565b5050505050509150503d806000811461417d576040513d603f01601f191681016040523d815291503d6000602084013e614182565b606091505b5091509150612bf18282866141a7565b6000808261419e6143c5565b15159392505050565b606083156141b6575081613b5e565b6000835111156141d757825180846020016141cf61426b565b505050613b5e565b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614221578082015183820152602001614209565b50505050905090810190601f16801561424e5780820380516001836020036101000a031916815260200191505b50925050506040518091039061426261426b565b50509392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156142a3578086015182820160400152602001614288565b506020828760640184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52505050565b6303daa959598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051935060005b60408110156108cd5760008282015260200161431a565b6373509064598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051600082529350602061431a565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5260008152602061431a565b638435035b598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051600082529350602061431a565b6385979f76598160e01b8152614442565b808083111561297e575090919050565b808083101561297e575090919050565b836004820152846024820152606060448201528760648201526084810160005b8981101561447a578089015182820152602001614462565b506060828a60a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8c8c82606087013350600060045af150596144cf8e3d614432565b8d016144db8187614422565b5b828110156144f057600081526020016144dc565b50929d50505050505050565b638540661f598160e01b8152836004820152846024820152606060448201528660648201526084810160005b88811015614540578088015182820152602001614528565b506060828960a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8b8b82606087013350600060045af150596145958d3d614432565b8c016145a18187614422565b5b828110156145b657600081526020016145a2565b50929c50505050505050565b604051604080820190526000808252602082015290565b63bdbf8c36598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051600082529350602061431a56fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9801,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "pathWhitelist",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)1118,t_bool)"
      },
      {
        "astId": 1244,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3262,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "userInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UserInfo)3240_storage)"
      },
      {
        "astId": 3266,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20)1118,t_struct(TokenInfo)3258_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1118": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3240_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReferralFeeReceiver.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3240_storage"
      },
      "t_mapping(t_contract(IERC20)1118,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)1118,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)1118,t_struct(TokenInfo)3258_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => struct ReferralFeeReceiver.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)3258_storage"
      },
      "t_mapping(t_contract(IERC20)1118,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(EpochBalance)3249_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ReferralFeeReceiver.EpochBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochBalance)3249_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EpochBalance)3249_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.EpochBalance",
        "members": [
          {
            "astId": 3242,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3244,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "token0Balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3246,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "token1Balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3248,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "inchBalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenInfo)3258_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.TokenInfo",
        "members": [
          {
            "astId": 3253,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "epochBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(EpochBalance)3249_storage)"
          },
          {
            "astId": 3255,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "firstUnprocessedEpoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3257,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "currentEpoch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)3240_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.UserInfo",
        "members": [
          {
            "astId": 3229,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3235,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_contract(IERC20)1118,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 3239,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "firstUnprocessedEpoch",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_contract(IERC20)1118,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}