{
  "address": "0x0d15038f8a0362b4cE71D6c879d56bF9Fc2884cf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolOwner",
          "type": "address"
        },
        {
          "internalType": "contract IMooniswapDeployer",
          "name": "_mooniswapDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governanceMothership",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DefaultFeeVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DefaultSlippageFeeVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token2",
          "type": "address"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "governanceShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GovernanceShareVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "governanceWallet",
          "type": "address"
        }
      ],
      "name": "GovernanceWalletUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referralShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReferralShareVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "defaultFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "defaultFeeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultSlippageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "defaultSlippageFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "defaultSlippageFeeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardDefaultFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardDefaultSlippageFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardGovernanceShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardReferralShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPools",
      "outputs": [
        {
          "internalType": "contract Mooniswap[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "governanceShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "governanceShareVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFeeCollector",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mooniswapDeployer",
      "outputs": [
        {
          "internalType": "contract IMooniswapDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mothership",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "notifyStakeChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBalances",
          "type": "uint256[]"
        }
      ],
      "name": "notifyStakesChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "referralShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "referralShareVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernanceWallet",
          "type": "address"
        }
      ],
      "name": "setGovernanceWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualDefaultFee",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualDefaultSlippageFee",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualGovernanceShare",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualReferralShare",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9159c89b0f36ad6abd584173d20770c3f0ee72da3cf41550bdbf62f000d2b04",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x0d15038f8a0362b4cE71D6c879d56bF9Fc2884cf",
    "transactionIndex": 0,
    "gasUsed": "4885243",
    "logsBloom": "0x
    "blockHash": "0xda6f2c1ab3ad7ef77589c8b60449f8f7e5a1ec83cbdc9a26e091138fd00ff9f0",
    "transactionHash": "0xb9159c89b0f36ad6abd584173d20770c3f0ee72da3cf41550bdbf62f000d2b04",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 56660,
        "transactionHash": "0xb9159c89b0f36ad6abd584173d20770c3f0ee72da3cf41550bdbf62f000d2b04",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xda6f2c1ab3ad7ef77589c8b60449f8f7e5a1ec83cbdc9a26e091138fd00ff9f0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 56660,
        "transactionHash": "0xb9159c89b0f36ad6abd584173d20770c3f0ee72da3cf41550bdbf62f000d2b04",
        "address": "0x0d15038f8a0362b4cE71D6c879d56bF9Fc2884cf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xda6f2c1ab3ad7ef77589c8b60449f8f7e5a1ec83cbdc9a26e091138fd00ff9f0"
      }
    ],
    "blockNumber": 56660,
    "cumulativeGasUsed": "4885243",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7e11a8887A2c445883AcC453738635bC3aCDAdb6",
    "0x8b01d28F4fDDD89322711d832325f7eB1f122FB2",
    "0xB33839E05CE9Fc53236Ae325324A27612F4d110D"
  ],
  "solcInputHash": "c40ed9d6ab9534012d51b8ac2455af37",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12-develop.2020.12.9+commit.9b8c5857\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolOwner\",\"type\":\"address\"},{\"internalType\":\"contract IMooniswapDeployer\",\"name\":\"_mooniswapDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceMothership\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DefaultFeeVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DefaultSlippageFeeVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governanceShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GovernanceShareVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governanceWallet\",\"type\":\"address\"}],\"name\":\"GovernanceWalletUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralShareVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"defaultFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"defaultFeeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSlippageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"defaultSlippageFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"defaultSlippageFeeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardDefaultFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardDefaultSlippageFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardGovernanceShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardReferralShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"internalType\":\"contract Mooniswap[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"governanceShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"governanceShareVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeCollector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooniswapDeployer\",\"outputs\":[{\"internalType\":\"contract IMooniswapDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mothership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"notifyStakeChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBalances\",\"type\":\"uint256[]\"}],\"name\":\"notifyStakesChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"referralShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"referralShareVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernanceWallet\",\"type\":\"address\"}],\"name\":\"setGovernanceWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualDefaultFee\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualDefaultSlippageFee\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualGovernanceShare\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualReferralShare\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MooniswapFactory.sol\":\"MooniswapFactory\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Mooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/Sqrt.sol\\\";\\nimport \\\"./libraries/VirtualBalance.sol\\\";\\nimport \\\"./governance/MooniswapGovernance.sol\\\";\\n\\n\\ncontract Mooniswap is MooniswapGovernance {\\n    using Sqrt for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    struct Balances {\\n        uint256 src;\\n        uint256 dst;\\n    }\\n\\n    struct Fees {\\n        uint256 fee;\\n        uint256 slippageFee;\\n    }\\n\\n    event Error(string reason);\\n\\n    event Deposited(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Withdrawn(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Swapped(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed srcToken,\\n        address dstToken,\\n        uint256 amount,\\n        uint256 result,\\n        uint256 srcAdditionBalance,\\n        uint256 dstRemovalBalance,\\n        address referral\\n    );\\n\\n    event Sync(\\n        uint256 srcBalance,\\n        uint256 dstBalance,\\n        uint256 fee,\\n        uint256 slippageFee,\\n        uint256 referralShare,\\n        uint256 governanceShare\\n    );\\n\\n    uint256 private constant _BASE_SUPPLY = 1000;  // Total supply on first deposit\\n\\n    IERC20 public immutable token0;\\n    IERC20 public immutable token1;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForAddition;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForRemoval;\\n\\n    modifier whenNotShutdown {\\n        require(mooniswapFactoryGovernance.isActive(), \\\"Mooniswap: factory shutdown\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        string memory name,\\n        string memory symbol,\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance\\n    )\\n        public\\n        ERC20(name, symbol)\\n        MooniswapGovernance(_mooniswapFactoryGovernance)\\n    {\\n        require(bytes(name).length > 0, \\\"Mooniswap: name is empty\\\");\\n        require(bytes(symbol).length > 0, \\\"Mooniswap: symbol is empty\\\");\\n        require(_token0 != _token1, \\\"Mooniswap: duplicate tokens\\\");\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function getTokens() external view returns(IERC20[] memory tokens) {\\n        tokens = new IERC20[](2);\\n        tokens[0] = token0;\\n        tokens[1] = token1;\\n    }\\n\\n    function tokens(uint256 i) external view returns(IERC20) {\\n        if (i == 0) {\\n            return token0;\\n        } else if (i == 1) {\\n            return token1;\\n        } else {\\n            revert(\\\"Pool has two tokens\\\");\\n        }\\n    }\\n\\n    function getBalanceForAddition(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        return Math.max(virtualBalancesForAddition[token].current(balance), balance);\\n    }\\n\\n    function getBalanceForRemoval(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        return Math.min(virtualBalancesForRemoval[token].current(balance), balance);\\n    }\\n\\n    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256) {\\n        return _getReturn(src, dst, amount, getBalanceForAddition(src), getBalanceForRemoval(dst), fee(), slippageFee());\\n    }\\n\\n    function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts) external returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        return depositFor(maxAmounts, minAmounts, msg.sender);\\n    }\\n\\n    function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target) public nonReentrant returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalSupply == 0) {\\n            fairSupply = _BASE_SUPPLY.mul(99);\\n            _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.max(fairSupply, maxAmounts[i]);\\n\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                require(maxAmounts[i] >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), maxAmounts[i]);\\n                receivedAmounts[i] = maxAmounts[i];\\n            }\\n        }\\n        else {\\n            uint256[2] memory realBalances;\\n            for (uint i = 0; i < realBalances.length; i++) {\\n                realBalances[i] = _tokens[i].balanceOf(address(this));\\n            }\\n\\n            // Pre-compute fair supply\\n            fairSupply = type(uint256).max;\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 fairSupplyCached = fairSupply;\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\n                require(amount >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), amount);\\n                receivedAmounts[i] = _tokens[i].balanceOf(address(this)).sub(realBalances[i]);\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                virtualBalancesForRemoval[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n                virtualBalancesForAddition[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n            }\\n        }\\n\\n        require(fairSupply > 0, \\\"Mooniswap: result is not enough\\\");\\n        _mint(target, fairSupply);\\n\\n        emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\n    }\\n\\n    function withdraw(uint256 amount, uint256[] memory minReturns) external returns(uint256[2] memory withdrawnAmounts) {\\n        return withdrawFor(amount, minReturns, msg.sender);\\n    }\\n\\n    function withdrawFor(uint256 amount, uint256[] memory minReturns, address target) public nonReentrant returns(uint256[2] memory withdrawnAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n        _burn(msg.sender, amount);\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            IERC20 token = _tokens[i];\\n\\n            uint256 preBalance = token.balanceOf(address(this));\\n            uint256 value = preBalance.mul(amount).div(totalSupply);\\n            token.safeTransfer(target, value);\\n            withdrawnAmounts[i] = value;\\n            require(i >= minReturns.length || value >= minReturns[i], \\\"Mooniswap: result is not enough\\\");\\n\\n            virtualBalancesForAddition[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\\n            virtualBalancesForRemoval[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\\n        }\\n\\n        emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\n    }\\n\\n    function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral) external returns(uint256 result) {\\n        return swapFor(src, dst, amount, minReturn, referral, msg.sender);\\n    }\\n\\n    function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address receiver) public nonReentrant whenNotShutdown returns(uint256 result) {\\n        Balances memory balances = Balances({\\n            src: src.balanceOf(address(this)),\\n            dst: dst.balanceOf(address(this))\\n        });\\n        uint256 confirmed;\\n        Balances memory virtualBalances;\\n        Fees memory fees = Fees({\\n            fee: fee(),\\n            slippageFee: slippageFee()\\n        });\\n        (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\n        emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\n        _mintRewards(confirmed, result, referral, balances, fees);\\n    }\\n\\n    function _doTransfers(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address receiver, Balances memory balances, Fees memory fees)\\n        private returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\n    {\\n        virtualBalances.src = virtualBalancesForAddition[src].current(balances.src);\\n        virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\n        virtualBalances.dst = virtualBalancesForRemoval[dst].current(balances.dst);\\n        virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\n        src.safeTransferFrom(msg.sender, address(this), amount);\\n        confirmed = src.balanceOf(address(this)).sub(balances.src);\\n        result = _getReturn(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\n        require(result > 0 && result >= minReturn, \\\"Mooniswap: return is not enough\\\");\\n        dst.safeTransfer(receiver, result);\\n\\n        // Update virtual balances to the same direction only at imbalanced state\\n        if (virtualBalances.src != balances.src) {\\n            virtualBalancesForAddition[src].set(virtualBalances.src.add(confirmed));\\n        }\\n        if (virtualBalances.dst != balances.dst) {\\n            virtualBalancesForRemoval[dst].set(virtualBalances.dst.sub(result));\\n        }\\n        // Update virtual balances to the opposite direction\\n        virtualBalancesForRemoval[src].update(balances.src);\\n        virtualBalancesForAddition[dst].update(balances.dst);\\n    }\\n\\n    function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees) private {\\n        (uint256 referralShare, uint256 governanceShare, address govWallet, address feeCollector) = mooniswapFactoryGovernance.shareParameters();\\n\\n        uint256 refReward;\\n        uint256 govReward;\\n\\n        uint256 invariantRatio = uint256(1e36);\\n        invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\n        invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\n        if (invariantRatio > 1e36) {\\n            // calculate share only if invariant increased\\n            invariantRatio = invariantRatio.sqrt();\\n            uint256 invIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\n\\n            refReward = (referral != address(0)) ? invIncrease.mul(referralShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n            govReward = (govWallet != address(0)) ? invIncrease.mul(governanceShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n\\n            if (feeCollector == address(0)) {\\n                if (refReward > 0) {\\n                    _mint(referral, refReward);\\n                }\\n                if (govReward > 0) {\\n                    _mint(govWallet, govReward);\\n                }\\n            }\\n            else if (refReward > 0 || govReward > 0) {\\n                uint256 len = (refReward > 0 ? 1 : 0) + (govReward > 0 ? 1 : 0);\\n                address[] memory wallets = new address[](len);\\n                uint256[] memory rewards = new uint256[](len);\\n\\n                wallets[0] = referral;\\n                rewards[0] = refReward;\\n                if (govReward > 0) {\\n                    wallets[len - 1] = govWallet;\\n                    rewards[len - 1] = govReward;\\n                }\\n\\n                try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\n                    _mint(feeCollector, refReward.add(govReward));\\n                }\\n                catch {\\n                    emit Error(\\\"updateRewards() failed\\\");\\n                }\\n            }\\n        }\\n\\n        emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, refReward, govReward);\\n    }\\n\\n    /*\\n        spot_ret = dx * y / x\\n        uni_ret = dx * y / (x + dx)\\n        slippage = (spot_ret - uni_ret) / spot_ret\\n        slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\n        slippage = dx / (x + dx)\\n        ret = uni_ret * (1 - slip_fee * slippage)\\n        ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\n        ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\n\\n        x = amount * denominator\\n        dx = amount * (denominator - fee)\\n    */\\n    function _getReturn(IERC20 src, IERC20 dst, uint256 amount, uint256 srcBalance, uint256 dstBalance, uint256 fee, uint256 slippageFee) internal view returns(uint256) {\\n        if (src > dst) {\\n            (src, dst) = (dst, src);\\n        }\\n        if (amount > 0 && src == token0 && dst == token1) {\\n            uint256 taxedAmount = amount.sub(amount.mul(fee).div(MooniswapConstants._FEE_DENOMINATOR));\\n            uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\n            uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\n            uint256 feeNumerator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\n            uint256 feeDenominator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\n            return ret.mul(feeNumerator).div(feeDenominator);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d44d4a9825a618f05eec844e9cc97add154512674176a2789ab5941336a8b5c\",\"license\":\"MIT\"},\"contracts/MooniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IMooniswapDeployer.sol\\\";\\nimport \\\"./interfaces/IMooniswapFactory.sol\\\";\\nimport \\\"./libraries/UniERC20.sol\\\";\\nimport \\\"./Mooniswap.sol\\\";\\nimport \\\"./governance/MooniswapFactoryGovernance.sol\\\";\\n\\n\\ncontract MooniswapFactory is IMooniswapFactory, MooniswapFactoryGovernance {\\n    using UniERC20 for IERC20;\\n\\n    event Deployed(\\n        Mooniswap indexed mooniswap,\\n        IERC20 indexed token1,\\n        IERC20 indexed token2\\n    );\\n\\n    IMooniswapDeployer public immutable mooniswapDeployer;\\n    address public immutable poolOwner;\\n    Mooniswap[] public allPools;\\n    mapping(Mooniswap => bool) public override isPool;\\n    mapping(IERC20 => mapping(IERC20 => Mooniswap)) private _pools;\\n\\n    constructor (address _poolOwner, IMooniswapDeployer _mooniswapDeployer, address _governanceMothership) public MooniswapFactoryGovernance(_governanceMothership) {\\n        poolOwner = _poolOwner;\\n        mooniswapDeployer = _mooniswapDeployer;\\n    }\\n\\n    function getAllPools() external view returns(Mooniswap[] memory) {\\n        return allPools;\\n    }\\n\\n    function pools(IERC20 tokenA, IERC20 tokenB) external view override returns (Mooniswap pool) {\\n        (IERC20 token1, IERC20 token2) = sortTokens(tokenA, tokenB);\\n        return _pools[token1][token2];\\n    }\\n\\n    function deploy(IERC20 tokenA, IERC20 tokenB) public returns(Mooniswap pool) {\\n        require(tokenA != tokenB, \\\"Factory: not support same tokens\\\");\\n        (IERC20 token1, IERC20 token2) = sortTokens(tokenA, tokenB);\\n        require(_pools[token1][token2] == Mooniswap(0), \\\"Factory: pool already exists\\\");\\n\\n        string memory symbol1 = token1.uniSymbol();\\n        string memory symbol2 = token2.uniSymbol();\\n\\n        pool = mooniswapDeployer.deploy(\\n            token1,\\n            token2,\\n            string(abi.encodePacked(\\\"1inch Liquidity Pool (\\\", symbol1, \\\"-\\\", symbol2, \\\")\\\")),\\n            string(abi.encodePacked(\\\"1LP-\\\", symbol1, \\\"-\\\", symbol2)),\\n            poolOwner\\n        );\\n\\n        _pools[token1][token2] = pool;\\n        allPools.push(pool);\\n        isPool[pool] = true;\\n\\n        emit Deployed(pool, token1, token2);\\n    }\\n\\n    function sortTokens(IERC20 tokenA, IERC20 tokenB) public pure returns(IERC20, IERC20) {\\n        if (tokenA < tokenB) {\\n            return (tokenA, tokenB);\\n        }\\n        return (tokenB, tokenA);\\n    }\\n}\\n\",\"keccak256\":\"0x203be490719cbd32b2f7242e6699068f595e3409978af7944a7606b25b6a6f1a\",\"license\":\"MIT\"},\"contracts/governance/BaseGovernanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/IGovernanceModule.sol\\\";\\n\\n\\nabstract contract BaseGovernanceModule is IGovernanceModule {\\n    address public immutable mothership;\\n\\n    modifier onlyMothership {\\n        require(msg.sender == mothership, \\\"Access restricted to mothership\\\");\\n\\n        _;\\n    }\\n\\n    constructor(address _mothership) public {\\n        mothership = _mothership;\\n    }\\n\\n    function notifyStakesChanged(address[] calldata accounts, uint256[] calldata newBalances) external override onlyMothership {\\n        require(accounts.length == newBalances.length, \\\"Arrays length should be equal\\\");\\n\\n        for(uint256 i = 0; i < accounts.length; ++i) {\\n            _notifyStakeChanged(accounts[i], newBalances[i]);\\n        }\\n    }\\n\\n    function notifyStakeChanged(address account, uint256 newBalance) external override onlyMothership {\\n        _notifyStakeChanged(account, newBalance);\\n    }\\n\\n    function _notifyStakeChanged(address account, uint256 newBalance) internal virtual;\\n}\\n\",\"keccak256\":\"0x585f484d08c1a49536780efb1b25d8bd3a3af325fb1cd40d0e76f63a0095f10d\",\"license\":\"MIT\"},\"contracts/governance/MooniswapFactoryGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactoryGovernance.sol\\\";\\nimport \\\"../libraries/ExplicitLiquidVoting.sol\\\";\\nimport \\\"../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"../utils/BalanceAccounting.sol\\\";\\nimport \\\"./BaseGovernanceModule.sol\\\";\\n\\n\\ncontract MooniswapFactoryGovernance is IMooniswapFactoryGovernance, BaseGovernanceModule, BalanceAccounting, Ownable, Pausable {\\n    using Vote for Vote.Data;\\n    using ExplicitLiquidVoting for ExplicitLiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    event DefaultFeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n    event DefaultSlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n    event ReferralShareVoteUpdate(address indexed user, uint256 referralShare, bool isDefault, uint256 amount);\\n    event GovernanceShareVoteUpdate(address indexed user, uint256 governanceShare, bool isDefault, uint256 amount);\\n    event GovernanceWalletUpdate(address governanceWallet);\\n    event FeeCollectorUpdate(address feeCollector);\\n\\n    ExplicitLiquidVoting.Data private _defaultFee;\\n    ExplicitLiquidVoting.Data private _defaultSlippageFee;\\n    ExplicitLiquidVoting.Data private _referralShare;\\n    ExplicitLiquidVoting.Data private _governanceShare;\\n    address public override governanceWallet;\\n    address public override feeCollector;\\n\\n    mapping(address => bool) public override isFeeCollector;\\n\\n    constructor(address _mothership) public BaseGovernanceModule(_mothership) {\\n        _defaultFee.data.result = MooniswapConstants._DEFAULT_FEE.toUint104();\\n        _defaultSlippageFee.data.result = MooniswapConstants._DEFAULT_SLIPPAGE_FEE.toUint104();\\n        _referralShare.data.result = MooniswapConstants._DEFAULT_REFERRAL_SHARE.toUint104();\\n        _governanceShare.data.result = MooniswapConstants._DEFAULT_GOVERNANCE_SHARE.toUint104();\\n    }\\n\\n    function shutdown() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function isActive() external view override returns (bool) {\\n        return !paused();\\n    }\\n\\n    function shareParameters() external view override returns(uint256, uint256, address, address) {\\n        return (_referralShare.data.current(), _governanceShare.data.current(), governanceWallet, feeCollector);\\n    }\\n\\n    function defaults() external view override returns(uint256, uint256) {\\n        return (_defaultFee.data.current(), _defaultSlippageFee.data.current());\\n    }\\n\\n    function defaultFee() external view override returns(uint256) {\\n        return _defaultFee.data.current();\\n    }\\n\\n    function defaultFeeVotes(address user) external view returns(uint256) {\\n        return _defaultFee.votes[user].get(MooniswapConstants._DEFAULT_FEE);\\n    }\\n\\n    function virtualDefaultFee() external view override returns(uint104, uint104, uint48) {\\n        return (_defaultFee.data.oldResult, _defaultFee.data.result, _defaultFee.data.time);\\n    }\\n\\n    function defaultSlippageFee() external view override returns(uint256) {\\n        return _defaultSlippageFee.data.current();\\n    }\\n\\n    function defaultSlippageFeeVotes(address user) external view returns(uint256) {\\n        return _defaultSlippageFee.votes[user].get(MooniswapConstants._DEFAULT_SLIPPAGE_FEE);\\n    }\\n\\n    function virtualDefaultSlippageFee() external view override returns(uint104, uint104, uint48) {\\n        return (_defaultSlippageFee.data.oldResult, _defaultSlippageFee.data.result, _defaultSlippageFee.data.time);\\n    }\\n\\n    function referralShare() external view override returns(uint256) {\\n        return _referralShare.data.current();\\n    }\\n\\n    function referralShareVotes(address user) external view returns(uint256) {\\n        return _referralShare.votes[user].get(MooniswapConstants._DEFAULT_REFERRAL_SHARE);\\n    }\\n\\n    function virtualReferralShare() external view returns(uint104, uint104, uint48) {\\n        return (_referralShare.data.oldResult, _referralShare.data.result, _referralShare.data.time);\\n    }\\n\\n    function governanceShare() external view override returns(uint256) {\\n        return _governanceShare.data.current();\\n    }\\n\\n    function governanceShareVotes(address user) external view returns(uint256) {\\n        return _governanceShare.votes[user].get(MooniswapConstants._DEFAULT_GOVERNANCE_SHARE);\\n    }\\n\\n    function virtualGovernanceShare() external view returns(uint104, uint104, uint48) {\\n        return (_governanceShare.data.oldResult, _governanceShare.data.result, _governanceShare.data.time);\\n    }\\n\\n    function setGovernanceWallet(address newGovernanceWallet) external onlyOwner {\\n        governanceWallet = newGovernanceWallet;\\n        emit GovernanceWalletUpdate(newGovernanceWallet);\\n    }\\n\\n    function setFeeCollector(address newFeeCollector) external onlyOwner {\\n        feeCollector = newFeeCollector;\\n        isFeeCollector[newFeeCollector] = true;\\n        emit FeeCollectorUpdate(newFeeCollector);\\n    }\\n\\n    function defaultFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n        _defaultFee.updateVote(msg.sender, _defaultFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), MooniswapConstants._DEFAULT_FEE, _emitDefaultFeeVoteUpdate);\\n    }\\n\\n    function discardDefaultFeeVote() external {\\n       _defaultFee.updateVote(msg.sender, _defaultFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), MooniswapConstants._DEFAULT_FEE, _emitDefaultFeeVoteUpdate);\\n    }\\n\\n    function defaultSlippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n        _defaultSlippageFee.updateVote(msg.sender, _defaultSlippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), MooniswapConstants._DEFAULT_SLIPPAGE_FEE, _emitDefaultSlippageFeeVoteUpdate);\\n    }\\n\\n   function discardDefaultSlippageFeeVote() external {\\n        _defaultSlippageFee.updateVote(msg.sender, _defaultSlippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), MooniswapConstants._DEFAULT_SLIPPAGE_FEE, _emitDefaultSlippageFeeVoteUpdate);\\n    }\\n\\n    function referralShareVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SHARE, \\\"Referral share vote is too high\\\");\\n        require(vote >= MooniswapConstants._MIN_REFERRAL_SHARE, \\\"Referral share vote is too low\\\");\\n        _referralShare.updateVote(msg.sender, _referralShare.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), MooniswapConstants._DEFAULT_REFERRAL_SHARE, _emitReferralShareVoteUpdate);\\n    }\\n\\n    function discardReferralShareVote() external {\\n        _referralShare.updateVote(msg.sender, _referralShare.votes[msg.sender], Vote.init(), balanceOf(msg.sender), MooniswapConstants._DEFAULT_REFERRAL_SHARE, _emitReferralShareVoteUpdate);\\n    }\\n\\n    function governanceShareVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SHARE, \\\"Gov share vote is too high\\\");\\n        _governanceShare.updateVote(msg.sender, _governanceShare.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), MooniswapConstants._DEFAULT_GOVERNANCE_SHARE, _emitGovernanceShareVoteUpdate);\\n    }\\n\\n    function discardGovernanceShareVote() external {\\n        _governanceShare.updateVote(msg.sender, _governanceShare.votes[msg.sender], Vote.init(), balanceOf(msg.sender), MooniswapConstants._DEFAULT_GOVERNANCE_SHARE, _emitGovernanceShareVoteUpdate);\\n    }\\n\\n    function _notifyStakeChanged(address account, uint256 newBalance) internal override {\\n        uint256 balance = _set(account, newBalance);\\n        if (newBalance == balance) {\\n            return;\\n        }\\n\\n        _defaultFee.updateBalance(account, _defaultFee.votes[account], balance, newBalance, MooniswapConstants._DEFAULT_FEE, _emitDefaultFeeVoteUpdate);\\n        _defaultSlippageFee.updateBalance(account, _defaultSlippageFee.votes[account], balance, newBalance, MooniswapConstants._DEFAULT_SLIPPAGE_FEE, _emitDefaultSlippageFeeVoteUpdate);\\n        _referralShare.updateBalance(account, _referralShare.votes[account], balance, newBalance, MooniswapConstants._DEFAULT_REFERRAL_SHARE, _emitReferralShareVoteUpdate);\\n        _governanceShare.updateBalance(account, _governanceShare.votes[account], balance, newBalance, MooniswapConstants._DEFAULT_GOVERNANCE_SHARE, _emitGovernanceShareVoteUpdate);\\n    }\\n\\n    function _emitDefaultFeeVoteUpdate(address user, uint256 newDefaultFee, bool isDefault, uint256 balance) private {\\n        emit DefaultFeeVoteUpdate(user, newDefaultFee, isDefault, balance);\\n    }\\n\\n    function _emitDefaultSlippageFeeVoteUpdate(address user, uint256 newDefaultSlippageFee, bool isDefault, uint256 balance) private {\\n        emit DefaultSlippageFeeVoteUpdate(user, newDefaultSlippageFee, isDefault, balance);\\n    }\\n\\n    function _emitReferralShareVoteUpdate(address user, uint256 newReferralShare, bool isDefault, uint256 balance) private {\\n        emit ReferralShareVoteUpdate(user, newReferralShare, isDefault, balance);\\n    }\\n\\n    function _emitGovernanceShareVoteUpdate(address user, uint256 newGovernanceShare, bool isDefault, uint256 balance) private {\\n        emit GovernanceShareVoteUpdate(user, newGovernanceShare, isDefault, balance);\\n    }\\n}\\n\",\"keccak256\":\"0xe7a2e10c5cbf41b4b232eabed87b334b280c1702aace79b99dfdcc9d1fe92b36\",\"license\":\"MIT\"},\"contracts/governance/MooniswapGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactoryGovernance.sol\\\";\\nimport \\\"../libraries/LiquidVoting.sol\\\";\\nimport \\\"../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\n\\n\\nabstract contract MooniswapGovernance is ERC20, Ownable, ReentrancyGuard {\\n    using Vote for Vote.Data;\\n    using LiquidVoting for LiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeCast for uint256;\\n\\n    event FeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n    event SlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n\\n    IMooniswapFactoryGovernance public mooniswapFactoryGovernance;\\n    LiquidVoting.Data private _fee;\\n    LiquidVoting.Data private _slippageFee;\\n\\n    constructor(IMooniswapFactoryGovernance _mooniswapFactoryGovernance) internal {\\n        mooniswapFactoryGovernance = _mooniswapFactoryGovernance;\\n        _fee.data.result = _mooniswapFactoryGovernance.defaultFee().toUint104();\\n        _slippageFee.data.result = _mooniswapFactoryGovernance.defaultSlippageFee().toUint104();\\n    }\\n\\n    function setMooniswapFactoryGovernance(IMooniswapFactoryGovernance newMooniswapFactoryGovernance) external onlyOwner {\\n        mooniswapFactoryGovernance = newMooniswapFactoryGovernance;\\n        this.discardFeeVote();\\n        this.discardSlippageFeeVote();\\n    }\\n\\n    function fee() public view returns(uint256) {\\n        return _fee.data.current();\\n    }\\n\\n    function slippageFee() public view returns(uint256) {\\n        return _slippageFee.data.current();\\n    }\\n\\n    function virtualFee() external view returns(uint104, uint104, uint48) {\\n        return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\n    }\\n\\n    function virtualSlippageFee() external view returns(uint104, uint104, uint48) {\\n        return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\n    }\\n\\n    function feeVotes(address user) external view returns(uint256) {\\n        return _fee.votes[user].get(mooniswapFactoryGovernance.defaultFee);\\n    }\\n\\n    function slippageFeeVotes(address user) external view returns(uint256) {\\n        return _slippageFee.votes[user].get(mooniswapFactoryGovernance.defaultSlippageFee);\\n    }\\n\\n    function feeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function slippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function discardFeeVote() external {\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function discardSlippageFeeVote() external {\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function _emitFeeVoteUpdate(address account, uint256 newFee, bool isDefault, uint256 newBalance) private {\\n        emit FeeVoteUpdate(account, newFee, isDefault, newBalance);\\n    }\\n\\n    function _emitSlippageFeeVoteUpdate(address account, uint256 newSlippageFee, bool isDefault, uint256 newBalance) private {\\n        emit SlippageFeeVoteUpdate(account, newSlippageFee, isDefault, newBalance);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from == to) {\\n            // ignore transfers to self\\n            return;\\n        }\\n\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance = mooniswapFactoryGovernance;\\n        bool updateFrom = !(from == address(0) || _mooniswapFactoryGovernance.isFeeCollector(from));\\n        bool updateTo = !(to == address(0) || _mooniswapFactoryGovernance.isFeeCollector(to));\\n\\n        if (!updateFrom && !updateTo) {\\n            // mint to feeReceiver or burn from feeReceiver\\n            return;\\n        }\\n\\n        uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\n        uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\n        uint256 newTotalSupply = totalSupply()\\n            .add(from == address(0) ? amount : 0)\\n            .sub(to == address(0) ? amount : 0);\\n\\n        ParamsHelper memory params = ParamsHelper({\\n            from: from,\\n            to: to,\\n            updateFrom: updateFrom,\\n            updateTo: updateTo,\\n            amount: amount,\\n            balanceFrom: balanceFrom,\\n            balanceTo: balanceTo,\\n            newTotalSupply: newTotalSupply\\n        });\\n\\n        (uint256 defaultFee, uint256 defaultSlippageFee) = _mooniswapFactoryGovernance.defaults();\\n\\n        _updateOnTransfer(params, defaultFee, _emitFeeVoteUpdate, _fee);\\n        _updateOnTransfer(params, defaultSlippageFee, _emitSlippageFeeVoteUpdate, _slippageFee);\\n    }\\n\\n    struct ParamsHelper {\\n        address from;\\n        address to;\\n        bool updateFrom;\\n        bool updateTo;\\n        uint256 amount;\\n        uint256 balanceFrom;\\n        uint256 balanceTo;\\n        uint256 newTotalSupply;\\n    }\\n\\n    function _updateOnTransfer(\\n        ParamsHelper memory params,\\n        uint256 defaultValue,\\n        function(address, uint256, bool, uint256) internal emitEvent,\\n        LiquidVoting.Data storage votingData\\n    ) private {\\n        Vote.Data memory voteFrom = votingData.votes[params.from];\\n        Vote.Data memory voteTo = votingData.votes[params.to];\\n\\n        if (voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\n            emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\n            emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\n            return;\\n        }\\n\\n        if (params.updateFrom) {\\n            votingData.updateBalance(params.from, voteFrom, params.balanceFrom, params.balanceFrom.sub(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n\\n        if (params.updateTo) {\\n            votingData.updateBalance(params.to, voteTo, params.balanceTo, params.balanceTo.add(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3dcca03803c6ae225ab1bd706ed7482b88dd5d0c71cadfba946417e53c0b63f2\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IFeeCollector {\\n    function updateReward(address receiver, uint256 amount) external;\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x32a215750177362f8077d6e4cf48ae508e0b6565f20f8eaa4b130260bf238555\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IGovernanceModule {\\n    function notifyStakeChanged(address account, uint256 newBalance) external;\\n    function notifyStakesChanged(address[] calldata accounts, uint256[] calldata newBalances) external;\\n}\\n\",\"keccak256\":\"0x4d536ea796fbb6f9a0527690d38bb3c125ea604b72496e91c9bc0c14b152aa8f\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../Mooniswap.sol\\\";\\n\\ninterface IMooniswapDeployer {\\n    function deploy(\\n        IERC20 token1,\\n        IERC20 token2,\\n        string calldata name,\\n        string calldata symbol,\\n        address poolOwner\\n    ) external returns(Mooniswap pool);\\n}\\n\",\"keccak256\":\"0x58302e42d466a5c0cd240c840f3caad7c54e10a01a7c1c2ff815a551288c9776\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../Mooniswap.sol\\\";\\n\\ninterface IMooniswapFactory is IMooniswapFactoryGovernance {\\n    function pools(IERC20 token0, IERC20 token1) external view returns (Mooniswap);\\n    function isPool(Mooniswap mooniswap) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee7b8aa36fc3d066d8c1413b06f09932eb72e9d608f5ce8b303a9cafc049fcab\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactoryGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IMooniswapFactoryGovernance {\\n    function shareParameters() external view returns(uint256 referralShare, uint256 governanceShare, address governanceWallet, address referralFeeReceiver);\\n    function defaults() external view returns(uint256 defaultFee, uint256 defaultSlippageFee);\\n\\n    function defaultFee() external view returns(uint256);\\n    function defaultSlippageFee() external view returns(uint256);\\n\\n    function virtualDefaultFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultSlippageFee() external view returns(uint104, uint104, uint48);\\n\\n    function referralShare() external view returns(uint256);\\n    function governanceShare() external view returns(uint256);\\n    function governanceWallet() external view returns(address);\\n    function feeCollector() external view returns(address);\\n\\n    function isFeeCollector(address) external view returns(bool);\\n    function isActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6ca0e9c05419b5fe05ea3e46246079c2392f6269ca54d33ba05518547c0069a\",\"license\":\"MIT\"},\"contracts/libraries/ExplicitLiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary ExplicitLiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _votedSupply;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        ExplicitLiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        ExplicitLiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        ExplicitLiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldVotedSupply = self._votedSupply;\\n        uint256 newVotedSupply = oldVotedSupply;\\n\\n        if (!oldVote.isDefault()) {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n            newVotedSupply = newVotedSupply.sub(oldBalance);\\n        }\\n\\n        if (!newVote.isDefault()) {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n            newVotedSupply = newVotedSupply.add(newBalance);\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newVotedSupply != oldVotedSupply) {\\n            self._votedSupply = newVotedSupply;\\n        }\\n\\n        {\\n            uint256 newResult = newVotedSupply == 0 ? defaultVote : newWeightedSum.div(newVotedSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x04ff043a03b46bf31df946e05e9497f593ab5531ab81d73ef338ad7211088331\",\"license\":\"MIT\"},\"contracts/libraries/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary LiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _defaultVotes;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 totalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldDefaultVotes = self._defaultVotes;\\n        uint256 newDefaultVotes = oldDefaultVotes;\\n\\n        if (oldVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.sub(oldBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n        }\\n\\n        if (newVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.add(newBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newDefaultVotes != oldDefaultVotes) {\\n            self._defaultVotes = newDefaultVotes;\\n        }\\n\\n        {\\n            uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).div(newTotalSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x0300c61b4bba9a58097ec0a843d04b42260f705dbc68bf3bbcc9e9011ffdfd7a\",\"license\":\"MIT\"},\"contracts/libraries/MooniswapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary MooniswapConstants {\\n    uint256 internal constant _FEE_DENOMINATOR = 1e18;\\n\\n    uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\n    uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\n\\n    uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\n    uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\n\\n    uint256 internal constant _DEFAULT_FEE = 0;\\n    uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\n    uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\n}\\n\",\"keccak256\":\"0x9f6421e5cf8734fbf5670148f3d6030b69aaeba473933f9a07fd3766fdaf1733\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary SafeCast {\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n}\\n\",\"keccak256\":\"0x6f5e3e3d0bc762c2defe32c7bc62309cd7e60776bb5dc0d059a1bcf0874b4c51\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// adapt library from OZ due to OVM incompatibility\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: non-zero to non-zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: operation failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4cc1b6b3b02d033719e1261afde66c209064899827c63a92faa50d9238c301b4\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary Sqrt {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256) {\\n        if (y > 3) {\\n            uint256 z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n            return z;\\n        } else if (y != 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5674ed7d1bb3655d9d6698ff6175cb23261d8cf837915d0af70404aa019b5267\",\"license\":\"MIT\"},\"contracts/libraries/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\nlibrary UniERC20 {\\n    function uniSymbol(IERC20 token) internal view returns(string memory) {\\n        require(address(token) != address(0), \\\"Raw ETH is not supported in OVM\\\");\\n\\n        (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\\n            abi.encodeWithSignature(\\\"symbol()\\\")\\n        );\\n        if (!success) {\\n            (success, data) = address(token).staticcall{ gas: 20000 }(\\n                abi.encodeWithSignature(\\\"SYMBOL()\\\")\\n            );\\n        }\\n\\n        if (success && data.length >= 96) {\\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\\n            if (offset == 0x20 && len > 0 && len <= 256) {\\n                return string(abi.decode(data, (bytes)));\\n            }\\n        }\\n\\n        if (success && data.length == 32) {\\n            uint len = 0;\\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\\n                len++;\\n            }\\n\\n            if (len > 0) {\\n                bytes memory result = new bytes(len);\\n                for (uint i = 0; i < len; i++) {\\n                    result[i] = data[i];\\n                }\\n                return string(result);\\n            }\\n        }\\n\\n        return _toHex(address(token));\\n    }\\n\\n    function _toHex(address account) private pure returns(string memory) {\\n        return _toHex(abi.encodePacked(account));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns(string memory) {\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        uint j = 2;\\n        for (uint i = 0; i < data.length; i++) {\\n            uint a = uint8(data[i]) >> 4;\\n            uint b = uint8(data[i]) & 0x0f;\\n            str[j++] = byte(uint8(a + 48 + (a/10)*39));\\n            str[j++] = byte(uint8(b + 48 + (b/10)*39));\\n        }\\n\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x050d2ea58089ff9419f0c696738df97f2b33086fb21f16ed82f8d848d592e793\",\"license\":\"MIT\"},\"contracts/libraries/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./MooniswapConstants.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n\\nlibrary VirtualBalance {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    struct Data {\\n        uint216 balance;\\n        uint40 time;\\n    }\\n\\n    function set(VirtualBalance.Data storage self, uint256 balance) internal {\\n        (self.balance, self.time) = (\\n            balance.toUint216(),\\n            block.timestamp.toUint40()\\n        );\\n    }\\n\\n    function update(VirtualBalance.Data storage self, uint256 realBalance) internal {\\n        set(self, current(self, realBalance));\\n    }\\n\\n    function scale(VirtualBalance.Data storage self, uint256 realBalance, uint256 num, uint256 denom) internal {\\n        set(self, current(self, realBalance).mul(num).add(denom.sub(1)).div(denom));\\n    }\\n\\n    function current(VirtualBalance.Data memory self, uint256 realBalance) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(MooniswapConstants._DEFAULT_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = MooniswapConstants._DEFAULT_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.balance).mul(timeRemain).add(\\n            realBalance.mul(timePassed)\\n        ).div(MooniswapConstants._DEFAULT_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0x4b76426258b1819ccc958c06ab7ec3d6375b594ee9a8f86e4b01949b71e3aa26\",\"license\":\"MIT\"},\"contracts/libraries/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary VirtualVote {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\n\\n    struct Data {\\n        uint104 oldResult;\\n        uint104 result;\\n        uint48 time;\\n    }\\n\\n    function current(VirtualVote.Data memory self) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.oldResult).mul(timeRemain).add(\\n            uint256(self.result).mul(timePassed)\\n        ).div(_VOTE_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0xd62c910eb9b206eb6c2230be6c964824693fbe52436e53c3e69f02a84aa7c63d\",\"license\":\"MIT\"},\"contracts/libraries/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nlibrary Vote {\\n    struct Data {\\n        uint256 value;\\n    }\\n\\n    function eq(Vote.Data memory self, Vote.Data memory vote) internal pure returns(bool) {\\n        return self.value == vote.value;\\n    }\\n\\n    function init() internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: 0\\n        });\\n    }\\n\\n    function init(uint256 vote) internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: vote + 1\\n        });\\n    }\\n\\n    function isDefault(Data memory self) internal pure returns(bool) {\\n        return self.value == 0;\\n    }\\n\\n    function get(Data memory self, uint256 defaultVote) internal pure returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVote;\\n    }\\n\\n    function get(Data memory self, function() external view returns(uint256) defaultVoteFn) internal view returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVoteFn();\\n    }\\n}\\n\",\"keccak256\":\"0xa31a88aebf9a52ea8c02e611cd798631e7296b78e9ecdf37d2b0c7eb2badb252\",\"license\":\"MIT\"},\"contracts/utils/BalanceAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract BalanceAccounting {\\n    using SafeMath for uint256;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _balances[account] = _balances[account].sub(amount, \\\"Burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n    }\\n\\n    function _set(address account, uint256 amount) internal virtual returns(uint256 oldAmount) {\\n        oldAmount = _balances[account];\\n        if (oldAmount != amount) {\\n            _balances[account] = amount;\\n            _totalSupply = _totalSupply.add(amount).sub(oldAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ae3cf0992b5e6d9eea9f5b1d1feec7d87ea2caecc493acf5dcedb3fe5034d48\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001c5760008062000019620002cc565b50505b506040516200344338038062003443833981810160405260608110156200004d576000806200004a620002cc565b50505b810190808051929190602001805192919060200180516001600160601b0319606082901b166080529250829150600090506200008862000298565b90508060026001816200009a62000339565b816001600160a01b0302191690836001600160a01b0316021790620000be6200039b565b5050506001600160a01b03811660007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060006002600160a01b816200010e62000339565b8160ff02191690831515021790620001256200039b565b5050506200013f6000620002aa60201b62001d2a1760201c565b6003600160681b816200015162000339565b816001600160681b0302191690836001600160681b0316021790620001756200039b565b50505062000196670de0b6b3a7640000620002aa60201b62001d2a1760201c565b6007600160681b81620001a862000339565b816001600160681b0302191690836001600160681b0316021790620001cc6200039b565b505050620001ed67016345785d8a0000620002aa60201b62001d2a1760201c565b600b600160681b81620001ff62000339565b816001600160681b0302191690836001600160681b0316021790620002236200039b565b5050506200023d6000620002aa60201b62001d2a1760201c565b600f600160681b816200024f62000339565b816001600160681b0302191690836001600160681b0316021790620002736200039b565b5050505050606091821b6001600160601b031990811660c052911b1660a05262000431565b60005a620002a5620003ea565b905090565b6000600160681b8210620002c857600080620002c5620002cc565b50505b5090565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101562000306578086015182820160400152602001620002e9565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101562000396576000828201526020016200037d565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206200037d565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206200037d565b60805160601c60a05160601c60c05160601c612fc86200047b600039806110355280611982525080610e4d5280611907525080610be85280610ce852806118525250612fc86000f3fe608060405234801561001957600080610016612bda565b50505b50600436106102235760003560e01c8063117036d11461023157806314fd235a14610272578063151359b41461029a578063172886e7146102a257806317901de3146102e757806318160ddd1461032d57806322abd7b21461033557806322f3e2d41461033d57806323662bb91461035957806327a27433146103615780633b90b9bf146103965780633eed75c3146103c55780634187b7d6146103cd57806341d1de97146103f1578063544caa5614610417578063545e7c61146104725780635a6c72d0146104a95780635b16ebb7146104b15780635c975abb146104e0578063607c219f146104e8578063612a9f7614610517578063709893301461051f57806370a0823114610527578063715018a614610556578063865e45731461055e5780638d4241271461058d5780638da5cb5b14610595578063901754d71461059d5780639725ff35146105d457806399fca7d9146105fa578063a42dce8014610629578063ad33334814610658578063b0cb4b0a14610755578063b8ffca321461075d578063c415b95c14610765578063cf0b22701461076d578063d88ff1f414610775578063d8f4e0eb146107d0578063e7a7b5a0146107f6578063e859e56c146107fe578063e9f7e17b14610806578063edb7a6fa1461082c578063f2fde38b1461084c578063f38303351461087b578063fb20b7d014610883578063fc0e74d1146108b2575b60008061022e612bda565b50505b610260600480360360208110156102505760008061024d612bda565b50505b50356001600160a01b03166108ba565b60405190815260200160405180910390f35b610298600480360360208110156102915760008061028e612bda565b50505b5035610904565b005b6102986109a0565b6102aa610a17565b60405180858152602001848152602001836001600160a01b03168152602001826001600160a01b0316815260200194505050505060405180910390f35b6102ef610af8565b60405180846001600160681b03168152602001836001600160681b031681526020018265ffffffffffff168152602001935050505060405180910390f35b610260610b5d565b6102ef610b6d565b610345610bb8565b604051901515815260200160405180910390f35b610260610bc8565b610298600480360360408110156103805760008061037d612bda565b50505b506001600160a01b038135169060200135610be6565b610345600480360360208110156103b5576000806103b2612bda565b50505b50356001600160a01b0316610c43565b610298610c6a565b6103d5610ce6565b6040516001600160a01b03909116815260200160405180910390f35b6103d5600480360360208110156104105760008061040d612bda565b50505b5035610d0a565b61044e6004803603604081101561043657600080610433612bda565b50505b506001600160a01b0381358116916020013516610d47565b6040516001600160a01b039283168152911660208201526040908101905180910390f35b6103d5600480360360408110156104915760008061048e612bda565b50505b506001600160a01b0381358116916020013516610d7b565b61026061133d565b610345600480360360208110156104d0576000806104cd612bda565b50505b50356001600160a01b031661135b565b610345611375565b6102986004803603602081101561050757600080610504612bda565b50505b50356001600160a01b0316611392565b61029861143a565b6103d5611493565b6102606004803603602081101561054657600080610543612bda565b50505b50356001600160a01b031661149f565b6102986114bf565b6102606004803603602081101561057d5760008061057a612bda565b50505b50356001600160a01b031661156a565b61029861159b565b6103d5611617565b6103d5600480360360408110156105bc576000806105b9612bda565b50505b506001600160a01b0381358116916020013516611639565b610298600480360360208110156105f3576000806105f0612bda565b50505b50356116a4565b6102606004803603602081101561061957600080610616612bda565b50505b50356001600160a01b0316611739565b6102986004803603602081101561064857600080610645612bda565b50505b50356001600160a01b031661176a565b6102986004803603604081101561067757600080610674612bda565b50505b810190602081018135600160201b81111561069a57600080610697612bda565b50505b8201836020820111156106b5576000806106b2612bda565b50505b803590602001918460208302840111600160201b831117156106df576000806106dc612bda565b50505b919390929091602081019035600160201b81111561070557600080610702612bda565b50505b8201836020820111156107205760008061071d612bda565b50505b803590602001918460208302840111600160201b8311171561074a57600080610747612bda565b50505b509092509050611850565b6103d5611905565b6102ef611929565b6103d5611974565b6103d5611980565b61077d6119a4565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156107bc5780820151838201526020016107a4565b505050509050019250505060405180910390f35b610298600480360360208110156107ef576000806107ec612bda565b50505b5035611a2b565b6102ef611aa2565b610260611aed565b6102986004803603602081101561082557600080610822612bda565b50505b5035611b0b565b610834611b83565b60405191825260208201526040908101905180910390f35b6102986004803603602081101561086b57600080610868612bda565b50505b50356001600160a01b0316611bc6565b610260611c96565b610260600480360360208110156108a25760008061089f612bda565b50505b50356001600160a01b0316611cb4565b610298611ced565b6001600160a01b0381166000908152600e6020526108fc67016345785d8a000060408320604051602081016040529081816108f3612c45565b90525090611d49565b90505b919050565b67016345785d8a00008111156109225760008061091f612bda565b50505b61099d5a61092e612ca0565b601260005a61093b612ca0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181610970612c45565b90525061097c84611d66565b61098d5a610988612ca0565b61149f565b600f939291906000611d84611ddb565b50565b610a155a6109ac612ca0565b600660005a6109b9612ca0565b6001600160a01b03166001600160a01b03168152602001908152602001600020604051602081016040529081816109ee612c45565b9052506109f9611df4565b610a055a610988612ca0565b6003939291906000611e0f611ddb565b565b6000808080610a95600b604051606081016040529081600082610a38612c45565b6001600160681b036101009290920a9004168152602001600d82610a5a612c45565b6001600160681b036101009290920a9004168152602001601a82610a7c612c45565b65ffffffffffff6101009290920a900416905250611e66565b610ab1600f604051606081016040529081600082610a38612c45565b60006013610abd612c45565b906101000a90046001600160a01b03166014600090610ada612c45565b906101000a90046001600160a01b0316935093509350935090919293565b6000808080600b610b07612c45565b6001600160681b036101009290920a900416600d600b610b25612c45565b6001600160681b036101009290920a900416601a600b610b43612c45565b906101000a900465ffffffffffff16925092509250909192565b600080610b68612c45565b905090565b6000808080600f610b7c612c45565b6001600160681b036101009290920a900416600d600f610b9a612c45565b6001600160681b036101009290920a900416601a600f610b43612c45565b6000610bc2611375565b15905090565b6000610b686007604051606081016040529081600082610a38612c45565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165a610c19612ca0565b6001600160a01b031614610c3557600080610c32612bda565b50505b610c3f8282611ef2565b5050565b601560205280600052604060002060009150610c5d612c45565b906101000a900460ff1681565b610a155a610c76612ca0565b600e60005a610c83612ca0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181610cb8612c45565b905250610cc3611df4565b610ccf5a610988612ca0565b600b9392919067016345785d8a0000612034611ddb565b7f000000000000000000000000000000000000000000000000000000000000000081565b60168181610d16612c45565b8110610d1e57fe5b9060005260206000200160009150610d34612c45565b906101000a90046001600160a01b031681565b600080826001600160a01b0316846001600160a01b03161015610d6e575082905081610d74565b50819050825b9250929050565b6000816001600160a01b0316836001600160a01b03161415610da557600080610da2612bda565b50505b600080610db28585610d47565b6001600160a01b038216600090815260186020529193509150604081206001600160a01b038316600090815260209190915260409020600090610df3612c45565b906101000a90046001600160a01b03166001600160a01b031614610e1f57600080610e1c612bda565b50505b6060610e33836001600160a01b031661208b565b90506060610e49836001600160a01b031661208b565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b92440b085858585604051602001808075062d2dcc6d04098d2e2ead2c8d2e8f240a0deded840560531b81525060160183805190602001908083835b60208310610ed15780518252601f199092019160209182019101610eb2565b6001836020036101000a03801982511681845116179092525050602d60f81b93909101928352505060010182805190602001908083835b60208310610f275780518252601f199092019160209182019101610f08565b6001836020036101000a03801982511681845116179092525050602960f81b93909101928352505060010192506040915050516020818303038152906040528686604051602001808063314c502d60e01b81525060040183805190602001908083835b60208310610fa95780518252601f199092019160209182019101610f8a565b6001836020036101000a03801982511681845116179092525050602d60f81b93909101928352505060010182805190602001908083835b60208310610fff5780518252601f199092019160209182019101610fe0565b6001836020036101000a0380198251168184511617909252505050919091019350604092505050516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b031681526020018060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019080838360005b838110156110d15780820151838201526020016110b9565b50505050905090810190601f1680156110fe5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b8381101561113457808201518382015260200161111c565b50505050905090810190601f1680156111615780820380516001836020036101000a031916815260200191505b5097505050505050505060206040518083038160008780611180612ce6565b15801561119557600080611192612bda565b50505b505a61119f612d32565b5050505050501580156111bf573d6000803e3d60006111bc612bda565b50505b505050506040513d60208110156111de576000806111db612bda565b50505b8101908080516001600160a01b03881660009081526018602052909850889350604092509050206001600160a01b038516600090815260209190915260409020600181611229612c45565b816001600160a01b0302191690836001600160a01b031602179061124b612e1d565b505050601685908060018161125e612c45565b018082611269612e1d565b505060009283526000190191602091502001600181611286612c45565b816001600160a01b0302191690836001600160a01b03160217906112a8612e1d565b5050506001600160a01b03851660009081526017602052600190604090206001816112d1612c45565b8160ff021916908315150217906112e6612e1d565b505050826001600160a01b0316846001600160a01b0316866001600160a01b03167fc95935a66d15e0da5e412aca0ad27ae891d20b2fb91cf3994b6a3bf2b817808260405160405180910390a45050505092915050565b6000610b686003604051606081016040529081600082610a38612c45565b601760205280600052604060002060009150610c5d612c45565b600060146002611383612c45565b906101000a900460ff16905090565b61139a61251c565b6001600160a01b03166113ab611617565b6001600160a01b0316146113c7576000806113c4612bda565b50505b8060136001816113d5612c45565b816001600160a01b0302191690836001600160a01b03160217906113f7612e1d565b5050507fe348b7d1d8572de16c7301317890112a52bd7f6c3b713bd7d70e4cffb489ed9f816040516001600160a01b03909116815260200160405180910390a150565b610a155a611446612ca0565b601260005a611453612ca0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181611488612c45565b90525061097c611df4565b60006013610d34612c45565b6001600160a01b03811660009081526001602052604081206108fc612c45565b6114c761251c565b6001600160a01b03166114d8611617565b6001600160a01b0316146114f4576000806114f1612bda565b50505b6000806002611501612c45565b906101000a90046001600160a01b03166001600160a01b0316600080516020612fa883398151915260405160405180910390a360006002600181611543612c45565b816001600160a01b0302191690836001600160a01b0316021790611565612e1d565b505050565b6001600160a01b038116600090815260126020526108fc8160408120604051602081016040529081816108f3612c45565b610a155a6115a7612ca0565b600a60005a6115b4612ca0565b6001600160a01b03166001600160a01b03168152602001908152602001600020604051602081016040529081816115e9612c45565b9052506115f4611df4565b6116005a610988612ca0565b600793929190670de0b6b3a7640000612527611ddb565b6000806002611624612c45565b906101000a90046001600160a01b0316905090565b60008060006116488585610d47565b6001600160a01b038216600090815260186020529193509150604090206001600160a01b038216600090815260209190915260409020600090611689612c45565b906101000a90046001600160a01b0316925050505b92915050565b67016345785d8a00008111156116c2576000806116bf612bda565b50505b66b1a2bc2ec500008110156116df576000806116dc612bda565b50505b61099d5a6116eb612ca0565b600e60005a6116f8612ca0565b6001600160a01b03166001600160a01b031681526020019081526020016000206040516020810160405290818161172d612c45565b905250610cc384611d66565b6001600160a01b038116600090815260066020526108fc8160408120604051602081016040529081816108f3612c45565b61177261251c565b6001600160a01b0316611783611617565b6001600160a01b03161461179f5760008061179c612bda565b50505b8060146001816117ad612c45565b816001600160a01b0302191690836001600160a01b03160217906117cf612e1d565b5050506001600160a01b03811660009081526015602052600190604090206001816117f8612c45565b8160ff0219169083151502179061180d612e1d565b5050507ffa7dc4914c53d1cee4cf31f857b016d55f8c6d28d5f950e64c7258a4fa18de19816040516001600160a01b03909116815260200160405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165a611883612ca0565b6001600160a01b03161461189f5760008061189c612bda565b50505b8281146118b4576000806118b1612bda565b50505b60005b838110156118fe576118f68585838181106118ce57fe5b905060200201356001600160a01b03168484848181106118ea57fe5b90506020020135611ef2565b6001016118b7565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008080806007611938612c45565b6001600160681b036101009290920a900416600d6007611956612c45565b6001600160681b036101009290920a900416601a6007610b43612c45565b60006014610d34612c45565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606016806119b1612c45565b8060200260200160405190810160405281815291906020830182806119d4612c45565b8015611a2157602002820191906000526020600020905b6000826119f6612c45565b906101000a90046001600160a01b03166001600160a01b0316815260200190600101908083116119eb575b5050505050905090565b662386f26fc10000811115611a4857600080611a45612bda565b50505b61099d5a611a54612ca0565b600660005a611a61612ca0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181611a96612c45565b9052506109f984611d66565b60008080806003611ab1612c45565b6001600160681b036101009290920a900416600d6003611acf612c45565b6001600160681b036101009290920a900416601a6003610b43612c45565b6000610b68600b604051606081016040529081600082610a38612c45565b670de0b6b3a7640000811115611b2957600080611b26612bda565b50505b61099d5a611b35612ca0565b600a60005a611b42612ca0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181611b77612c45565b9052506115f484611d66565b600080611ba26003604051606081016040529081600082610a38612c45565b611bbe6007604051606081016040529081600082610a38612c45565b915091509091565b611bce61251c565b6001600160a01b0316611bdf611617565b6001600160a01b031614611bfb57600080611bf8612bda565b50505b6001600160a01b038116611c1757600080611c14612bda565b50505b6001600160a01b03811660006002611c2d612c45565b906101000a90046001600160a01b03166001600160a01b0316600080516020612fa883398151915260405160405180910390a3806002600181611c6e612c45565b816001600160a01b0302191690836001600160a01b0316021790611c90612e1d565b50505050565b6000610b68600f604051606081016040529081600082610a38612c45565b6001600160a01b0381166000908152600a6020526108fc670de0b6b3a764000060408320604051602081016040529081816108f3612c45565b611cf561251c565b6001600160a01b0316611d06611617565b6001600160a01b031614611d2257600080611d1f612bda565b50505b610a1561257e565b6000600160681b8210611d4557600080611d42612bda565b50505b5090565b60008083511115611d60576001835103905061169e565b50919050565b611d6e612e6b565b6040516020810160405260019290920182525090565b836001600160a01b03167f02540a8a88261967ef1c1a4ed50fde9f0a0a493922c069129e21961198e1b43984848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b611deb8787878787888888612609565b50505050505050565b611dfc612e6b565b6040516020810160405260008152905090565b836001600160a01b03167f28eed64d01e23014333abef902958309592b3cf9ce9da390f224467cfcaaf5b284848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b600080611e9462015180611e8f856040015165ffffffffffff165a611e89612e7c565b906128ba565b6128d8565b90506000611ea562015180836128ba565b9050611eea62015180611ee4611ec98588602001516001600160681b0316906128f0565b611ede8589516001600160681b0316906128f0565b90612926565b9061293e565b949350505050565b6000611efe8383612966565b905080821415611f0e5750610c3f565b6001600160a01b03831660009081526006602052611f549084906040902060405160208101604052908181611f41612c45565b9052506003919084866000611e0f6129dc565b6001600160a01b0383166000908152600a602052611fa19084906040902060405160208101604052908181611f87612c45565b905250600791908486670de0b6b3a76400006125276129dc565b6001600160a01b0383166000908152600e602052611fee9084906040902060405160208101604052908181611fd4612c45565b905250600b9190848667016345785d8a00006120346129dc565b6001600160a01b038316600090815260126020526115659084906040902060405160208101604052908181612021612c45565b905250600f919084866000611d846129dc565b836001600160a01b03167ffa67c3ef5d30b2838a61d783cb71a076e17984d05840f2dfa1521135df49557b84848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b60606001600160a01b0382166120a9576000806120a6612bda565b50505b60006060836001600160a01b0316614e20604051602401604051601f198183030181526040919091526395d89b4160e01b6020820180516001600160e01b031690911790526040518082805190602001908083835b6020831061211d5780518252601f1990920191602091820191016120fe565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303818686612155612ec2565b5050505050925050503d806000811461218a576040513d603f01601f191681016040523d815291503d6000602084013e61218f565b606091505b50915091508161228257836001600160a01b0316614e20604051602401604051601f19818303018152604091909152631eedf1af60e31b6020820180516001600160e01b031690911790526040518082805190602001908083835b602083106122095780518252601f1990920191602091820191016121ea565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303818686612241612ec2565b5050505050925050503d8060008114612276576040513d603f01601f191681016040523d815291503d6000602084013e61227b565b606091505b5090925090505b81801561229157506060815110155b156123e45760008060208301835160408110156122b6576000806122b3612bda565b50505b8101908080519291906020018051939550929350505060208314905080156122de5750600081115b80156122ec57506101008111155b156123e157602083018351602081101561230e5760008061230b612bda565b50505b8101908080516040519392919084600160201b82111561233657600080612333612bda565b50505b90830190602082018581111561235457600080612351612bda565b50505b8251600160201b81118282018810171561237657600080612373612bda565b50505b825250602001908051906020019080838360005b838110156123a257808201518382015260200161238a565b50505050905090810190601f1680156123cf5780820380516001836020036101000a031916815260200191505b506040525050509450505050506108ff565b50505b8180156123f2575080516020145b156125135760005b8151811080156124285750600160fd1b82828151811061241657fe5b60200101516001600160f81b03191610155b80156124525750603f60f91b82828151811061244057fe5b60200101516001600160f81b03191611155b1561245f576001016123fa565b8015612511576060816001600160401b038111801561248657600080612483612bda565b50505b50604051818152601f19601f83011681016020016040529080156124b1576020820181803683370190505b50905060005b82811015612505578381815181106124cb57fe5b60200101516001600160f81b0319168282815181106124e657fe5b60200101906001600160f81b031916908160001a9053506001016124b7565b5093506108ff92505050565b505b611eea846129ff565b60005a610b68612ca0565b836001600160a01b03167f214419d1bacc9564ca0fcf6552dad3ec0aa54c97de900de89dc202e6bbd9198a84848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b612586611375565b1561259957600080612596612bda565b50505b60016002600160a01b816125ab612c45565b8160ff021916908315150217906125c0612e1d565b5050507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125ec61251c565b6040516001600160a01b03909116815260200160405180910390a1565b600088600101612617612c45565b905080600060028b01612628612c45565b9050806126348a612a35565b6126655761265661264f6126488c89611d49565b8a906128f0565b84906128ba565b925061266281896128ba565b90505b61266e89612a35565b61269f576126906126896126828b89611d49565b89906128f0565b8490612926565b925061269c8188612926565b90505b8383146126b857828060018e016126b4612e1d565b5050505b8181146126d157808060028e016126cd612e1d565b5050505b600081156126e8576126e3848361293e565b6126ea565b865b90506126f4612f88565b8d60405160608101604052908160008261270c612c45565b6001600160681b036101009290920a9004168152602001600d8261272e612c45565b6001600160681b036101009290920a9004168152602001601a82612750612c45565b65ffffffffffff6101009290920a900416905250905060208101516001600160681b0316821461284e578d61278c61278783611e66565b611d2a565b61279584611d2a565b6127a65a6127a1612e7c565b612a40565b83600081600d8482600160d01b816127bc612c45565b8165ffffffffffff021916908365ffffffffffff160217906127dc612e1d565b5050508591906101000a816127ef612c45565b816001600160681b0302191690836001600160681b0316021790612811612e1d565b5050508491906101000a81612824612c45565b816001600160681b0302191690836001600160681b0316021790612846612e1d565b505050505050505b5061285b9050898b612a58565b61288b576001600160a01b038b16600090815260038d01602052899060409020815181612886612e1d565b505050505b6128ac8b6128998b89611d49565b6128a28c612a35565b8a8963ffffffff16565b505050505050505050505050565b6000828211156128d2576000806128cf612bda565b50505b50900390565b60008183106128e757816128e9565b825b9392505050565b6000826128ff5750600061169e565b8282028284828161290c57fe5b04146128e95760008061291d612bda565b50509392505050565b6000828201838110156128e95760008061291d612bda565b600080821161295557600080612952612bda565b50505b81838161295e57fe5b049392505050565b6001600160a01b0382166000908152600160205260408120612986612c45565b905081811461169e576001600160a01b0383166000908152600160205282906040902081906129b3612e1d565b5050506129c881611e89846000611ede612c45565b8060006129d3612e1d565b50505092915050565b611deb87878786156129ee57886129f6565b6129f6611df4565b88888888612609565b60606108fc8260405160200180826001600160a01b031660601b8152601401915050604051602081830303815290604052612a66565b600081511592915050565b6000600160301b8210611d4557600080611d42612bda565b600081518351149392505050565b60608082516002026002016001600160401b0381118015612a8f57600080612a8c612bda565b50505b50604051818152601f19601f8301168101602001604052908015612aba576020820181803683370190505b509050600360fc1b81600081518110612acf57fe5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612af857fe5b60200101906001600160f81b031916908160001a905350600260005b8451811015612bd15760006004868381518110612b2d57fe5b602001015160f81c901c60ff1690506000868381518110612b4a57fe5b602001015160f81c600f169050600a8204602702826030010160f81b858580600101965081518110612b7857fe5b60200101906001600160f81b031916908160001a905350600a8104602702816030010160f81b858580600101965081518110612bb057fe5b60200101906001600160f81b031916908160001a9053505050600101612b14565b50909392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015612c12578086015182820160400152602001612bf7565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561156557600082820152602001612c89565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612c89565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612c89565b6385979f76598160e01b8152612d63565b808083111561169e575090919050565b808083101561169e575090919050565b836004820152846024820152606060448201528760648201526084810160005b89811015612d9b578089015182820152602001612d83565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af15059612df08e3d612d53565b8d01612dfc8187612d43565b5b82811015612e115760008152602001612dfd565b50929d50505050505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020612c89565b604051602081016040526000815290565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612c89565b638540661f598160e01b8152836004820152846024820152606060448201528660648201526084810160005b88811015612f06578088015182820152602001612eee565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059612f5b8d3d612d53565b8c01612f678187612d43565b5b82811015612f7c5760008152602001612f68565b50929c50505050505050565b604051606081016040908152600080835260208301819052908201529056fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001957600080610016612bda565b50505b50600436106102235760003560e01c8063117036d11461023157806314fd235a14610272578063151359b41461029a578063172886e7146102a257806317901de3146102e757806318160ddd1461032d57806322abd7b21461033557806322f3e2d41461033d57806323662bb91461035957806327a27433146103615780633b90b9bf146103965780633eed75c3146103c55780634187b7d6146103cd57806341d1de97146103f1578063544caa5614610417578063545e7c61146104725780635a6c72d0146104a95780635b16ebb7146104b15780635c975abb146104e0578063607c219f146104e8578063612a9f7614610517578063709893301461051f57806370a0823114610527578063715018a614610556578063865e45731461055e5780638d4241271461058d5780638da5cb5b14610595578063901754d71461059d5780639725ff35146105d457806399fca7d9146105fa578063a42dce8014610629578063ad33334814610658578063b0cb4b0a14610755578063b8ffca321461075d578063c415b95c14610765578063cf0b22701461076d578063d88ff1f414610775578063d8f4e0eb146107d0578063e7a7b5a0146107f6578063e859e56c146107fe578063e9f7e17b14610806578063edb7a6fa1461082c578063f2fde38b1461084c578063f38303351461087b578063fb20b7d014610883578063fc0e74d1146108b2575b60008061022e612bda565b50505b610260600480360360208110156102505760008061024d612bda565b50505b50356001600160a01b03166108ba565b60405190815260200160405180910390f35b610298600480360360208110156102915760008061028e612bda565b50505b5035610904565b005b6102986109a0565b6102aa610a17565b60405180858152602001848152602001836001600160a01b03168152602001826001600160a01b0316815260200194505050505060405180910390f35b6102ef610af8565b60405180846001600160681b03168152602001836001600160681b031681526020018265ffffffffffff168152602001935050505060405180910390f35b610260610b5d565b6102ef610b6d565b610345610bb8565b604051901515815260200160405180910390f35b610260610bc8565b610298600480360360408110156103805760008061037d612bda565b50505b506001600160a01b038135169060200135610be6565b610345600480360360208110156103b5576000806103b2612bda565b50505b50356001600160a01b0316610c43565b610298610c6a565b6103d5610ce6565b6040516001600160a01b03909116815260200160405180910390f35b6103d5600480360360208110156104105760008061040d612bda565b50505b5035610d0a565b61044e6004803603604081101561043657600080610433612bda565b50505b506001600160a01b0381358116916020013516610d47565b6040516001600160a01b039283168152911660208201526040908101905180910390f35b6103d5600480360360408110156104915760008061048e612bda565b50505b506001600160a01b0381358116916020013516610d7b565b61026061133d565b610345600480360360208110156104d0576000806104cd612bda565b50505b50356001600160a01b031661135b565b610345611375565b6102986004803603602081101561050757600080610504612bda565b50505b50356001600160a01b0316611392565b61029861143a565b6103d5611493565b6102606004803603602081101561054657600080610543612bda565b50505b50356001600160a01b031661149f565b6102986114bf565b6102606004803603602081101561057d5760008061057a612bda565b50505b50356001600160a01b031661156a565b61029861159b565b6103d5611617565b6103d5600480360360408110156105bc576000806105b9612bda565b50505b506001600160a01b0381358116916020013516611639565b610298600480360360208110156105f3576000806105f0612bda565b50505b50356116a4565b6102606004803603602081101561061957600080610616612bda565b50505b50356001600160a01b0316611739565b6102986004803603602081101561064857600080610645612bda565b50505b50356001600160a01b031661176a565b6102986004803603604081101561067757600080610674612bda565b50505b810190602081018135600160201b81111561069a57600080610697612bda565b50505b8201836020820111156106b5576000806106b2612bda565b50505b803590602001918460208302840111600160201b831117156106df576000806106dc612bda565b50505b919390929091602081019035600160201b81111561070557600080610702612bda565b50505b8201836020820111156107205760008061071d612bda565b50505b803590602001918460208302840111600160201b8311171561074a57600080610747612bda565b50505b509092509050611850565b6103d5611905565b6102ef611929565b6103d5611974565b6103d5611980565b61077d6119a4565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156107bc5780820151838201526020016107a4565b505050509050019250505060405180910390f35b610298600480360360208110156107ef576000806107ec612bda565b50505b5035611a2b565b6102ef611aa2565b610260611aed565b6102986004803603602081101561082557600080610822612bda565b50505b5035611b0b565b610834611b83565b60405191825260208201526040908101905180910390f35b6102986004803603602081101561086b57600080610868612bda565b50505b50356001600160a01b0316611bc6565b610260611c96565b610260600480360360208110156108a25760008061089f612bda565b50505b50356001600160a01b0316611cb4565b610298611ced565b6001600160a01b0381166000908152600e6020526108fc67016345785d8a000060408320604051602081016040529081816108f3612c45565b90525090611d49565b90505b919050565b67016345785d8a00008111156109225760008061091f612bda565b50505b61099d5a61092e612ca0565b601260005a61093b612ca0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181610970612c45565b90525061097c84611d66565b61098d5a610988612ca0565b61149f565b600f939291906000611d84611ddb565b50565b610a155a6109ac612ca0565b600660005a6109b9612ca0565b6001600160a01b03166001600160a01b03168152602001908152602001600020604051602081016040529081816109ee612c45565b9052506109f9611df4565b610a055a610988612ca0565b6003939291906000611e0f611ddb565b565b6000808080610a95600b604051606081016040529081600082610a38612c45565b6001600160681b036101009290920a9004168152602001600d82610a5a612c45565b6001600160681b036101009290920a9004168152602001601a82610a7c612c45565b65ffffffffffff6101009290920a900416905250611e66565b610ab1600f604051606081016040529081600082610a38612c45565b60006013610abd612c45565b906101000a90046001600160a01b03166014600090610ada612c45565b906101000a90046001600160a01b0316935093509350935090919293565b6000808080600b610b07612c45565b6001600160681b036101009290920a900416600d600b610b25612c45565b6001600160681b036101009290920a900416601a600b610b43612c45565b906101000a900465ffffffffffff16925092509250909192565b600080610b68612c45565b905090565b6000808080600f610b7c612c45565b6001600160681b036101009290920a900416600d600f610b9a612c45565b6001600160681b036101009290920a900416601a600f610b43612c45565b6000610bc2611375565b15905090565b6000610b686007604051606081016040529081600082610a38612c45565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165a610c19612ca0565b6001600160a01b031614610c3557600080610c32612bda565b50505b610c3f8282611ef2565b5050565b601560205280600052604060002060009150610c5d612c45565b906101000a900460ff1681565b610a155a610c76612ca0565b600e60005a610c83612ca0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181610cb8612c45565b905250610cc3611df4565b610ccf5a610988612ca0565b600b9392919067016345785d8a0000612034611ddb565b7f000000000000000000000000000000000000000000000000000000000000000081565b60168181610d16612c45565b8110610d1e57fe5b9060005260206000200160009150610d34612c45565b906101000a90046001600160a01b031681565b600080826001600160a01b0316846001600160a01b03161015610d6e575082905081610d74565b50819050825b9250929050565b6000816001600160a01b0316836001600160a01b03161415610da557600080610da2612bda565b50505b600080610db28585610d47565b6001600160a01b038216600090815260186020529193509150604081206001600160a01b038316600090815260209190915260409020600090610df3612c45565b906101000a90046001600160a01b03166001600160a01b031614610e1f57600080610e1c612bda565b50505b6060610e33836001600160a01b031661208b565b90506060610e49836001600160a01b031661208b565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b92440b085858585604051602001808075062d2dcc6d04098d2e2ead2c8d2e8f240a0deded840560531b81525060160183805190602001908083835b60208310610ed15780518252601f199092019160209182019101610eb2565b6001836020036101000a03801982511681845116179092525050602d60f81b93909101928352505060010182805190602001908083835b60208310610f275780518252601f199092019160209182019101610f08565b6001836020036101000a03801982511681845116179092525050602960f81b93909101928352505060010192506040915050516020818303038152906040528686604051602001808063314c502d60e01b81525060040183805190602001908083835b60208310610fa95780518252601f199092019160209182019101610f8a565b6001836020036101000a03801982511681845116179092525050602d60f81b93909101928352505060010182805190602001908083835b60208310610fff5780518252601f199092019160209182019101610fe0565b6001836020036101000a0380198251168184511617909252505050919091019350604092505050516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b031681526020018060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019080838360005b838110156110d15780820151838201526020016110b9565b50505050905090810190601f1680156110fe5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b8381101561113457808201518382015260200161111c565b50505050905090810190601f1680156111615780820380516001836020036101000a031916815260200191505b5097505050505050505060206040518083038160008780611180612ce6565b15801561119557600080611192612bda565b50505b505a61119f612d32565b5050505050501580156111bf573d6000803e3d60006111bc612bda565b50505b505050506040513d60208110156111de576000806111db612bda565b50505b8101908080516001600160a01b03881660009081526018602052909850889350604092509050206001600160a01b038516600090815260209190915260409020600181611229612c45565b816001600160a01b0302191690836001600160a01b031602179061124b612e1d565b505050601685908060018161125e612c45565b018082611269612e1d565b505060009283526000190191602091502001600181611286612c45565b816001600160a01b0302191690836001600160a01b03160217906112a8612e1d565b5050506001600160a01b03851660009081526017602052600190604090206001816112d1612c45565b8160ff021916908315150217906112e6612e1d565b505050826001600160a01b0316846001600160a01b0316866001600160a01b03167fc95935a66d15e0da5e412aca0ad27ae891d20b2fb91cf3994b6a3bf2b817808260405160405180910390a45050505092915050565b6000610b686003604051606081016040529081600082610a38612c45565b601760205280600052604060002060009150610c5d612c45565b600060146002611383612c45565b906101000a900460ff16905090565b61139a61251c565b6001600160a01b03166113ab611617565b6001600160a01b0316146113c7576000806113c4612bda565b50505b8060136001816113d5612c45565b816001600160a01b0302191690836001600160a01b03160217906113f7612e1d565b5050507fe348b7d1d8572de16c7301317890112a52bd7f6c3b713bd7d70e4cffb489ed9f816040516001600160a01b03909116815260200160405180910390a150565b610a155a611446612ca0565b601260005a611453612ca0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181611488612c45565b90525061097c611df4565b60006013610d34612c45565b6001600160a01b03811660009081526001602052604081206108fc612c45565b6114c761251c565b6001600160a01b03166114d8611617565b6001600160a01b0316146114f4576000806114f1612bda565b50505b6000806002611501612c45565b906101000a90046001600160a01b03166001600160a01b0316600080516020612fa883398151915260405160405180910390a360006002600181611543612c45565b816001600160a01b0302191690836001600160a01b0316021790611565612e1d565b505050565b6001600160a01b038116600090815260126020526108fc8160408120604051602081016040529081816108f3612c45565b610a155a6115a7612ca0565b600a60005a6115b4612ca0565b6001600160a01b03166001600160a01b03168152602001908152602001600020604051602081016040529081816115e9612c45565b9052506115f4611df4565b6116005a610988612ca0565b600793929190670de0b6b3a7640000612527611ddb565b6000806002611624612c45565b906101000a90046001600160a01b0316905090565b60008060006116488585610d47565b6001600160a01b038216600090815260186020529193509150604090206001600160a01b038216600090815260209190915260409020600090611689612c45565b906101000a90046001600160a01b0316925050505b92915050565b67016345785d8a00008111156116c2576000806116bf612bda565b50505b66b1a2bc2ec500008110156116df576000806116dc612bda565b50505b61099d5a6116eb612ca0565b600e60005a6116f8612ca0565b6001600160a01b03166001600160a01b031681526020019081526020016000206040516020810160405290818161172d612c45565b905250610cc384611d66565b6001600160a01b038116600090815260066020526108fc8160408120604051602081016040529081816108f3612c45565b61177261251c565b6001600160a01b0316611783611617565b6001600160a01b03161461179f5760008061179c612bda565b50505b8060146001816117ad612c45565b816001600160a01b0302191690836001600160a01b03160217906117cf612e1d565b5050506001600160a01b03811660009081526015602052600190604090206001816117f8612c45565b8160ff0219169083151502179061180d612e1d565b5050507ffa7dc4914c53d1cee4cf31f857b016d55f8c6d28d5f950e64c7258a4fa18de19816040516001600160a01b03909116815260200160405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165a611883612ca0565b6001600160a01b03161461189f5760008061189c612bda565b50505b8281146118b4576000806118b1612bda565b50505b60005b838110156118fe576118f68585838181106118ce57fe5b905060200201356001600160a01b03168484848181106118ea57fe5b90506020020135611ef2565b6001016118b7565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008080806007611938612c45565b6001600160681b036101009290920a900416600d6007611956612c45565b6001600160681b036101009290920a900416601a6007610b43612c45565b60006014610d34612c45565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606016806119b1612c45565b8060200260200160405190810160405281815291906020830182806119d4612c45565b8015611a2157602002820191906000526020600020905b6000826119f6612c45565b906101000a90046001600160a01b03166001600160a01b0316815260200190600101908083116119eb575b5050505050905090565b662386f26fc10000811115611a4857600080611a45612bda565b50505b61099d5a611a54612ca0565b600660005a611a61612ca0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181611a96612c45565b9052506109f984611d66565b60008080806003611ab1612c45565b6001600160681b036101009290920a900416600d6003611acf612c45565b6001600160681b036101009290920a900416601a6003610b43612c45565b6000610b68600b604051606081016040529081600082610a38612c45565b670de0b6b3a7640000811115611b2957600080611b26612bda565b50505b61099d5a611b35612ca0565b600a60005a611b42612ca0565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405160208101604052908181611b77612c45565b9052506115f484611d66565b600080611ba26003604051606081016040529081600082610a38612c45565b611bbe6007604051606081016040529081600082610a38612c45565b915091509091565b611bce61251c565b6001600160a01b0316611bdf611617565b6001600160a01b031614611bfb57600080611bf8612bda565b50505b6001600160a01b038116611c1757600080611c14612bda565b50505b6001600160a01b03811660006002611c2d612c45565b906101000a90046001600160a01b03166001600160a01b0316600080516020612fa883398151915260405160405180910390a3806002600181611c6e612c45565b816001600160a01b0302191690836001600160a01b0316021790611c90612e1d565b50505050565b6000610b68600f604051606081016040529081600082610a38612c45565b6001600160a01b0381166000908152600a6020526108fc670de0b6b3a764000060408320604051602081016040529081816108f3612c45565b611cf561251c565b6001600160a01b0316611d06611617565b6001600160a01b031614611d2257600080611d1f612bda565b50505b610a1561257e565b6000600160681b8210611d4557600080611d42612bda565b50505b5090565b60008083511115611d60576001835103905061169e565b50919050565b611d6e612e6b565b6040516020810160405260019290920182525090565b836001600160a01b03167f02540a8a88261967ef1c1a4ed50fde9f0a0a493922c069129e21961198e1b43984848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b611deb8787878787888888612609565b50505050505050565b611dfc612e6b565b6040516020810160405260008152905090565b836001600160a01b03167f28eed64d01e23014333abef902958309592b3cf9ce9da390f224467cfcaaf5b284848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b600080611e9462015180611e8f856040015165ffffffffffff165a611e89612e7c565b906128ba565b6128d8565b90506000611ea562015180836128ba565b9050611eea62015180611ee4611ec98588602001516001600160681b0316906128f0565b611ede8589516001600160681b0316906128f0565b90612926565b9061293e565b949350505050565b6000611efe8383612966565b905080821415611f0e5750610c3f565b6001600160a01b03831660009081526006602052611f549084906040902060405160208101604052908181611f41612c45565b9052506003919084866000611e0f6129dc565b6001600160a01b0383166000908152600a602052611fa19084906040902060405160208101604052908181611f87612c45565b905250600791908486670de0b6b3a76400006125276129dc565b6001600160a01b0383166000908152600e602052611fee9084906040902060405160208101604052908181611fd4612c45565b905250600b9190848667016345785d8a00006120346129dc565b6001600160a01b038316600090815260126020526115659084906040902060405160208101604052908181612021612c45565b905250600f919084866000611d846129dc565b836001600160a01b03167ffa67c3ef5d30b2838a61d783cb71a076e17984d05840f2dfa1521135df49557b84848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b60606001600160a01b0382166120a9576000806120a6612bda565b50505b60006060836001600160a01b0316614e20604051602401604051601f198183030181526040919091526395d89b4160e01b6020820180516001600160e01b031690911790526040518082805190602001908083835b6020831061211d5780518252601f1990920191602091820191016120fe565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303818686612155612ec2565b5050505050925050503d806000811461218a576040513d603f01601f191681016040523d815291503d6000602084013e61218f565b606091505b50915091508161228257836001600160a01b0316614e20604051602401604051601f19818303018152604091909152631eedf1af60e31b6020820180516001600160e01b031690911790526040518082805190602001908083835b602083106122095780518252601f1990920191602091820191016121ea565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303818686612241612ec2565b5050505050925050503d8060008114612276576040513d603f01601f191681016040523d815291503d6000602084013e61227b565b606091505b5090925090505b81801561229157506060815110155b156123e45760008060208301835160408110156122b6576000806122b3612bda565b50505b8101908080519291906020018051939550929350505060208314905080156122de5750600081115b80156122ec57506101008111155b156123e157602083018351602081101561230e5760008061230b612bda565b50505b8101908080516040519392919084600160201b82111561233657600080612333612bda565b50505b90830190602082018581111561235457600080612351612bda565b50505b8251600160201b81118282018810171561237657600080612373612bda565b50505b825250602001908051906020019080838360005b838110156123a257808201518382015260200161238a565b50505050905090810190601f1680156123cf5780820380516001836020036101000a031916815260200191505b506040525050509450505050506108ff565b50505b8180156123f2575080516020145b156125135760005b8151811080156124285750600160fd1b82828151811061241657fe5b60200101516001600160f81b03191610155b80156124525750603f60f91b82828151811061244057fe5b60200101516001600160f81b03191611155b1561245f576001016123fa565b8015612511576060816001600160401b038111801561248657600080612483612bda565b50505b50604051818152601f19601f83011681016020016040529080156124b1576020820181803683370190505b50905060005b82811015612505578381815181106124cb57fe5b60200101516001600160f81b0319168282815181106124e657fe5b60200101906001600160f81b031916908160001a9053506001016124b7565b5093506108ff92505050565b505b611eea846129ff565b60005a610b68612ca0565b836001600160a01b03167f214419d1bacc9564ca0fcf6552dad3ec0aa54c97de900de89dc202e6bbd9198a84848460405192835290151560208301526040808301919091526060909101905180910390a250505050565b612586611375565b1561259957600080612596612bda565b50505b60016002600160a01b816125ab612c45565b8160ff021916908315150217906125c0612e1d565b5050507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125ec61251c565b6040516001600160a01b03909116815260200160405180910390a1565b600088600101612617612c45565b905080600060028b01612628612c45565b9050806126348a612a35565b6126655761265661264f6126488c89611d49565b8a906128f0565b84906128ba565b925061266281896128ba565b90505b61266e89612a35565b61269f576126906126896126828b89611d49565b89906128f0565b8490612926565b925061269c8188612926565b90505b8383146126b857828060018e016126b4612e1d565b5050505b8181146126d157808060028e016126cd612e1d565b5050505b600081156126e8576126e3848361293e565b6126ea565b865b90506126f4612f88565b8d60405160608101604052908160008261270c612c45565b6001600160681b036101009290920a9004168152602001600d8261272e612c45565b6001600160681b036101009290920a9004168152602001601a82612750612c45565b65ffffffffffff6101009290920a900416905250905060208101516001600160681b0316821461284e578d61278c61278783611e66565b611d2a565b61279584611d2a565b6127a65a6127a1612e7c565b612a40565b83600081600d8482600160d01b816127bc612c45565b8165ffffffffffff021916908365ffffffffffff160217906127dc612e1d565b5050508591906101000a816127ef612c45565b816001600160681b0302191690836001600160681b0316021790612811612e1d565b5050508491906101000a81612824612c45565b816001600160681b0302191690836001600160681b0316021790612846612e1d565b505050505050505b5061285b9050898b612a58565b61288b576001600160a01b038b16600090815260038d01602052899060409020815181612886612e1d565b505050505b6128ac8b6128998b89611d49565b6128a28c612a35565b8a8963ffffffff16565b505050505050505050505050565b6000828211156128d2576000806128cf612bda565b50505b50900390565b60008183106128e757816128e9565b825b9392505050565b6000826128ff5750600061169e565b8282028284828161290c57fe5b04146128e95760008061291d612bda565b50509392505050565b6000828201838110156128e95760008061291d612bda565b600080821161295557600080612952612bda565b50505b81838161295e57fe5b049392505050565b6001600160a01b0382166000908152600160205260408120612986612c45565b905081811461169e576001600160a01b0383166000908152600160205282906040902081906129b3612e1d565b5050506129c881611e89846000611ede612c45565b8060006129d3612e1d565b50505092915050565b611deb87878786156129ee57886129f6565b6129f6611df4565b88888888612609565b60606108fc8260405160200180826001600160a01b031660601b8152601401915050604051602081830303815290604052612a66565b600081511592915050565b6000600160301b8210611d4557600080611d42612bda565b600081518351149392505050565b60608082516002026002016001600160401b0381118015612a8f57600080612a8c612bda565b50505b50604051818152601f19601f8301168101602001604052908015612aba576020820181803683370190505b509050600360fc1b81600081518110612acf57fe5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612af857fe5b60200101906001600160f81b031916908160001a905350600260005b8451811015612bd15760006004868381518110612b2d57fe5b602001015160f81c901c60ff1690506000868381518110612b4a57fe5b602001015160f81c600f169050600a8204602702826030010160f81b858580600101965081518110612b7857fe5b60200101906001600160f81b031916908160001a905350600a8104602702816030010160f81b858580600101965081518110612bb057fe5b60200101906001600160f81b031916908160001a9053505050600101612b14565b50909392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015612c12578086015182820160400152602001612bf7565b506020828760640184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52505050565b6303daa959598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c528051935060005b604081101561156557600082820152602001612c89565b6373509064598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020612c89565b638435035b598160e01b8152836004820152602081602483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020612c89565b6385979f76598160e01b8152612d63565b808083111561169e575090919050565b808083101561169e575090919050565b836004820152846024820152606060448201528760648201526084810160005b89811015612d9b578089015182820152602001612d83565b506060828a60a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8c8c82606087013350600060045af15059612df08e3d612d53565b8d01612dfc8187612d43565b5b82811015612e115760008152602001612dfd565b50929d50505050505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52600081526020612c89565b604051602081016040526000815290565b63bdbf8c36598160e01b8152602081600483336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c5280516000825293506020612c89565b638540661f598160e01b8152836004820152846024820152606060448201528660648201526084810160005b88811015612f06578088015182820152602001612eee565b506060828960a40184336000905af158601d01573d60011458600c01573d6000803e3d621234565260ea61109c52815160408301513d6000853e8b8b82606087013350600060045af15059612f5b8d3d612d53565b8c01612f678187612d43565b5b82811015612f7c5760008152602001612f68565b50929c50505050505050565b604051606081016040908152600080835260208301819052908201529056fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8884,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8888,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1159,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_paused",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4403,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_defaultFee",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)6807_storage"
      },
      {
        "astId": 4405,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_defaultSlippageFee",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Data)6807_storage"
      },
      {
        "astId": 4407,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_referralShare",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Data)6807_storage"
      },
      {
        "astId": 4409,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_governanceShare",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Data)6807_storage"
      },
      {
        "astId": 4412,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "governanceWallet",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 4415,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "feeCollector",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 4420,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "isFeeCollector",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2913,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_contract(Mooniswap)2844)dyn_storage"
      },
      {
        "astId": 2918,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "isPool",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_contract(Mooniswap)2844,t_bool)"
      },
      {
        "astId": 2924,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_pools",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_contract(IERC20)1118,t_mapping(t_contract(IERC20)1118,t_contract(Mooniswap)2844))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Mooniswap)2844)dyn_storage": {
        "base": "t_contract(Mooniswap)2844",
        "encoding": "dynamic_array",
        "label": "contract Mooniswap[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1118": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Mooniswap)2844": {
        "encoding": "inplace",
        "label": "contract Mooniswap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Data)8391_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vote.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)8391_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1118,t_contract(Mooniswap)2844)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => contract Mooniswap)",
        "numberOfBytes": "32",
        "value": "t_contract(Mooniswap)2844"
      },
      "t_mapping(t_contract(IERC20)1118,t_mapping(t_contract(IERC20)1118,t_contract(Mooniswap)2844))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => contract Mooniswap))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1118,t_contract(Mooniswap)2844)"
      },
      "t_mapping(t_contract(Mooniswap)2844,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(Mooniswap)2844",
        "label": "mapping(contract Mooniswap => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Data)6807_storage": {
        "encoding": "inplace",
        "label": "struct ExplicitLiquidVoting.Data",
        "members": [
          {
            "astId": 6798,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Data)8335_storage"
          },
          {
            "astId": 6800,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "_weightedSum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6802,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "_votedSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6806,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "votes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Data)8391_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Data)8335_storage": {
        "encoding": "inplace",
        "label": "struct VirtualVote.Data",
        "members": [
          {
            "astId": 8330,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "oldResult",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 8332,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "result",
            "offset": 13,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 8334,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "time",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)8391_storage": {
        "encoding": "inplace",
        "label": "struct Vote.Data",
        "members": [
          {
            "astId": 8390,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}