{
  "address": "0xCB06dF7F0Be5B8Bb261d294Cf87C794EB9Da85b1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "_mooniswap",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_gift",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decayPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DecayPeriodVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "DurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "gift",
          "type": "address"
        }
      ],
      "name": "NewGift",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardDistribution",
          "type": "address"
        }
      ],
      "name": "RewardDistributionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SlippageFeeVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "gift",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardDistribution",
          "type": "address"
        }
      ],
      "name": "addGift",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "decayPeriodVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "decayPeriodVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardDecayPeriodVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardSlippageFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "feeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "feeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mooniswap",
      "outputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mooniswapFactoryGovernance",
      "outputs": [
        {
          "internalType": "contract IMooniswapFactoryGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        }
      ],
      "name": "setRewardDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "slippageFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "slippageFeeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenRewards",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "gift",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardDistribution",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "periodFinish",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerTokenStored",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33e277921f7cfd9d97d3422bc9728a7e4a32b5c92e63888c1a72d5f1a0875818",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xCB06dF7F0Be5B8Bb261d294Cf87C794EB9Da85b1",
    "transactionIndex": 64,
    "gasUsed": "3119553",
    "logsBloom": "0x
    "blockHash": "0x29289d2f710e57980b0f897d7a615e8cf5b5a2ad9417a74210d1904ce5a0fde1",
    "transactionHash": "0x33e277921f7cfd9d97d3422bc9728a7e4a32b5c92e63888c1a72d5f1a0875818",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 5908169,
        "transactionHash": "0x33e277921f7cfd9d97d3422bc9728a7e4a32b5c92e63888c1a72d5f1a0875818",
        "address": "0xCB06dF7F0Be5B8Bb261d294Cf87C794EB9Da85b1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 192,
        "blockHash": "0x29289d2f710e57980b0f897d7a615e8cf5b5a2ad9417a74210d1904ce5a0fde1"
      },
      {
        "transactionIndex": 64,
        "blockNumber": 5908169,
        "transactionHash": "0x33e277921f7cfd9d97d3422bc9728a7e4a32b5c92e63888c1a72d5f1a0875818",
        "address": "0xCB06dF7F0Be5B8Bb261d294Cf87C794EB9Da85b1",
        "topics": [
          "0x64cc71b17412354fc7654b3a032c59b8aacbcc955fa02aecfec3be41d7350f24",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000111111111117dc0aa78b770fa6a738034120c302",
        "logIndex": 193,
        "blockHash": "0x29289d2f710e57980b0f897d7a615e8cf5b5a2ad9417a74210d1904ce5a0fde1"
      },
      {
        "transactionIndex": 64,
        "blockNumber": 5908169,
        "transactionHash": "0x33e277921f7cfd9d97d3422bc9728a7e4a32b5c92e63888c1a72d5f1a0875818",
        "address": "0xCB06dF7F0Be5B8Bb261d294Cf87C794EB9Da85b1",
        "topics": [
          "0xf899c6d536e6cda78c5f4dce43ca0e8c47167deb2875ea8b777f21cc85899b1f",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000024ea00",
        "logIndex": 194,
        "blockHash": "0x29289d2f710e57980b0f897d7a615e8cf5b5a2ad9417a74210d1904ce5a0fde1"
      },
      {
        "transactionIndex": 64,
        "blockNumber": 5908169,
        "transactionHash": "0x33e277921f7cfd9d97d3422bc9728a7e4a32b5c92e63888c1a72d5f1a0875818",
        "address": "0xCB06dF7F0Be5B8Bb261d294Cf87C794EB9Da85b1",
        "topics": [
          "0x68898541a3500520160dc4a025aaabdb318ec2d614c236a5fb88f523d76a8d8a",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000006c2b100edf5d8474e3a3d458ae693f24b37d1ef3",
        "logIndex": 195,
        "blockHash": "0x29289d2f710e57980b0f897d7a615e8cf5b5a2ad9417a74210d1904ce5a0fde1"
      }
    ],
    "blockNumber": 5908169,
    "cumulativeGasUsed": "11536623",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe3f6509818ccf031370bB4cb398EB37C21622ac4",
    "0x111111111117dC0aa78b770fA6A738034120C302",
    2419200,
    "0x6C2B100edf5d8474E3A3D458Ae693F24B37D1EF3"
  ],
  "solcInputHash": "e95033e02b0d505c0e5586edfed0ec1d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"_mooniswap\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_gift\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decayPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecayPeriodVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"DurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"gift\",\"type\":\"address\"}],\"name\":\"NewGift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardDistribution\",\"type\":\"address\"}],\"name\":\"RewardDistributionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SlippageFeeVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"gift\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardDistribution\",\"type\":\"address\"}],\"name\":\"addGift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"decayPeriodVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"decayPeriodVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardDecayPeriodVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardSlippageFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"feeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"feeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooniswap\",\"outputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooniswapFactoryGovernance\",\"outputs\":[{\"internalType\":\"contract IMooniswapFactoryGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"slippageFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"slippageFeeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenRewards\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"gift\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardDistribution\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/inch/farming/FarmingRewards.sol\":\"FarmingRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Mooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/UniERC20.sol\\\";\\nimport \\\"./libraries/Sqrt.sol\\\";\\nimport \\\"./libraries/VirtualBalance.sol\\\";\\nimport \\\"./governance/MooniswapGovernance.sol\\\";\\n\\n\\ncontract Mooniswap is MooniswapGovernance {\\n    using Sqrt for uint256;\\n    using SafeMath for uint256;\\n    using UniERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    struct Balances {\\n        uint256 src;\\n        uint256 dst;\\n    }\\n\\n    struct SwapVolumes {\\n        uint128 confirmed;\\n        uint128 result;\\n    }\\n\\n    struct Fees {\\n        uint256 fee;\\n        uint256 slippageFee;\\n    }\\n\\n    event Error(string reason);\\n\\n    event Deposited(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Withdrawn(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Swapped(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed srcToken,\\n        address dstToken,\\n        uint256 amount,\\n        uint256 result,\\n        uint256 srcAdditionBalance,\\n        uint256 dstRemovalBalance,\\n        address referral\\n    );\\n\\n    event Sync(\\n        uint256 srcBalance,\\n        uint256 dstBalance,\\n        uint256 fee,\\n        uint256 slippageFee,\\n        uint256 referralShare,\\n        uint256 governanceShare\\n    );\\n\\n    uint256 private constant _BASE_SUPPLY = 1000;  // Total supply on first deposit\\n\\n    IERC20 public immutable token0;\\n    IERC20 public immutable token1;\\n    mapping(IERC20 => SwapVolumes) public volumes;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForAddition;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForRemoval;\\n\\n    modifier whenNotShutdown {\\n        require(mooniswapFactoryGovernance.isActive(), \\\"Mooniswap: factory shutdown\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        string memory name,\\n        string memory symbol,\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance\\n    )\\n        public\\n        ERC20(name, symbol)\\n        MooniswapGovernance(_mooniswapFactoryGovernance)\\n    {\\n        require(bytes(name).length > 0, \\\"Mooniswap: name is empty\\\");\\n        require(bytes(symbol).length > 0, \\\"Mooniswap: symbol is empty\\\");\\n        require(_token0 != _token1, \\\"Mooniswap: duplicate tokens\\\");\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function getTokens() external view returns(IERC20[] memory tokens) {\\n        tokens = new IERC20[](2);\\n        tokens[0] = token0;\\n        tokens[1] = token1;\\n    }\\n\\n    function tokens(uint256 i) external view returns(IERC20) {\\n        if (i == 0) {\\n            return token0;\\n        } else if (i == 1) {\\n            return token1;\\n        } else {\\n            revert(\\\"Pool has two tokens\\\");\\n        }\\n    }\\n\\n    function getBalanceForAddition(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.uniBalanceOf(address(this));\\n        return Math.max(virtualBalancesForAddition[token].current(decayPeriod(), balance), balance);\\n    }\\n\\n    function getBalanceForRemoval(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.uniBalanceOf(address(this));\\n        return Math.min(virtualBalancesForRemoval[token].current(decayPeriod(), balance), balance);\\n    }\\n\\n    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256) {\\n        return _getReturn(src, dst, amount, getBalanceForAddition(src), getBalanceForRemoval(dst), fee(), slippageFee());\\n    }\\n\\n    function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts) external payable returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        return depositFor(maxAmounts, minAmounts, msg.sender);\\n    }\\n\\n    function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target) public payable nonReentrant returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n        require(msg.value == (_tokens[0].isETH() ? maxAmounts[0] : (_tokens[1].isETH() ? maxAmounts[1] : 0)), \\\"Mooniswap: wrong value usage\\\");\\n\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalSupply == 0) {\\n            fairSupply = _BASE_SUPPLY.mul(99);\\n            _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.max(fairSupply, maxAmounts[i]);\\n\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                require(maxAmounts[i] >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].uniTransferFrom(msg.sender, address(this), maxAmounts[i]);\\n                receivedAmounts[i] = maxAmounts[i];\\n            }\\n        }\\n        else {\\n            uint256[2] memory realBalances;\\n            for (uint i = 0; i < realBalances.length; i++) {\\n                realBalances[i] = _tokens[i].uniBalanceOf(address(this)).sub(_tokens[i].isETH() ? msg.value : 0);\\n            }\\n\\n            // Pre-compute fair supply\\n            fairSupply = type(uint256).max;\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 fairSupplyCached = fairSupply;\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\n                require(amount >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].uniTransferFrom(msg.sender, address(this), amount);\\n                receivedAmounts[i] = _tokens[i].uniBalanceOf(address(this)).sub(realBalances[i]);\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 _decayPeriod = decayPeriod();  // gas savings\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                virtualBalancesForRemoval[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n                virtualBalancesForAddition[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n            }\\n        }\\n\\n        require(fairSupply > 0, \\\"Mooniswap: result is not enough\\\");\\n        _mint(target, fairSupply);\\n\\n        emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\n    }\\n\\n    function withdraw(uint256 amount, uint256[] memory minReturns) external returns(uint256[2] memory withdrawnAmounts) {\\n        return withdrawFor(amount, minReturns, msg.sender);\\n    }\\n\\n    function withdrawFor(uint256 amount, uint256[] memory minReturns, address payable target) public nonReentrant returns(uint256[2] memory withdrawnAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n        uint256 _decayPeriod = decayPeriod();  // gas savings\\n        _burn(msg.sender, amount);\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            IERC20 token = _tokens[i];\\n\\n            uint256 preBalance = token.uniBalanceOf(address(this));\\n            uint256 value = preBalance.mul(amount).div(totalSupply);\\n            token.uniTransfer(target, value);\\n            withdrawnAmounts[i] = value;\\n            require(i >= minReturns.length || value >= minReturns[i], \\\"Mooniswap: result is not enough\\\");\\n\\n            virtualBalancesForAddition[token].scale(_decayPeriod, preBalance, totalSupply.sub(amount), totalSupply);\\n            virtualBalancesForRemoval[token].scale(_decayPeriod, preBalance, totalSupply.sub(amount), totalSupply);\\n        }\\n\\n        emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\n    }\\n\\n    function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral) external payable returns(uint256 result) {\\n        return swapFor(src, dst, amount, minReturn, referral, msg.sender);\\n    }\\n\\n    function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address payable receiver) public payable nonReentrant whenNotShutdown returns(uint256 result) {\\n        require(msg.value == (src.isETH() ? amount : 0), \\\"Mooniswap: wrong value usage\\\");\\n\\n        Balances memory balances = Balances({\\n            src: src.uniBalanceOf(address(this)).sub(src.isETH() ? msg.value : 0),\\n            dst: dst.uniBalanceOf(address(this))\\n        });\\n        uint256 confirmed;\\n        Balances memory virtualBalances;\\n        Fees memory fees = Fees({\\n            fee: fee(),\\n            slippageFee: slippageFee()\\n        });\\n        (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\n        emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\n        _mintRewards(confirmed, result, referral, balances, fees);\\n\\n        // Overflow of uint128 is desired\\n        volumes[src].confirmed += uint128(confirmed);\\n        volumes[src].result += uint128(result);\\n    }\\n\\n    function _doTransfers(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address payable receiver, Balances memory balances, Fees memory fees)\\n        private returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\n    {\\n        uint256 _decayPeriod = decayPeriod();\\n        virtualBalances.src = virtualBalancesForAddition[src].current(_decayPeriod, balances.src);\\n        virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\n        virtualBalances.dst = virtualBalancesForRemoval[dst].current(_decayPeriod, balances.dst);\\n        virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\n        src.uniTransferFrom(msg.sender, address(this), amount);\\n        confirmed = src.uniBalanceOf(address(this)).sub(balances.src);\\n        result = _getReturn(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\n        require(result > 0 && result >= minReturn, \\\"Mooniswap: return is not enough\\\");\\n        dst.uniTransfer(receiver, result);\\n\\n        // Update virtual balances to the same direction only at imbalanced state\\n        if (virtualBalances.src != balances.src) {\\n            virtualBalancesForAddition[src].set(virtualBalances.src.add(confirmed));\\n        }\\n        if (virtualBalances.dst != balances.dst) {\\n            virtualBalancesForRemoval[dst].set(virtualBalances.dst.sub(result));\\n        }\\n        // Update virtual balances to the opposite direction\\n        virtualBalancesForRemoval[src].update(_decayPeriod, balances.src);\\n        virtualBalancesForAddition[dst].update(_decayPeriod, balances.dst);\\n    }\\n\\n    function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees) private {\\n        (uint256 referralShare, uint256 governanceShare, address govWallet, address feeCollector) = mooniswapFactoryGovernance.shareParameters();\\n\\n        uint256 refReward;\\n        uint256 govReward;\\n\\n        uint256 invariantRatio = uint256(1e36);\\n        invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\n        invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\n        if (invariantRatio > 1e36) {\\n            // calculate share only if invariant increased\\n            invariantRatio = invariantRatio.sqrt();\\n            uint256 invIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\n\\n            refReward = (referral != address(0)) ? invIncrease.mul(referralShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n            govReward = (govWallet != address(0)) ? invIncrease.mul(governanceShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n\\n            if (feeCollector == address(0)) {\\n                if (refReward > 0) {\\n                    _mint(referral, refReward);\\n                }\\n                if (govReward > 0) {\\n                    _mint(govWallet, govReward);\\n                }\\n            }\\n            else if (refReward > 0 || govReward > 0) {\\n                uint256 len = (refReward > 0 ? 1 : 0) + (govReward > 0 ? 1 : 0);\\n                address[] memory wallets = new address[](len);\\n                uint256[] memory rewards = new uint256[](len);\\n\\n                wallets[0] = referral;\\n                rewards[0] = refReward;\\n                if (govReward > 0) {\\n                    wallets[len - 1] = govWallet;\\n                    rewards[len - 1] = govReward;\\n                }\\n\\n                try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\n                    _mint(feeCollector, refReward.add(govReward));\\n                }\\n                catch {\\n                    emit Error(\\\"updateRewards() failed\\\");\\n                }\\n            }\\n        }\\n\\n        emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, refReward, govReward);\\n    }\\n\\n    /*\\n        spot_ret = dx * y / x\\n        uni_ret = dx * y / (x + dx)\\n        slippage = (spot_ret - uni_ret) / spot_ret\\n        slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\n        slippage = dx / (x + dx)\\n        ret = uni_ret * (1 - slip_fee * slippage)\\n        ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\n        ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\n\\n        x = amount * denominator\\n        dx = amount * (denominator - fee)\\n    */\\n    function _getReturn(IERC20 src, IERC20 dst, uint256 amount, uint256 srcBalance, uint256 dstBalance, uint256 fee, uint256 slippageFee) internal view returns(uint256) {\\n        if (src > dst) {\\n            (src, dst) = (dst, src);\\n        }\\n        if (amount > 0 && src == token0 && dst == token1) {\\n            uint256 taxedAmount = amount.sub(amount.mul(fee).div(MooniswapConstants._FEE_DENOMINATOR));\\n            uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\n            uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\n            uint256 feeNumerator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\n            uint256 feeDenominator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\n            return ret.mul(feeNumerator).div(feeDenominator);\\n        }\\n    }\\n\\n    function rescueFunds(IERC20 token, uint256 amount) external nonReentrant onlyOwner {\\n        uint256 balance0 = token0.uniBalanceOf(address(this));\\n        uint256 balance1 = token1.uniBalanceOf(address(this));\\n\\n        token.uniTransfer(msg.sender, amount);\\n\\n        require(token0.uniBalanceOf(address(this)) >= balance0, \\\"Mooniswap: access denied\\\");\\n        require(token1.uniBalanceOf(address(this)) >= balance1, \\\"Mooniswap: access denied\\\");\\n        require(balanceOf(address(this)) >= _BASE_SUPPLY, \\\"Mooniswap: access denied\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf4dfdd316f05e3a1519432a0fb8a4189674eb41928e979fd70189f8337262cc2\",\"license\":\"MIT\"},\"contracts/governance/MooniswapGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactoryGovernance.sol\\\";\\nimport \\\"../libraries/LiquidVoting.sol\\\";\\nimport \\\"../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\n\\n\\nabstract contract MooniswapGovernance is ERC20, Ownable, ReentrancyGuard {\\n    using Vote for Vote.Data;\\n    using LiquidVoting for LiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeCast for uint256;\\n\\n    event FeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n    event SlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n    event DecayPeriodVoteUpdate(address indexed user, uint256 decayPeriod, bool isDefault, uint256 amount);\\n\\n    IMooniswapFactoryGovernance public mooniswapFactoryGovernance;\\n    LiquidVoting.Data private _fee;\\n    LiquidVoting.Data private _slippageFee;\\n    LiquidVoting.Data private _decayPeriod;\\n\\n    constructor(IMooniswapFactoryGovernance _mooniswapFactoryGovernance) internal {\\n        mooniswapFactoryGovernance = _mooniswapFactoryGovernance;\\n        _fee.data.result = _mooniswapFactoryGovernance.defaultFee().toUint104();\\n        _slippageFee.data.result = _mooniswapFactoryGovernance.defaultSlippageFee().toUint104();\\n        _decayPeriod.data.result = _mooniswapFactoryGovernance.defaultDecayPeriod().toUint104();\\n    }\\n\\n    function setMooniswapFactoryGovernance(IMooniswapFactoryGovernance newMooniswapFactoryGovernance) external onlyOwner {\\n        mooniswapFactoryGovernance = newMooniswapFactoryGovernance;\\n        this.discardFeeVote();\\n        this.discardSlippageFeeVote();\\n        this.discardDecayPeriodVote();\\n    }\\n\\n    function fee() public view returns(uint256) {\\n        return _fee.data.current();\\n    }\\n\\n    function slippageFee() public view returns(uint256) {\\n        return _slippageFee.data.current();\\n    }\\n\\n    function decayPeriod() public view returns(uint256) {\\n        return _decayPeriod.data.current();\\n    }\\n\\n    function virtualFee() external view returns(uint104, uint104, uint48) {\\n        return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\n    }\\n\\n    function virtualSlippageFee() external view returns(uint104, uint104, uint48) {\\n        return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\n    }\\n\\n    function virtualDecayPeriod() external view returns(uint104, uint104, uint48) {\\n        return (_decayPeriod.data.oldResult, _decayPeriod.data.result, _decayPeriod.data.time);\\n    }\\n\\n    function feeVotes(address user) external view returns(uint256) {\\n        return _fee.votes[user].get(mooniswapFactoryGovernance.defaultFee);\\n    }\\n\\n    function slippageFeeVotes(address user) external view returns(uint256) {\\n        return _slippageFee.votes[user].get(mooniswapFactoryGovernance.defaultSlippageFee);\\n    }\\n\\n    function decayPeriodVotes(address user) external view returns(uint256) {\\n        return _decayPeriod.votes[user].get(mooniswapFactoryGovernance.defaultDecayPeriod);\\n    }\\n\\n    function feeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function slippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function decayPeriodVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_DECAY_PERIOD, \\\"Decay period vote is too high\\\");\\n        require(vote >= MooniswapConstants._MIN_DECAY_PERIOD, \\\"Decay period vote is too low\\\");\\n\\n        _decayPeriod.updateVote(msg.sender, _decayPeriod.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultDecayPeriod(), _emitDecayPeriodVoteUpdate);\\n    }\\n\\n    function discardFeeVote() external {\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function discardSlippageFeeVote() external {\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function discardDecayPeriodVote() external {\\n        _decayPeriod.updateVote(msg.sender, _decayPeriod.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultDecayPeriod(), _emitDecayPeriodVoteUpdate);\\n    }\\n\\n    function _emitFeeVoteUpdate(address account, uint256 newFee, bool isDefault, uint256 newBalance) private {\\n        emit FeeVoteUpdate(account, newFee, isDefault, newBalance);\\n    }\\n\\n    function _emitSlippageFeeVoteUpdate(address account, uint256 newSlippageFee, bool isDefault, uint256 newBalance) private {\\n        emit SlippageFeeVoteUpdate(account, newSlippageFee, isDefault, newBalance);\\n    }\\n\\n    function _emitDecayPeriodVoteUpdate(address account, uint256 newDecayPeriod, bool isDefault, uint256 newBalance) private {\\n        emit DecayPeriodVoteUpdate(account, newDecayPeriod, isDefault, newBalance);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from == to) {\\n            // ignore transfers to self\\n            return;\\n        }\\n\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance = mooniswapFactoryGovernance;\\n        bool updateFrom = !(from == address(0) || _mooniswapFactoryGovernance.isFeeCollector(from));\\n        bool updateTo = !(to == address(0) || _mooniswapFactoryGovernance.isFeeCollector(to));\\n\\n        if (!updateFrom && !updateTo) {\\n            // mint to feeReceiver or burn from feeReceiver\\n            return;\\n        }\\n\\n        uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\n        uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\n        uint256 newTotalSupply = totalSupply()\\n            .add(from == address(0) ? amount : 0)\\n            .sub(to == address(0) ? amount : 0);\\n\\n        ParamsHelper memory params = ParamsHelper({\\n            from: from,\\n            to: to,\\n            updateFrom: updateFrom,\\n            updateTo: updateTo,\\n            amount: amount,\\n            balanceFrom: balanceFrom,\\n            balanceTo: balanceTo,\\n            newTotalSupply: newTotalSupply\\n        });\\n\\n        (uint256 defaultFee, uint256 defaultSlippageFee, uint256 defaultDecayPeriod) = _mooniswapFactoryGovernance.defaults();\\n\\n        _updateOnTransfer(params, defaultFee, _emitFeeVoteUpdate, _fee);\\n        _updateOnTransfer(params, defaultSlippageFee, _emitSlippageFeeVoteUpdate, _slippageFee);\\n        _updateOnTransfer(params, defaultDecayPeriod, _emitDecayPeriodVoteUpdate, _decayPeriod);\\n    }\\n\\n    struct ParamsHelper {\\n        address from;\\n        address to;\\n        bool updateFrom;\\n        bool updateTo;\\n        uint256 amount;\\n        uint256 balanceFrom;\\n        uint256 balanceTo;\\n        uint256 newTotalSupply;\\n    }\\n\\n    function _updateOnTransfer(\\n        ParamsHelper memory params,\\n        uint256 defaultValue,\\n        function(address, uint256, bool, uint256) internal emitEvent,\\n        LiquidVoting.Data storage votingData\\n    ) private {\\n        Vote.Data memory voteFrom = votingData.votes[params.from];\\n        Vote.Data memory voteTo = votingData.votes[params.to];\\n\\n        if (voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\n            emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\n            emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\n            return;\\n        }\\n\\n        if (params.updateFrom) {\\n            votingData.updateBalance(params.from, voteFrom, params.balanceFrom, params.balanceFrom.sub(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n\\n        if (params.updateTo) {\\n            votingData.updateBalance(params.to, voteTo, params.balanceTo, params.balanceTo.add(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62430fc9ad87ad51c5820482201ad5f6df47c838e8b9e50a5207eb9dbe7cc12e\",\"license\":\"MIT\"},\"contracts/inch/farming/FarmingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"../../Mooniswap.sol\\\";\\nimport \\\"../../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../../libraries/Voting.sol\\\";\\nimport \\\"../../libraries/UniERC20.sol\\\";\\nimport \\\"../../utils/BaseRewards.sol\\\";\\n\\n\\ncontract FarmingRewards is BaseRewards {\\n    using Vote for Vote.Data;\\n    using Voting for Voting.Data;\\n    using UniERC20 for IERC20;\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event FeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event SlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n    event DecayPeriodVoteUpdate(address indexed user, uint256 decayPeriod, bool isDefault, uint256 amount);\\n\\n    Mooniswap public immutable mooniswap;\\n    IMooniswapFactoryGovernance public immutable mooniswapFactoryGovernance;\\n    Voting.Data private _fee;\\n    Voting.Data private _slippageFee;\\n    Voting.Data private _decayPeriod;\\n\\n    constructor(Mooniswap _mooniswap, IERC20 _gift, uint256 _duration, address _rewardDistribution) public {\\n        mooniswap = _mooniswap;\\n        mooniswapFactoryGovernance = _mooniswap.mooniswapFactoryGovernance();\\n        addGift(_gift, _duration, _rewardDistribution);\\n    }\\n\\n    function name() external view returns(string memory) {\\n        return string(abi.encodePacked(\\\"Farming: \\\", mooniswap.name()));\\n    }\\n\\n    function symbol() external view returns(string memory) {\\n        return string(abi.encodePacked(\\\"farm-\\\", mooniswap.symbol()));\\n    }\\n\\n    function decimals() external view returns(uint8) {\\n        return mooniswap.decimals();\\n    }\\n\\n    function stake(uint256 amount) public updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        mooniswap.transferFrom(msg.sender, address(this), amount);\\n        _mint(msg.sender, amount);\\n        emit Staked(msg.sender, amount);\\n        emit Transfer(address(0), msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        _burn(msg.sender, amount);\\n        mooniswap.transfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n        emit Transfer(msg.sender, address(0), amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getAllRewards();\\n    }\\n\\n    function fee() public view returns(uint256) {\\n        return _fee.result;\\n    }\\n\\n    function slippageFee() public view returns(uint256) {\\n        return _slippageFee.result;\\n    }\\n\\n    function decayPeriod() public view returns(uint256) {\\n        return _decayPeriod.result;\\n    }\\n\\n    function feeVotes(address user) external view returns(uint256) {\\n        return _fee.votes[user].get(mooniswapFactoryGovernance.defaultFee);\\n    }\\n\\n    function slippageFeeVotes(address user) external view returns(uint256) {\\n        return _slippageFee.votes[user].get(mooniswapFactoryGovernance.defaultSlippageFee);\\n    }\\n\\n    function decayPeriodVotes(address user) external view returns(uint256) {\\n        return _decayPeriod.votes[user].get(mooniswapFactoryGovernance.defaultDecayPeriod);\\n    }\\n\\n    function feeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n        _vote(_fee, mooniswap.feeVote, mooniswap.discardFeeVote);\\n    }\\n\\n    function slippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n        _vote(_slippageFee, mooniswap.slippageFeeVote, mooniswap.discardSlippageFeeVote);\\n    }\\n\\n    function decayPeriodVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_DECAY_PERIOD, \\\"Decay period vote is too high\\\");\\n        require(vote >= MooniswapConstants._MIN_DECAY_PERIOD, \\\"Decay period vote is too low\\\");\\n\\n        _decayPeriod.updateVote(msg.sender, _decayPeriod.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultDecayPeriod(), _emitDecayPeriodVoteUpdate);\\n        _vote(_decayPeriod, mooniswap.decayPeriodVote, mooniswap.discardDecayPeriodVote);\\n    }\\n\\n    function discardFeeVote() external {\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n        _vote(_fee, mooniswap.feeVote, mooniswap.discardFeeVote);\\n    }\\n\\n    function discardSlippageFeeVote() external {\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n        _vote(_slippageFee, mooniswap.slippageFeeVote, mooniswap.discardSlippageFeeVote);\\n    }\\n\\n    function discardDecayPeriodVote() external {\\n        _decayPeriod.updateVote(msg.sender, _decayPeriod.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultDecayPeriod(), _emitDecayPeriodVoteUpdate);\\n        _vote(_decayPeriod, mooniswap.decayPeriodVote, mooniswap.discardDecayPeriodVote);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal override {\\n        super._mint(account, amount);\\n\\n        uint256 newBalance = balanceOf(account);\\n        _updateVotes(account, newBalance.sub(amount), newBalance, totalSupply());\\n    }\\n\\n    function _burn(address account, uint256 amount) internal override {\\n        super._burn(account, amount);\\n\\n        uint256 newBalance = balanceOf(account);\\n        _updateVotes(account, newBalance.add(amount), newBalance, totalSupply());\\n    }\\n\\n    function _updateVotes(address account, uint256 balance, uint256 newBalance, uint256 newTotalSupply) private {\\n        _fee.updateBalance(account, _fee.votes[account], balance, newBalance, newTotalSupply, mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n        _vote(_fee, mooniswap.feeVote, mooniswap.discardFeeVote);\\n        _slippageFee.updateBalance(account, _slippageFee.votes[account], balance, newBalance, newTotalSupply, mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n        _vote(_slippageFee, mooniswap.slippageFeeVote, mooniswap.discardSlippageFeeVote);\\n        _decayPeriod.updateBalance(account, _decayPeriod.votes[account], balance, newBalance, newTotalSupply, mooniswapFactoryGovernance.defaultDecayPeriod(), _emitDecayPeriodVoteUpdate);\\n        _vote(_decayPeriod, mooniswap.decayPeriodVote, mooniswap.discardDecayPeriodVote);\\n    }\\n\\n    function _vote(Voting.Data storage votingData, function(uint256) external vote, function() external discardVote) private {\\n        if (votingData._weightedSum == 0) {\\n            discardVote();\\n        } else {\\n            vote(votingData.result);\\n        }\\n    }\\n\\n    function _emitFeeVoteUpdate(address account, uint256 newFee, bool isDefault, uint256 newBalance) private {\\n        emit FeeVoteUpdate(account, newFee, isDefault, newBalance);\\n    }\\n\\n    function _emitSlippageFeeVoteUpdate(address account, uint256 newSlippageFee, bool isDefault, uint256 newBalance) private {\\n        emit SlippageFeeVoteUpdate(account, newSlippageFee, isDefault, newBalance);\\n    }\\n\\n    function _emitDecayPeriodVoteUpdate(address account, uint256 newDecayPeriod, bool isDefault, uint256 newBalance) private {\\n        emit DecayPeriodVoteUpdate(account, newDecayPeriod, isDefault, newBalance);\\n    }\\n\\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\\n        for (uint i = 0; i < tokenRewards.length; i++) {\\n            require(token != tokenRewards[i].gift, \\\"Can't rescue gift\\\");\\n        }\\n\\n        token.uniTransfer(msg.sender, amount);\\n        if (token == mooniswap) {\\n            require(token.uniBalanceOf(address(this)) == totalSupply(), \\\"Can't withdraw staked tokens\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1f71873d4e1f38d951752e92954c14dd92d80a649bc0e2a37a571b7a1ec9078e\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IFeeCollector {\\n    function updateReward(address receiver, uint256 amount) external;\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x32a215750177362f8077d6e4cf48ae508e0b6565f20f8eaa4b130260bf238555\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactoryGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IMooniswapFactoryGovernance {\\n    function shareParameters() external view returns(uint256 referralShare, uint256 governanceShare, address governanceWallet, address referralFeeReceiver);\\n    function defaults() external view returns(uint256 defaultFee, uint256 defaultSlippageFee, uint256 defaultDecayPeriod);\\n\\n    function defaultFee() external view returns(uint256);\\n    function defaultSlippageFee() external view returns(uint256);\\n    function defaultDecayPeriod() external view returns(uint256);\\n\\n    function virtualDefaultFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultSlippageFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultDecayPeriod() external view returns(uint104, uint104, uint48);\\n\\n    function referralShare() external view returns(uint256);\\n    function governanceShare() external view returns(uint256);\\n    function governanceWallet() external view returns(address);\\n    function feeCollector() external view returns(address);\\n\\n    function isFeeCollector(address) external view returns(bool);\\n    function isActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x86fd2d21dcd3c4b28d17a65f6eba549c252e5b14a22d447c4ff5c8006a3c63e8\",\"license\":\"MIT\"},\"contracts/libraries/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary LiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _defaultVotes;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 totalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldDefaultVotes = self._defaultVotes;\\n        uint256 newDefaultVotes = oldDefaultVotes;\\n\\n        if (oldVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.sub(oldBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n        }\\n\\n        if (newVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.add(newBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newDefaultVotes != oldDefaultVotes) {\\n            self._defaultVotes = newDefaultVotes;\\n        }\\n\\n        {\\n            uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).div(newTotalSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x0300c61b4bba9a58097ec0a843d04b42260f705dbc68bf3bbcc9e9011ffdfd7a\",\"license\":\"MIT\"},\"contracts/libraries/MooniswapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary MooniswapConstants {\\n    uint256 internal constant _FEE_DENOMINATOR = 1e18;\\n\\n    uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\n    uint256 internal constant _MIN_DECAY_PERIOD = 10 seconds;\\n\\n    uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\n    uint256 internal constant _MAX_SLIPPAGE_FEE = 5e18;  // 500%\\n    uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\n\\n    uint256 internal constant _DEFAULT_FEE = 0.001e18;  // 0.1%\\n    uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.05e18; // 5%\\n    uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\n    uint256 internal constant _DEFAULT_DECAY_PERIOD = 10 seconds;\\n}\\n\",\"keccak256\":\"0x1a2eda56c7ebe2e983ec23d2d9af0372eadfb50aecbeef75fb4f0c1aba6f829f\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary SafeCast {\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n}\\n\",\"keccak256\":\"0x6f5e3e3d0bc762c2defe32c7bc62309cd7e60776bb5dc0d059a1bcf0874b4c51\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary Sqrt {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256) {\\n        if (y > 3) {\\n            uint256 z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n            return z;\\n        } else if (y != 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5674ed7d1bb3655d9d6698ff6175cb23261d8cf837915d0af70404aa019b5267\",\"license\":\"MIT\"},\"contracts/libraries/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n\\nlibrary UniERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    function isETH(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(0));\\n    }\\n\\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return account.balance;\\n        } else {\\n            return token.balanceOf(account);\\n        }\\n    }\\n\\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                to.transfer(amount);\\n            } else {\\n                token.safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    function uniTransferFrom(IERC20 token, address payable from, address to, uint256 amount) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                require(msg.value >= amount, \\\"UniERC20: not enough value\\\");\\n                require(from == msg.sender, \\\"from is not msg.sender\\\");\\n                require(to == address(this), \\\"to is not this\\\");\\n                if (msg.value > amount) {\\n                    // Return remainder if exist\\n                    from.transfer(msg.value.sub(amount));\\n                }\\n            } else {\\n                token.safeTransferFrom(from, to, amount);\\n            }\\n        }\\n    }\\n\\n    function uniSymbol(IERC20 token) internal view returns(string memory) {\\n        if (isETH(token)) {\\n            uint256 chainId = _chainId();\\n            if (chainId == 1) {\\n                return \\\"ETH\\\";\\n            }\\n            else if (chainId == 56) {\\n                return \\\"BNB\\\";\\n            }\\n            else {\\n                return \\\"COIN\\\";\\n            }\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\\n            abi.encodeWithSignature(\\\"symbol()\\\")\\n        );\\n        if (!success) {\\n            (success, data) = address(token).staticcall{ gas: 20000 }(\\n                abi.encodeWithSignature(\\\"SYMBOL()\\\")\\n            );\\n        }\\n\\n        if (success && data.length >= 96) {\\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\\n            if (offset == 0x20 && len > 0 && len <= 256) {\\n                return string(abi.decode(data, (bytes)));\\n            }\\n        }\\n\\n        if (success && data.length == 32) {\\n            uint len = 0;\\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\\n                len++;\\n            }\\n\\n            if (len > 0) {\\n                bytes memory result = new bytes(len);\\n                for (uint i = 0; i < len; i++) {\\n                    result[i] = data[i];\\n                }\\n                return string(result);\\n            }\\n        }\\n\\n        return _toHex(address(token));\\n    }\\n\\n    function _chainId() private pure returns(uint256 chainId) {\\n        assembly { // solhint-disable-line no-inline-assembly\\n            chainId := chainid()\\n        }\\n    }\\n\\n    function _toHex(address account) private pure returns(string memory) {\\n        return _toHex(abi.encodePacked(account));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns(string memory) {\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        uint j = 2;\\n        for (uint i = 0; i < data.length; i++) {\\n            uint a = uint8(data[i]) >> 4;\\n            uint b = uint8(data[i]) & 0x0f;\\n            str[j++] = byte(uint8(a + 48 + (a/10)*39));\\n            str[j++] = byte(uint8(b + 48 + (b/10)*39));\\n        }\\n\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0xd207b6fee37c65c4239bd7b4101aa149b99608385dd50b845766f8efc1cdb20b\",\"license\":\"MIT\"},\"contracts/libraries/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n\\nlibrary VirtualBalance {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    struct Data {\\n        uint216 balance;\\n        uint40 time;\\n    }\\n\\n    function set(VirtualBalance.Data storage self, uint256 balance) internal {\\n        (self.balance, self.time) = (\\n            balance.toUint216(),\\n            block.timestamp.toUint40()\\n        );\\n    }\\n\\n    function update(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance) internal {\\n        set(self, current(self, decayPeriod, realBalance));\\n    }\\n\\n    function scale(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance, uint256 num, uint256 denom) internal {\\n        set(self, current(self, decayPeriod, realBalance).mul(num).add(denom.sub(1)).div(denom));\\n    }\\n\\n    function current(VirtualBalance.Data memory self, uint256 decayPeriod, uint256 realBalance) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(decayPeriod, block.timestamp.sub(self.time));\\n        uint256 timeRemain = decayPeriod.sub(timePassed);\\n        return uint256(self.balance).mul(timeRemain).add(\\n            realBalance.mul(timePassed)\\n        ).div(decayPeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x0493d4b88ca464df713e7978a995c26f378e458ffeffc4a0ca966510e4cea8cb\",\"license\":\"MIT\"},\"contracts/libraries/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary VirtualVote {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\n\\n    struct Data {\\n        uint104 oldResult;\\n        uint104 result;\\n        uint48 time;\\n    }\\n\\n    function current(VirtualVote.Data memory self) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.oldResult).mul(timeRemain).add(\\n            uint256(self.result).mul(timePassed)\\n        ).div(_VOTE_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0xd62c910eb9b206eb6c2230be6c964824693fbe52436e53c3e69f02a84aa7c63d\",\"license\":\"MIT\"},\"contracts/libraries/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nlibrary Vote {\\n    struct Data {\\n        uint256 value;\\n    }\\n\\n    function eq(Vote.Data memory self, Vote.Data memory vote) internal pure returns(bool) {\\n        return self.value == vote.value;\\n    }\\n\\n    function init() internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: 0\\n        });\\n    }\\n\\n    function init(uint256 vote) internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: vote + 1\\n        });\\n    }\\n\\n    function isDefault(Data memory self) internal pure returns(bool) {\\n        return self.value == 0;\\n    }\\n\\n    function get(Data memory self, uint256 defaultVote) internal pure returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVote;\\n    }\\n\\n    function get(Data memory self, function() external view returns(uint256) defaultVoteFn) internal view returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVoteFn();\\n    }\\n}\\n\",\"keccak256\":\"0xa31a88aebf9a52ea8c02e611cd798631e7296b78e9ecdf37d2b0c7eb2badb252\",\"license\":\"MIT\"},\"contracts/libraries/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary Voting {\\n    using SafeMath for uint256;\\n    using Vote for Vote.Data;\\n\\n    struct Data {\\n        uint256 result;\\n        uint256 _weightedSum;\\n        uint256 _defaultVotes;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        Voting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 totalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        Voting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        Voting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldDefaultVotes = self._defaultVotes;\\n        uint256 newDefaultVotes = oldDefaultVotes;\\n\\n        if (oldVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.sub(oldBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n        }\\n\\n        if (newVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.add(newBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newDefaultVotes != oldDefaultVotes) {\\n            self._defaultVotes = newDefaultVotes;\\n        }\\n\\n        uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).div(newTotalSupply);\\n\\n        if (newResult != self.result) {\\n            self.result = newResult;\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x53e7848f917583f8a09414c5727853c29b1ebbcec43819698ff5bf896ba84ed8\",\"license\":\"MIT\"},\"contracts/utils/BalanceAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract BalanceAccounting {\\n    using SafeMath for uint256;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _balances[account] = _balances[account].sub(amount, \\\"Burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n    }\\n\\n    function _set(address account, uint256 amount) internal virtual returns(uint256 oldAmount) {\\n        oldAmount = _balances[account];\\n        if (oldAmount != amount) {\\n            _balances[account] = amount;\\n            _totalSupply = _totalSupply.add(amount).sub(oldAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ae3cf0992b5e6d9eea9f5b1d1feec7d87ea2caecc493acf5dcedb3fe5034d48\",\"license\":\"MIT\"},\"contracts/utils/BaseRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./BalanceAccounting.sol\\\";\\n\\n\\ncontract BaseRewards is Ownable, BalanceAccounting {\\n    using SafeERC20 for IERC20;\\n\\n    event RewardAdded(uint256 indexed i, uint256 reward);\\n    event RewardPaid(uint256 indexed i, address indexed user, uint256 reward);\\n    event DurationUpdated(uint256 indexed i, uint256 duration);\\n    event RewardDistributionChanged(uint256 indexed i, address rewardDistribution);\\n    event NewGift(uint256 indexed i, IERC20 gift);\\n\\n    struct TokenRewards {\\n        IERC20 gift;\\n        uint256 duration;\\n        address rewardDistribution;\\n\\n        uint256 periodFinish;\\n        uint256 rewardRate;\\n        uint256 lastUpdateTime;\\n        uint256 rewardPerTokenStored;\\n        mapping(address => uint256) userRewardPerTokenPaid;\\n        mapping(address => uint256) rewards;\\n    }\\n\\n    TokenRewards[] public tokenRewards;\\n\\n    modifier updateReward(address account) {\\n        uint256 len = tokenRewards.length;\\n        for (uint i = 0; i < len; i++) {\\n            TokenRewards storage tr = tokenRewards[i];\\n            tr.rewardPerTokenStored = rewardPerToken(i);\\n            tr.lastUpdateTime = lastTimeRewardApplicable(i);\\n            if (account != address(0)) {\\n                tr.rewards[account] = earned(i, account);\\n                tr.userRewardPerTokenPaid[account] = tr.rewardPerTokenStored;\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRewardDistribution(uint i) {\\n        require(msg.sender == tokenRewards[i].rewardDistribution, \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable(uint i) public view returns (uint256) {\\n        return Math.min(block.timestamp, tokenRewards[i].periodFinish);\\n    }\\n\\n    function rewardPerToken(uint i) public view returns (uint256) {\\n        TokenRewards storage tr = tokenRewards[i];\\n        if (totalSupply() == 0) {\\n            return tr.rewardPerTokenStored;\\n        }\\n        return tr.rewardPerTokenStored.add(\\n            lastTimeRewardApplicable(i)\\n                .sub(tr.lastUpdateTime)\\n                .mul(tr.rewardRate)\\n                .mul(1e18)\\n                .div(totalSupply())\\n        );\\n    }\\n\\n    function earned(uint i, address account) public view returns (uint256) {\\n        TokenRewards storage tr = tokenRewards[i];\\n        return balanceOf(account)\\n            .mul(rewardPerToken(i).sub(tr.userRewardPerTokenPaid[account]))\\n            .div(1e18)\\n            .add(tr.rewards[account]);\\n    }\\n\\n    function getReward(uint i) public updateReward(msg.sender) {\\n        TokenRewards storage tr = tokenRewards[i];\\n        uint256 reward = tr.rewards[msg.sender];\\n        if (reward > 0) {\\n            tr.rewards[msg.sender] = 0;\\n            tr.gift.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(i, msg.sender, reward);\\n        }\\n    }\\n\\n    function getAllRewards() public {\\n        uint256 len = tokenRewards.length;\\n        for (uint i = 0; i < len; i++) {\\n            getReward(i);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint i, uint256 reward) external onlyRewardDistribution(i) updateReward(address(0)) {\\n        require(reward < uint(-1).div(1e18), \\\"Reward overlow\\\");\\n\\n        TokenRewards storage tr = tokenRewards[i];\\n        uint256 duration = tr.duration;\\n\\n        if (block.timestamp >= tr.periodFinish) {\\n            require(reward >= duration, \\\"Reward is too small\\\");\\n            tr.rewardRate = reward.div(duration);\\n        } else {\\n            uint256 remaining = tr.periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(tr.rewardRate);\\n            require(reward.add(leftover) >= duration, \\\"Reward is too small\\\");\\n            tr.rewardRate = reward.add(leftover).div(duration);\\n        }\\n\\n        uint balance = tr.gift.balanceOf(address(this));\\n        require(tr.rewardRate <= balance.div(duration), \\\"Reward is too big\\\");\\n\\n        tr.lastUpdateTime = block.timestamp;\\n        tr.periodFinish = block.timestamp.add(duration);\\n        emit RewardAdded(i, reward);\\n    }\\n\\n    function setRewardDistribution(uint i, address _rewardDistribution) external onlyOwner {\\n        TokenRewards storage tr = tokenRewards[i];\\n        tr.rewardDistribution = _rewardDistribution;\\n        emit RewardDistributionChanged(i, _rewardDistribution);\\n    }\\n\\n    function setDuration(uint i, uint256 _duration) external onlyRewardDistribution(i) {\\n        TokenRewards storage tr = tokenRewards[i];\\n        require(block.timestamp >= tr.periodFinish, \\\"Not finished yet\\\");\\n        tr.duration = _duration;\\n        emit DurationUpdated(i, _duration);\\n    }\\n\\n    function addGift(IERC20 gift, uint256 duration, address rewardDistribution) public onlyOwner {\\n        uint256 len = tokenRewards.length;\\n        for (uint i = 0; i < len; i++) {\\n            require(gift != tokenRewards[i].gift, \\\"Gift is already added\\\");\\n        }\\n\\n        TokenRewards storage tr = tokenRewards.push();\\n        tr.gift = gift;\\n        tr.duration = duration;\\n        tr.rewardDistribution = rewardDistribution;\\n\\n        emit NewGift(len, gift);\\n        emit DurationUpdated(len, duration);\\n        emit RewardDistributionChanged(len, rewardDistribution);\\n    }\\n}\\n\",\"keccak256\":\"0xe572e6fb235ce855345efd25a6b027478e0571d8a31ac6e0c20b68da93615131\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620039be380380620039be833981810160405260808110156200003757600080fd5b508051602082015160408301516060909301519192909160006200005a62000150565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350836001600160a01b03166080816001600160a01b031660601b81525050836001600160a01b031663d9a0c2176040518163ffffffff1660e01b815260040160206040518083038186803b158015620000fb57600080fd5b505afa15801562000110573d6000803e3d6000fd5b505050506040513d60208110156200012757600080fd5b505160601b6001600160601b03191660a0526200014683838362000154565b50505050620003d0565b3390565b6200015e62000150565b6001600160a01b031662000171620003c1565b6001600160a01b031614620001cd576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60035460005b81811015620002655760038181548110620001ea57fe5b60009182526020909120600990910201546001600160a01b03868116911614156200025c576040805162461bcd60e51b815260206004820152601560248201527f4769667420697320616c72656164792061646465640000000000000000000000604482015290519081900360640190fd5b600101620001d3565b50600380546001810182556000919091526009027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b038088166001600160a01b0319928316811784557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c85018890557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d9094018054918716919092161790556040805192835251909183917f64cc71b17412354fc7654b3a032c59b8aacbcc955fa02aecfec3be41d7350f249181900360200190a260408051858152905183917ff899c6d536e6cda78c5f4dce43ca0e8c47167deb2875ea8b777f21cc85899b1f919081900360200190a2604080516001600160a01b0385168152905183917f68898541a3500520160dc4a025aaabdb318ec2d614c236a5fb88f523d76a8d8a919081900360200190a25050505050565b6000546001600160a01b031690565b60805160601c60a05160601c61354c620004726000398061091e5280610ae65280611739528061189b5280611a96528061208952806123365280612e4a5280612f62528061307a5250806106aa52806109c05280610b88528061122952806113125280611338528061142a5280611664528061183b52806118c95280611bfb52806123d8528061258e5280612eec5280613004528061311c525061354c6000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c8063874c120b11610145578063d9a0c217116100bd578063e9fad8ee1161008c578063eeca156211610071578063eeca15621461065b578063f2fde38b14610678578063f76d13b41461069e5761025c565b8063e9fad8ee14610636578063eaadf8481461063e5761025c565b8063d9a0c217146105ce578063ddca3f43146105d6578063e2b01a5e146105de578063e39c08fc1461060a5761025c565b806395d89b4111610114578063a694fc3a116100f9578063a694fc3a14610558578063a93a085714610575578063cd7ea095146105ab5761025c565b806395d89b411461052a5780639aad141b146105325761025c565b8063874c120b146104d75780638da5cb5b146104f457806393028d83146104fc57806395cad3c7146105045761025c565b8063313ce567116101d85780636669302a116101a7578063715018a61161018c578063715018a61461047d57806378e3214f146104855780637e82a6f3146104b15761025c565b80636669302a1461044f57806370a08231146104575761025c565b8063313ce567146104195780633732b3941461043757806345b35f561461043f57806348d67e1b146104475761025c565b806318160ddd1161022f578063246132f911610214578063246132f9146103b55780632e1a7d4d146103d8578063303bfdae146103f55761025c565b806318160ddd1461037e5780631c4b774b146103985761025c565b806306fdde031461026157806307a80070146102de57806310eee734146102fd57806311212d6614610361575b600080fd5b6102696106a6565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102a357818101518382015260200161028b565b50505050905090810190601f1680156102d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102fb600480360360208110156102f457600080fd5b5035610881565b005b61031a6004803603602081101561031357600080fd5b50356109f3565b604080516001600160a01b039889168152602081019790975294909616858501526060850192909252608084015260a083015260c082019290925290519081900360e00190f35b6102fb6004803603602081101561037757600080fd5b5035610a4a565b610386610bb8565b60408051918252519081900360200190f35b6102fb600480360360208110156103ae57600080fd5b5035610bbe565b6102fb600480360360408110156103cb57600080fd5b5080359060200135610cff565b6102fb600480360360208110156103ee57600080fd5b5035611103565b6103fd611310565b604080516001600160a01b039092168252519081900360200190f35b610421611334565b6040805160ff9092168252519081900360200190f35b6103866113c0565b6102fb6113c6565b6103866113e9565b6102fb6113ef565b6103866004803603602081101561046d57600080fd5b50356001600160a01b031661145c565b6102fb61147b565b6102fb6004803603604081101561049b57600080fd5b506001600160a01b038135169060200135611546565b610386600480360360208110156104c757600080fd5b50356001600160a01b0316611709565b610386600480360360208110156104ed57600080fd5b5035611769565b6103fd6117f1565b6102fb611800565b6103866004803603602081101561051a57600080fd5b50356001600160a01b031661186b565b6102696118c5565b6103866004803603602081101561054857600080fd5b50356001600160a01b0316611a66565b6102fb6004803603602081101561056e57600080fd5b5035611ac0565b6102fb6004803603606081101561058b57600080fd5b506001600160a01b03813581169160208101359160409091013516611ced565b6102fb600480360360408110156105c157600080fd5b5080359060200135611f5e565b6103fd612087565b6103866120ab565b6102fb600480360360408110156105f457600080fd5b50803590602001356001600160a01b03166120b1565b6103866004803603604081101561062057600080fd5b50803590602001356001600160a01b03166121ae565b6102fb612230565b6102fb6004803603602081101561065457600080fd5b5035612249565b6103866004803603602081101561067157600080fd5b5035612408565b6102fb6004803603602081101561068e57600080fd5b50356001600160a01b0316612432565b6102fb612553565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561070157600080fd5b505afa158015610715573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561073e57600080fd5b810190808051604051939291908464010000000082111561075e57600080fd5b90830190602082018581111561077357600080fd5b825164010000000081118282018810171561078d57600080fd5b82525081516020918201929091019080838360005b838110156107ba5781810151838201526020016107a2565b50505050905090810190601f1680156107e75780820380516001836020036101000a031916815260200191505b5060405250505060405160200180807f4661726d696e673a20000000000000000000000000000000000000000000000081525060090182805190602001908083835b602083106108485780518252601f199092019160209182019101610829565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052905090565b674563918244f400008111156108de576040805162461bcd60e51b815260206004820152601d60248201527f536c6970706167652066656520766f746520697320746f6f2068696768000000604482015290519081900360640190fd5b336000818152600b60209081526040918290208251918201909252905481526109b1919061090b846125be565b6109143361145c565b61091c610bb8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323662bb96040518163ffffffff1660e01b815260040160206040518083038186803b15801561097557600080fd5b505afa158015610989573d6000803e3d6000fd5b505050506040513d602081101561099f57600080fd5b505160089594939291906125dd612630565b6109f060086001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166307a8007081636669302a61264b565b50565b60038181548110610a0057fe5b600091825260209091206009909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b03958616975093959490921693909287565b662386f26fc10000811115610aa6576040805162461bcd60e51b815260206004820152601460248201527f46656520766f746520697320746f6f2068696768000000000000000000000000604482015290519081900360640190fd5b33600081815260076020908152604091829020825191820190925290548152610b799190610ad3846125be565b610adc3361145c565b610ae4610bb8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a6c72d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3d57600080fd5b505afa158015610b51573d6000803e3d6000fd5b505050506040513d6020811015610b6757600080fd5b505160049594939291906126fb612630565b6109f060046001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166311212d66816393028d8361264b565b60015490565b600354339060005b81811015610c5d57600060038281548110610bdd57fe5b90600052602060002090600902019050610bf682611769565b6006820155610c0482612408565b60058201556001600160a01b03841615610c5457610c2282856121ae565b6001600160a01b0385166000908152600883016020908152604080832093909355600684015460078501909152919020555b50600101610bc6565b50600060038481548110610c6d57fe5b60009182526020808320338452600860099093020191820190526040909120549091508015610cf8573360008181526008840160205260408120558254610cc0916001600160a01b03909116908361274e565b604080518281529051339187917f04492fab062412e7e4e5f46c9e919f1640652946a5e163ad6e6c1c03d87954d29181900360200190a35b5050505050565b8160038181548110610d0d57fe5b60009182526020909120600990910201600201546001600160a01b03163314610d6d576040805162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b600354600090815b81811015610e0c57600060038281548110610d8c57fe5b90600052602060002090600902019050610da582611769565b6006820155610db382612408565b60058201556001600160a01b03841615610e0357610dd182856121ae565b6001600160a01b0385166000908152600883016020908152604080832093909355600684015460078501909152919020555b50600101610d75565b50610e21600019670de0b6b3a76400006127ba565b8410610e74576040805162461bcd60e51b815260206004820152600e60248201527f526577617264206f7665726c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b600060038681548110610e8357fe5b9060005260206000209060090201905060008160010154905081600301544210610f105780861015610efc576040805162461bcd60e51b815260206004820152601360248201527f52657761726420697320746f6f20736d616c6c00000000000000000000000000604482015290519081900360640190fd5b610f0686826127ba565b6004830155610fb9565b6003820154600090610f229042612821565b90506000610f3d84600401548361287e90919063ffffffff16565b905082610f4a89836128d7565b1015610f9d576040805162461bcd60e51b815260206004820152601360248201527f52657761726420697320746f6f20736d616c6c00000000000000000000000000604482015290519081900360640190fd5b610fb183610fab8a846128d7565b906127ba565b600485015550505b8154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561101c57600080fd5b505afa158015611030573d6000803e3d6000fd5b505050506040513d602081101561104657600080fd5b5051905061105481836127ba565b836004015411156110ac576040805162461bcd60e51b815260206004820152601160248201527f52657761726420697320746f6f20626967000000000000000000000000000000604482015290519081900360640190fd5b42600584018190556110be90836128d7565b600384015560408051888152905189917f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f55919081900360200190a25050505050505050565b600354339060005b818110156111a25760006003828154811061112257fe5b9060005260206000209060090201905061113b82611769565b600682015561114982612408565b60058201556001600160a01b038416156111995761116782856121ae565b6001600160a01b0385166000908152600883016020908152604080832093909355600684015460078501909152919020555b5060010161110b565b50600083116111f8576040805162461bcd60e51b815260206004820152601160248201527f43616e6e6f742077697468647261772030000000000000000000000000000000604482015290519081900360640190fd5b6112023384612931565b6040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b15801561127157600080fd5b505af1158015611285573d6000803e3d6000fd5b505050506040513d602081101561129b57600080fd5b505060408051848152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a260408051848152905160009133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561138f57600080fd5b505afa1580156113a3573d6000803e3d6000fd5b505050506040513d60208110156113b957600080fd5b5051905090565b60085490565b60035460005b818110156113e5576113dd81610bbe565b6001016113cc565b5050565b600c5490565b336000818152600b602090815260409182902082519182019092529054815261141b919061090b612964565b61145a60086001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166307a8007081636669302a61264b565b565b6001600160a01b0381166000908152600260205260409020545b919050565b61148361297f565b6001600160a01b03166114946117f1565b6001600160a01b0316146114ef576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61154e61297f565b6001600160a01b031661155f6117f1565b6001600160a01b0316146115ba576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b60035481101561164d57600381815481106115d457fe5b60009182526020909120600990910201546001600160a01b0384811691161415611645576040805162461bcd60e51b815260206004820152601160248201527f43616e2774207265736375652067696674000000000000000000000000000000604482015290519081900360640190fd5b6001016115bd565b506116626001600160a01b0383163383612983565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156113e5576116a4610bb8565b6116b76001600160a01b038416306129e7565b146113e5576040805162461bcd60e51b815260206004820152601c60248201527f43616e2774207769746864726177207374616b656420746f6b656e7300000000604482015290519081900360640190fd5b6001600160a01b038181166000908152600f602090815260408083208151928301909152548152909161176391907f000000000000000000000000000000000000000000000000000000000000000016631845f0db612a88565b92915050565b6000806003838154811061177957fe5b90600052602060002090600902019050611791610bb8565b6117a057600601549050611476565b6117ea6117df6117ae610bb8565b610fab670de0b6b3a76400006117d986600401546117d988600501546117d38c612408565b90612821565b9061287e565b6006830154906128d7565b9392505050565b6000546001600160a01b031690565b3360008181526007602090815260409182902082519182019092529054815261182c9190610ad3612964565b61145a60046001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166311212d66816393028d8361264b565b6001600160a01b038181166000908152600b602090815260408083208151928301909152548152909161176391907f0000000000000000000000000000000000000000000000000000000000000000166323662bb9612a88565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561192057600080fd5b505afa158015611934573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561195d57600080fd5b810190808051604051939291908464010000000082111561197d57600080fd5b90830190602082018581111561199257600080fd5b82516401000000008111828201881017156119ac57600080fd5b82525081516020918201929091019080838360005b838110156119d95781810151838201526020016119c1565b50505050905090810190601f168015611a065780820380516001836020036101000a031916815260200191505b5060405250505060405160200180807f6661726d2d0000000000000000000000000000000000000000000000000000008152506005018280519060200190808383602083106108485780518252601f199092019160209182019101610829565b6001600160a01b0381811660009081526007602090815260408083208151928301909152548152909161176391907f000000000000000000000000000000000000000000000000000000000000000016635a6c72d0612a88565b600354339060005b81811015611b5f57600060038281548110611adf57fe5b90600052602060002090600902019050611af882611769565b6006820155611b0682612408565b60058201556001600160a01b03841615611b5657611b2482856121ae565b6001600160a01b0385166000908152600883016020908152604080832093909355600684015460078501909152919020555b50600101611ac8565b5060008311611bb5576040805162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74207374616b652030000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810185905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd9160648083019260209291908290030181600087803b158015611c4357600080fd5b505af1158015611c57573d6000803e3d6000fd5b505050506040513d6020811015611c6d57600080fd5b50611c7a90503384612afe565b60408051848152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a260408051848152905133916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b611cf561297f565b6001600160a01b0316611d066117f1565b6001600160a01b031614611d61576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60035460005b81811015611df55760038181548110611d7c57fe5b60009182526020909120600990910201546001600160a01b0386811691161415611ded576040805162461bcd60e51b815260206004820152601560248201527f4769667420697320616c72656164792061646465640000000000000000000000604482015290519081900360640190fd5b600101611d67565b50600380546001810182556000919091526009027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b0380881673ffffffffffffffffffffffffffffffffffffffff19928316811784557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c85018890557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d9094018054918716919092161790556040805192835251909183917f64cc71b17412354fc7654b3a032c59b8aacbcc955fa02aecfec3be41d7350f249181900360200190a260408051858152905183917ff899c6d536e6cda78c5f4dce43ca0e8c47167deb2875ea8b777f21cc85899b1f919081900360200190a2604080516001600160a01b0385168152905183917f68898541a3500520160dc4a025aaabdb318ec2d614c236a5fb88f523d76a8d8a919081900360200190a25050505050565b8160038181548110611f6c57fe5b60009182526020909120600990910201600201546001600160a01b03163314611fcc576040805162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b600060038481548110611fdb57fe5b906000526020600020906009020190508060030154421015612044576040805162461bcd60e51b815260206004820152601060248201527f4e6f742066696e69736865642079657400000000000000000000000000000000604482015290519081900360640190fd5b6001810183905560408051848152905185917ff899c6d536e6cda78c5f4dce43ca0e8c47167deb2875ea8b777f21cc85899b1f919081900360200190a250505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045490565b6120b961297f565b6001600160a01b03166120ca6117f1565b6001600160a01b031614612125576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60006003838154811061213457fe5b60009182526020918290206009919091020160028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616908117909155604080519182525191935085927f68898541a3500520160dc4a025aaabdb318ec2d614c236a5fb88f523d76a8d8a92918290030190a2505050565b600080600384815481106121be57fe5b600091825260208083206001600160a01b0387168452600860099093020191820181526040808420546007840190925290922054909250612228919061222290670de0b6b3a764000090610fab90612219906117d38b611769565b6117d98961145c565b906128d7565b949350505050565b61224161223c3361145c565b611103565b61145a6113c6565b61012c8111156122a0576040805162461bcd60e51b815260206004820152601d60248201527f446563617920706572696f6420766f746520697320746f6f2068696768000000604482015290519081900360640190fd5b600a8110156122f6576040805162461bcd60e51b815260206004820152601c60248201527f446563617920706572696f6420766f746520697320746f6f206c6f7700000000604482015290519081900360640190fd5b336000818152600f60209081526040918290208251918201909252905481526123c99190612323846125be565b61232c3361145c565b612334610bb8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631845f0db6040518163ffffffff1660e01b815260040160206040518083038186803b15801561238d57600080fd5b505afa1580156123a1573d6000803e3d6000fd5b505050506040513d60208110156123b757600080fd5b5051600c959493929190612b23612630565b6109f0600c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663eaadf8488163f76d13b461264b565b6000611763426003848154811061241b57fe5b906000526020600020906009020160030154612b76565b61243a61297f565b6001600160a01b031661244b6117f1565b6001600160a01b0316146124a6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166124eb5760405162461bcd60e51b81526004018080602001828103825260268152602001806134806026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b336000818152600f602090815260409182902082519182019092529054815261257f9190612323612964565b61145a600c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663eaadf8488163f76d13b461264b565b6125c661346c565b506040805160208101909152600182018152919050565b60408051848152831515602082015280820183905290516001600160a01b038616917fce0cf859d853e1944032294143a1bf3ad799998ae77acbeb6c4d9b20d6910240919081900360600190a250505050565b612641888888888889898989612b8c565b5050505050505050565b600185015461269f5781816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561268257600080fd5b505af1158015612696573d6000803e3d6000fd5b50505050610cf8565b838386600001546040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156126dc57600080fd5b505af11580156126f0573d6000803e3d6000fd5b505050505050505050565b60408051848152831515602082015280820183905290516001600160a01b038616917fe117cae46817b894b41a4412b73ae0ba746a5707b94e02d83b4c6502010b11ac919081900360600190a250505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526127b5908490612ccb565b505050565b6000808211612810576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161281957fe5b049392505050565b600082821115612878576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261288d57506000611763565b8282028284828161289a57fe5b04146117ea5760405162461bcd60e51b81526004018080602001828103825260218152602001806134cc6021913960400191505060405180910390fd5b6000828201838110156117ea576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b61293b8282612d7c565b60006129468361145c565b90506127b58361295683856128d7565b8361295f610bb8565b612e04565b61296c61346c565b5060408051602081019091526000815290565b3390565b80156127b55761299283613152565b156129d3576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156129cd573d6000803e3d6000fd5b506127b5565b6127b56001600160a01b038416838361274e565b60006129f283613152565b15612a0857506001600160a01b03811631611763565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a5557600080fd5b505afa158015612a69573d6000803e3d6000fd5b505050506040513d6020811015612a7f57600080fd5b50519050611763565b825160009015612a9e57508251600019016117ea565b82826040518163ffffffff1660e01b815260040160206040518083038186803b158015612aca57600080fd5b505afa158015612ade573d6000803e3d6000fd5b505050506040513d6020811015612af457600080fd5b5051949350505050565b612b08828261315f565b6000612b138361145c565b90506127b5836129568385612821565b60408051848152831515602082015280820183905290516001600160a01b038616917fd0784d105a7412ffec29813ff8401f04f3d1cdbe6aca756974b1a31f830e5cb7919081900360600190a250505050565b6000818310612b8557816117ea565b5090919050565b600189015460028a0154819080612ba28b6131b2565b15612bb857612bb1818a612821565b9050612bd9565b612bd6612bcf612bc88d896131b7565b8b9061287e565b8490612821565b92505b612be28a6131b2565b15612bf857612bf181896128d7565b9050612c19565b612c16612c0f612c088c896131b7565b8a9061287e565b84906128d7565b92505b838314612c285760018d018390555b818114612c375760028d018190555b60008715612c5c57612c5788610fab612c50858b61287e565b87906128d7565b612c5e565b865b8e549091508114612c6d57808e555b612c778b8d6131d3565b612c9a576001600160a01b038d16600090815260038f01602052604090208b5190555b612cbb8d612ca88d8a6131b7565b612cb18e6131b2565b8c8a63ffffffff16565b5050505050505050505050505050565b6060612d20826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131da9092919063ffffffff16565b8051909150156127b557808060200190516020811015612d3f57600080fd5b50516127b55760405162461bcd60e51b815260040180806020018281038252602a8152602001806134ed602a913960400191505060405180910390fd5b604080518082018252601b81527f4275726e20616d6f756e7420657863656564732062616c616e636500000000006020808301919091526001600160a01b038516600090815260029091529190912054612dd79183906131e9565b6001600160a01b038316600090815260026020526040902055600154612dfd9082612821565b6001555050565b612edd8460046003016000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060200160405290816000820154815250508585857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a6c72d06040518163ffffffff1660e01b815260040160206040518083038186803b158015612ea157600080fd5b505afa158015612eb5573d6000803e3d6000fd5b505050506040513d6020811015612ecb57600080fd5b505160049594939291906126fb613280565b612f1c60046001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166311212d66816393028d8361264b565b612ff58460086003016000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060200160405290816000820154815250508585857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323662bb96040518163ffffffff1660e01b815260040160206040518083038186803b158015612fb957600080fd5b505afa158015612fcd573d6000803e3d6000fd5b505050506040513d6020811015612fe357600080fd5b505160089594939291906125dd613280565b61303460086001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166307a8007081636669302a61264b565b61310d84600c6003016000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060200160405290816000820154815250508585857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631845f0db6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130d157600080fd5b505afa1580156130e5573d6000803e3d6000fd5b505050506040513d60208110156130fb57600080fd5b5051600c959493929190612b23613280565b61314c600c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663eaadf8488163f76d13b461264b565b50505050565b6001600160a01b03161590565b60015461316c90826128d7565b6001556001600160a01b03821660009081526002602052604090205461319290826128d7565b6001600160a01b0390921660009081526002602052604090209190915550565b511590565b8151600090156131cd5750815160001901611763565b50919050565b5190511490565b606061222884846000856132a4565b600081848411156132785760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561323d578181015183820152602001613225565b50505050905090810190601f16801561326a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6126418888888715613292578961329a565b61329a612964565b8989898989612b8c565b6060824710156132e55760405162461bcd60e51b81526004018080602001828103825260268152602001806134a66026913960400191505060405180910390fd5b6132ee85613400565b61333f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061337e5780518252601f19909201916020918201910161335f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146133e0576040519150601f19603f3d011682016040523d82523d6000602084013e6133e5565b606091505b50915091506133f5828286613406565b979650505050505050565b3b151590565b606083156134155750816117ea565b8251156134255782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561323d578181015183820152602001613225565b604051806020016040528060008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220552cffe46e8721df67caf2b0fde8f72e6961d83b357ca90a8b3e6046ea61b7ef64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c8063874c120b11610145578063d9a0c217116100bd578063e9fad8ee1161008c578063eeca156211610071578063eeca15621461065b578063f2fde38b14610678578063f76d13b41461069e5761025c565b8063e9fad8ee14610636578063eaadf8481461063e5761025c565b8063d9a0c217146105ce578063ddca3f43146105d6578063e2b01a5e146105de578063e39c08fc1461060a5761025c565b806395d89b4111610114578063a694fc3a116100f9578063a694fc3a14610558578063a93a085714610575578063cd7ea095146105ab5761025c565b806395d89b411461052a5780639aad141b146105325761025c565b8063874c120b146104d75780638da5cb5b146104f457806393028d83146104fc57806395cad3c7146105045761025c565b8063313ce567116101d85780636669302a116101a7578063715018a61161018c578063715018a61461047d57806378e3214f146104855780637e82a6f3146104b15761025c565b80636669302a1461044f57806370a08231146104575761025c565b8063313ce567146104195780633732b3941461043757806345b35f561461043f57806348d67e1b146104475761025c565b806318160ddd1161022f578063246132f911610214578063246132f9146103b55780632e1a7d4d146103d8578063303bfdae146103f55761025c565b806318160ddd1461037e5780631c4b774b146103985761025c565b806306fdde031461026157806307a80070146102de57806310eee734146102fd57806311212d6614610361575b600080fd5b6102696106a6565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102a357818101518382015260200161028b565b50505050905090810190601f1680156102d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102fb600480360360208110156102f457600080fd5b5035610881565b005b61031a6004803603602081101561031357600080fd5b50356109f3565b604080516001600160a01b039889168152602081019790975294909616858501526060850192909252608084015260a083015260c082019290925290519081900360e00190f35b6102fb6004803603602081101561037757600080fd5b5035610a4a565b610386610bb8565b60408051918252519081900360200190f35b6102fb600480360360208110156103ae57600080fd5b5035610bbe565b6102fb600480360360408110156103cb57600080fd5b5080359060200135610cff565b6102fb600480360360208110156103ee57600080fd5b5035611103565b6103fd611310565b604080516001600160a01b039092168252519081900360200190f35b610421611334565b6040805160ff9092168252519081900360200190f35b6103866113c0565b6102fb6113c6565b6103866113e9565b6102fb6113ef565b6103866004803603602081101561046d57600080fd5b50356001600160a01b031661145c565b6102fb61147b565b6102fb6004803603604081101561049b57600080fd5b506001600160a01b038135169060200135611546565b610386600480360360208110156104c757600080fd5b50356001600160a01b0316611709565b610386600480360360208110156104ed57600080fd5b5035611769565b6103fd6117f1565b6102fb611800565b6103866004803603602081101561051a57600080fd5b50356001600160a01b031661186b565b6102696118c5565b6103866004803603602081101561054857600080fd5b50356001600160a01b0316611a66565b6102fb6004803603602081101561056e57600080fd5b5035611ac0565b6102fb6004803603606081101561058b57600080fd5b506001600160a01b03813581169160208101359160409091013516611ced565b6102fb600480360360408110156105c157600080fd5b5080359060200135611f5e565b6103fd612087565b6103866120ab565b6102fb600480360360408110156105f457600080fd5b50803590602001356001600160a01b03166120b1565b6103866004803603604081101561062057600080fd5b50803590602001356001600160a01b03166121ae565b6102fb612230565b6102fb6004803603602081101561065457600080fd5b5035612249565b6103866004803603602081101561067157600080fd5b5035612408565b6102fb6004803603602081101561068e57600080fd5b50356001600160a01b0316612432565b6102fb612553565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561070157600080fd5b505afa158015610715573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561073e57600080fd5b810190808051604051939291908464010000000082111561075e57600080fd5b90830190602082018581111561077357600080fd5b825164010000000081118282018810171561078d57600080fd5b82525081516020918201929091019080838360005b838110156107ba5781810151838201526020016107a2565b50505050905090810190601f1680156107e75780820380516001836020036101000a031916815260200191505b5060405250505060405160200180807f4661726d696e673a20000000000000000000000000000000000000000000000081525060090182805190602001908083835b602083106108485780518252601f199092019160209182019101610829565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052905090565b674563918244f400008111156108de576040805162461bcd60e51b815260206004820152601d60248201527f536c6970706167652066656520766f746520697320746f6f2068696768000000604482015290519081900360640190fd5b336000818152600b60209081526040918290208251918201909252905481526109b1919061090b846125be565b6109143361145c565b61091c610bb8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323662bb96040518163ffffffff1660e01b815260040160206040518083038186803b15801561097557600080fd5b505afa158015610989573d6000803e3d6000fd5b505050506040513d602081101561099f57600080fd5b505160089594939291906125dd612630565b6109f060086001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166307a8007081636669302a61264b565b50565b60038181548110610a0057fe5b600091825260209091206009909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b03958616975093959490921693909287565b662386f26fc10000811115610aa6576040805162461bcd60e51b815260206004820152601460248201527f46656520766f746520697320746f6f2068696768000000000000000000000000604482015290519081900360640190fd5b33600081815260076020908152604091829020825191820190925290548152610b799190610ad3846125be565b610adc3361145c565b610ae4610bb8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a6c72d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3d57600080fd5b505afa158015610b51573d6000803e3d6000fd5b505050506040513d6020811015610b6757600080fd5b505160049594939291906126fb612630565b6109f060046001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166311212d66816393028d8361264b565b60015490565b600354339060005b81811015610c5d57600060038281548110610bdd57fe5b90600052602060002090600902019050610bf682611769565b6006820155610c0482612408565b60058201556001600160a01b03841615610c5457610c2282856121ae565b6001600160a01b0385166000908152600883016020908152604080832093909355600684015460078501909152919020555b50600101610bc6565b50600060038481548110610c6d57fe5b60009182526020808320338452600860099093020191820190526040909120549091508015610cf8573360008181526008840160205260408120558254610cc0916001600160a01b03909116908361274e565b604080518281529051339187917f04492fab062412e7e4e5f46c9e919f1640652946a5e163ad6e6c1c03d87954d29181900360200190a35b5050505050565b8160038181548110610d0d57fe5b60009182526020909120600990910201600201546001600160a01b03163314610d6d576040805162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b600354600090815b81811015610e0c57600060038281548110610d8c57fe5b90600052602060002090600902019050610da582611769565b6006820155610db382612408565b60058201556001600160a01b03841615610e0357610dd182856121ae565b6001600160a01b0385166000908152600883016020908152604080832093909355600684015460078501909152919020555b50600101610d75565b50610e21600019670de0b6b3a76400006127ba565b8410610e74576040805162461bcd60e51b815260206004820152600e60248201527f526577617264206f7665726c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b600060038681548110610e8357fe5b9060005260206000209060090201905060008160010154905081600301544210610f105780861015610efc576040805162461bcd60e51b815260206004820152601360248201527f52657761726420697320746f6f20736d616c6c00000000000000000000000000604482015290519081900360640190fd5b610f0686826127ba565b6004830155610fb9565b6003820154600090610f229042612821565b90506000610f3d84600401548361287e90919063ffffffff16565b905082610f4a89836128d7565b1015610f9d576040805162461bcd60e51b815260206004820152601360248201527f52657761726420697320746f6f20736d616c6c00000000000000000000000000604482015290519081900360640190fd5b610fb183610fab8a846128d7565b906127ba565b600485015550505b8154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561101c57600080fd5b505afa158015611030573d6000803e3d6000fd5b505050506040513d602081101561104657600080fd5b5051905061105481836127ba565b836004015411156110ac576040805162461bcd60e51b815260206004820152601160248201527f52657761726420697320746f6f20626967000000000000000000000000000000604482015290519081900360640190fd5b42600584018190556110be90836128d7565b600384015560408051888152905189917f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f55919081900360200190a25050505050505050565b600354339060005b818110156111a25760006003828154811061112257fe5b9060005260206000209060090201905061113b82611769565b600682015561114982612408565b60058201556001600160a01b038416156111995761116782856121ae565b6001600160a01b0385166000908152600883016020908152604080832093909355600684015460078501909152919020555b5060010161110b565b50600083116111f8576040805162461bcd60e51b815260206004820152601160248201527f43616e6e6f742077697468647261772030000000000000000000000000000000604482015290519081900360640190fd5b6112023384612931565b6040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b15801561127157600080fd5b505af1158015611285573d6000803e3d6000fd5b505050506040513d602081101561129b57600080fd5b505060408051848152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a260408051848152905160009133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561138f57600080fd5b505afa1580156113a3573d6000803e3d6000fd5b505050506040513d60208110156113b957600080fd5b5051905090565b60085490565b60035460005b818110156113e5576113dd81610bbe565b6001016113cc565b5050565b600c5490565b336000818152600b602090815260409182902082519182019092529054815261141b919061090b612964565b61145a60086001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166307a8007081636669302a61264b565b565b6001600160a01b0381166000908152600260205260409020545b919050565b61148361297f565b6001600160a01b03166114946117f1565b6001600160a01b0316146114ef576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61154e61297f565b6001600160a01b031661155f6117f1565b6001600160a01b0316146115ba576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b60035481101561164d57600381815481106115d457fe5b60009182526020909120600990910201546001600160a01b0384811691161415611645576040805162461bcd60e51b815260206004820152601160248201527f43616e2774207265736375652067696674000000000000000000000000000000604482015290519081900360640190fd5b6001016115bd565b506116626001600160a01b0383163383612983565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156113e5576116a4610bb8565b6116b76001600160a01b038416306129e7565b146113e5576040805162461bcd60e51b815260206004820152601c60248201527f43616e2774207769746864726177207374616b656420746f6b656e7300000000604482015290519081900360640190fd5b6001600160a01b038181166000908152600f602090815260408083208151928301909152548152909161176391907f000000000000000000000000000000000000000000000000000000000000000016631845f0db612a88565b92915050565b6000806003838154811061177957fe5b90600052602060002090600902019050611791610bb8565b6117a057600601549050611476565b6117ea6117df6117ae610bb8565b610fab670de0b6b3a76400006117d986600401546117d988600501546117d38c612408565b90612821565b9061287e565b6006830154906128d7565b9392505050565b6000546001600160a01b031690565b3360008181526007602090815260409182902082519182019092529054815261182c9190610ad3612964565b61145a60046001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166311212d66816393028d8361264b565b6001600160a01b038181166000908152600b602090815260408083208151928301909152548152909161176391907f0000000000000000000000000000000000000000000000000000000000000000166323662bb9612a88565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561192057600080fd5b505afa158015611934573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561195d57600080fd5b810190808051604051939291908464010000000082111561197d57600080fd5b90830190602082018581111561199257600080fd5b82516401000000008111828201881017156119ac57600080fd5b82525081516020918201929091019080838360005b838110156119d95781810151838201526020016119c1565b50505050905090810190601f168015611a065780820380516001836020036101000a031916815260200191505b5060405250505060405160200180807f6661726d2d0000000000000000000000000000000000000000000000000000008152506005018280519060200190808383602083106108485780518252601f199092019160209182019101610829565b6001600160a01b0381811660009081526007602090815260408083208151928301909152548152909161176391907f000000000000000000000000000000000000000000000000000000000000000016635a6c72d0612a88565b600354339060005b81811015611b5f57600060038281548110611adf57fe5b90600052602060002090600902019050611af882611769565b6006820155611b0682612408565b60058201556001600160a01b03841615611b5657611b2482856121ae565b6001600160a01b0385166000908152600883016020908152604080832093909355600684015460078501909152919020555b50600101611ac8565b5060008311611bb5576040805162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74207374616b652030000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810185905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd9160648083019260209291908290030181600087803b158015611c4357600080fd5b505af1158015611c57573d6000803e3d6000fd5b505050506040513d6020811015611c6d57600080fd5b50611c7a90503384612afe565b60408051848152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a260408051848152905133916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b611cf561297f565b6001600160a01b0316611d066117f1565b6001600160a01b031614611d61576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60035460005b81811015611df55760038181548110611d7c57fe5b60009182526020909120600990910201546001600160a01b0386811691161415611ded576040805162461bcd60e51b815260206004820152601560248201527f4769667420697320616c72656164792061646465640000000000000000000000604482015290519081900360640190fd5b600101611d67565b50600380546001810182556000919091526009027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b0380881673ffffffffffffffffffffffffffffffffffffffff19928316811784557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c85018890557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d9094018054918716919092161790556040805192835251909183917f64cc71b17412354fc7654b3a032c59b8aacbcc955fa02aecfec3be41d7350f249181900360200190a260408051858152905183917ff899c6d536e6cda78c5f4dce43ca0e8c47167deb2875ea8b777f21cc85899b1f919081900360200190a2604080516001600160a01b0385168152905183917f68898541a3500520160dc4a025aaabdb318ec2d614c236a5fb88f523d76a8d8a919081900360200190a25050505050565b8160038181548110611f6c57fe5b60009182526020909120600990910201600201546001600160a01b03163314611fcc576040805162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b600060038481548110611fdb57fe5b906000526020600020906009020190508060030154421015612044576040805162461bcd60e51b815260206004820152601060248201527f4e6f742066696e69736865642079657400000000000000000000000000000000604482015290519081900360640190fd5b6001810183905560408051848152905185917ff899c6d536e6cda78c5f4dce43ca0e8c47167deb2875ea8b777f21cc85899b1f919081900360200190a250505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045490565b6120b961297f565b6001600160a01b03166120ca6117f1565b6001600160a01b031614612125576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60006003838154811061213457fe5b60009182526020918290206009919091020160028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616908117909155604080519182525191935085927f68898541a3500520160dc4a025aaabdb318ec2d614c236a5fb88f523d76a8d8a92918290030190a2505050565b600080600384815481106121be57fe5b600091825260208083206001600160a01b0387168452600860099093020191820181526040808420546007840190925290922054909250612228919061222290670de0b6b3a764000090610fab90612219906117d38b611769565b6117d98961145c565b906128d7565b949350505050565b61224161223c3361145c565b611103565b61145a6113c6565b61012c8111156122a0576040805162461bcd60e51b815260206004820152601d60248201527f446563617920706572696f6420766f746520697320746f6f2068696768000000604482015290519081900360640190fd5b600a8110156122f6576040805162461bcd60e51b815260206004820152601c60248201527f446563617920706572696f6420766f746520697320746f6f206c6f7700000000604482015290519081900360640190fd5b336000818152600f60209081526040918290208251918201909252905481526123c99190612323846125be565b61232c3361145c565b612334610bb8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631845f0db6040518163ffffffff1660e01b815260040160206040518083038186803b15801561238d57600080fd5b505afa1580156123a1573d6000803e3d6000fd5b505050506040513d60208110156123b757600080fd5b5051600c959493929190612b23612630565b6109f0600c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663eaadf8488163f76d13b461264b565b6000611763426003848154811061241b57fe5b906000526020600020906009020160030154612b76565b61243a61297f565b6001600160a01b031661244b6117f1565b6001600160a01b0316146124a6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166124eb5760405162461bcd60e51b81526004018080602001828103825260268152602001806134806026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b336000818152600f602090815260409182902082519182019092529054815261257f9190612323612964565b61145a600c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663eaadf8488163f76d13b461264b565b6125c661346c565b506040805160208101909152600182018152919050565b60408051848152831515602082015280820183905290516001600160a01b038616917fce0cf859d853e1944032294143a1bf3ad799998ae77acbeb6c4d9b20d6910240919081900360600190a250505050565b612641888888888889898989612b8c565b5050505050505050565b600185015461269f5781816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561268257600080fd5b505af1158015612696573d6000803e3d6000fd5b50505050610cf8565b838386600001546040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156126dc57600080fd5b505af11580156126f0573d6000803e3d6000fd5b505050505050505050565b60408051848152831515602082015280820183905290516001600160a01b038616917fe117cae46817b894b41a4412b73ae0ba746a5707b94e02d83b4c6502010b11ac919081900360600190a250505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526127b5908490612ccb565b505050565b6000808211612810576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161281957fe5b049392505050565b600082821115612878576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261288d57506000611763565b8282028284828161289a57fe5b04146117ea5760405162461bcd60e51b81526004018080602001828103825260218152602001806134cc6021913960400191505060405180910390fd5b6000828201838110156117ea576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b61293b8282612d7c565b60006129468361145c565b90506127b58361295683856128d7565b8361295f610bb8565b612e04565b61296c61346c565b5060408051602081019091526000815290565b3390565b80156127b55761299283613152565b156129d3576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156129cd573d6000803e3d6000fd5b506127b5565b6127b56001600160a01b038416838361274e565b60006129f283613152565b15612a0857506001600160a01b03811631611763565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a5557600080fd5b505afa158015612a69573d6000803e3d6000fd5b505050506040513d6020811015612a7f57600080fd5b50519050611763565b825160009015612a9e57508251600019016117ea565b82826040518163ffffffff1660e01b815260040160206040518083038186803b158015612aca57600080fd5b505afa158015612ade573d6000803e3d6000fd5b505050506040513d6020811015612af457600080fd5b5051949350505050565b612b08828261315f565b6000612b138361145c565b90506127b5836129568385612821565b60408051848152831515602082015280820183905290516001600160a01b038616917fd0784d105a7412ffec29813ff8401f04f3d1cdbe6aca756974b1a31f830e5cb7919081900360600190a250505050565b6000818310612b8557816117ea565b5090919050565b600189015460028a0154819080612ba28b6131b2565b15612bb857612bb1818a612821565b9050612bd9565b612bd6612bcf612bc88d896131b7565b8b9061287e565b8490612821565b92505b612be28a6131b2565b15612bf857612bf181896128d7565b9050612c19565b612c16612c0f612c088c896131b7565b8a9061287e565b84906128d7565b92505b838314612c285760018d018390555b818114612c375760028d018190555b60008715612c5c57612c5788610fab612c50858b61287e565b87906128d7565b612c5e565b865b8e549091508114612c6d57808e555b612c778b8d6131d3565b612c9a576001600160a01b038d16600090815260038f01602052604090208b5190555b612cbb8d612ca88d8a6131b7565b612cb18e6131b2565b8c8a63ffffffff16565b5050505050505050505050505050565b6060612d20826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131da9092919063ffffffff16565b8051909150156127b557808060200190516020811015612d3f57600080fd5b50516127b55760405162461bcd60e51b815260040180806020018281038252602a8152602001806134ed602a913960400191505060405180910390fd5b604080518082018252601b81527f4275726e20616d6f756e7420657863656564732062616c616e636500000000006020808301919091526001600160a01b038516600090815260029091529190912054612dd79183906131e9565b6001600160a01b038316600090815260026020526040902055600154612dfd9082612821565b6001555050565b612edd8460046003016000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060200160405290816000820154815250508585857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a6c72d06040518163ffffffff1660e01b815260040160206040518083038186803b158015612ea157600080fd5b505afa158015612eb5573d6000803e3d6000fd5b505050506040513d6020811015612ecb57600080fd5b505160049594939291906126fb613280565b612f1c60046001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166311212d66816393028d8361264b565b612ff58460086003016000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060200160405290816000820154815250508585857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323662bb96040518163ffffffff1660e01b815260040160206040518083038186803b158015612fb957600080fd5b505afa158015612fcd573d6000803e3d6000fd5b505050506040513d6020811015612fe357600080fd5b505160089594939291906125dd613280565b61303460086001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166307a8007081636669302a61264b565b61310d84600c6003016000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060200160405290816000820154815250508585857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631845f0db6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130d157600080fd5b505afa1580156130e5573d6000803e3d6000fd5b505050506040513d60208110156130fb57600080fd5b5051600c959493929190612b23613280565b61314c600c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663eaadf8488163f76d13b461264b565b50505050565b6001600160a01b03161590565b60015461316c90826128d7565b6001556001600160a01b03821660009081526002602052604090205461319290826128d7565b6001600160a01b0390921660009081526002602052604090209190915550565b511590565b8151600090156131cd5750815160001901611763565b50919050565b5190511490565b606061222884846000856132a4565b600081848411156132785760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561323d578181015183820152602001613225565b50505050905090810190601f16801561326a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6126418888888715613292578961329a565b61329a612964565b8989898989612b8c565b6060824710156132e55760405162461bcd60e51b81526004018080602001828103825260268152602001806134a66026913960400191505060405180910390fd5b6132ee85613400565b61333f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061337e5780518252601f19909201916020918201910161335f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146133e0576040519150601f19603f3d011682016040523d82523d6000602084013e6133e5565b606091505b50915091506133f5828286613406565b979650505050505050565b3b151590565b606083156134155750816117ea565b8251156134255782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561323d578181015183820152602001613225565b604051806020016040528060008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220552cffe46e8721df67caf2b0fde8f72e6961d83b357ca90a8b3e6046ea61b7ef64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10253,
        "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10257,
        "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10440,
        "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
        "label": "tokenRewards",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(TokenRewards)10437_storage)dyn_storage"
      },
      {
        "astId": 7055,
        "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
        "label": "_fee",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Data)9889_storage"
      },
      {
        "astId": 7057,
        "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
        "label": "_slippageFee",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Data)9889_storage"
      },
      {
        "astId": 7059,
        "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
        "label": "_decayPeriod",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Data)9889_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TokenRewards)10437_storage)dyn_storage": {
        "base": "t_struct(TokenRewards)10437_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseRewards.TokenRewards[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1118": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Data)9760_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vote.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)9760_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Data)9760_storage": {
        "encoding": "inplace",
        "label": "struct Vote.Data",
        "members": [
          {
            "astId": 9759,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)9889_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Data",
        "members": [
          {
            "astId": 9880,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "result",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9882,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "_weightedSum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9884,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "_defaultVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9888,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "votes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Data)9760_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenRewards)10437_storage": {
        "encoding": "inplace",
        "label": "struct BaseRewards.TokenRewards",
        "members": [
          {
            "astId": 10416,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "gift",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1118"
          },
          {
            "astId": 10418,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "duration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10420,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "rewardDistribution",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 10422,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "periodFinish",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10424,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "rewardRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10426,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10428,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "rewardPerTokenStored",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 10432,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "userRewardPerTokenPaid",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 10436,
            "contract": "contracts/inch/farming/FarmingRewards.sol:FarmingRewards",
            "label": "rewards",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}